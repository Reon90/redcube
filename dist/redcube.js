!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("redcube",[],t):"object"==typeof exports?exports.redcube=t():e.redcube=t()}(self,(function(){return(()=>{var e,t,r,n,i={934:(e,t,r)=>{"use strict";r.r(t),r.d(t,{RedCube:()=>Ge});class n{constructor(){this._services=new Map,this._singletons=new Map,this.update=this.update.bind(this)}register(e,t,r=[],...n){this._services.set(e,{definition:t,dependencies:r,args:n}),this._isClass(t)?t.__update=this.update:this._updateDep(e,t)}get(e){const t=this._services.get(e);if(!t)return null;if(this._isClass(t.definition)){const r=this._singletons.get(e);if(r)return r;{const r=this._createInstance(t);return this._singletons.set(e,r),r}}return t.definition}update(e,...t){this._services.get(e).args=t,this._singletons.delete(e);const r=this.get(e);this._updateDep(e,r)}_updateDep(e,t){for(const[r,n]of this._singletons)this._services.get(r).dependencies.some((t=>t===e))&&n[`set${e.charAt(0).toUpperCase()+e.slice(1)}`].call(n,t);this._singletons.set(e,t)}_getResolvedDependencies(e){let t=[];return e.dependencies&&(t=e.dependencies.map((e=>[e,this.get(e)]))),t}_createInstance(e){const t=new e.definition(...e.args);return this._getResolvedDependencies(e).forEach((([e,r])=>{t[`set${e.charAt(0).toUpperCase()+e.slice(1)}`].call(t,r)})),t}_isClass(e){return"function"==typeof e&&/^class\s/.test(Function.prototype.toString.call(e))}}class i{constructor(e){let t,r,n;if(e&&"object"==typeof e&&e.hasOwnProperty("elements")){for(r=e.elements,n=new Float32Array(16),t=0;t<16;++t)n[t]=r[t];this.elements=n}else this.elements=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])}set(e){let t,r,n;if(r=e,n=this.elements,r!==n){for(t=0;t<16;++t)n[t]=r[t];return this}}multiply(e){return this.concat(e),this}concat({elements:e}){let t,r,n,i,s,o,a,c;if(r=this.elements,n=this.elements,i=e,r===i)for(i=new Float32Array(16),t=0;t<16;++t)i[t]=r[t];for(t=0;t<4;t++)s=n[t],o=n[t+4],a=n[t+8],c=n[t+12],r[t]=s*i[0]+o*i[1]+a*i[2]+c*i[3],r[t+4]=s*i[4]+o*i[5]+a*i[6]+c*i[7],r[t+8]=s*i[8]+o*i[9]+a*i[10]+c*i[11],r[t+12]=s*i[12]+o*i[13]+a*i[14]+c*i[15];return this}setInverseOf({elements:e}){let t,r,n,i,s;if(r=e,n=this.elements,i=new Float32Array(16),i[0]=r[5]*r[10]*r[15]-r[5]*r[11]*r[14]-r[9]*r[6]*r[15]+r[9]*r[7]*r[14]+r[13]*r[6]*r[11]-r[13]*r[7]*r[10],i[4]=-r[4]*r[10]*r[15]+r[4]*r[11]*r[14]+r[8]*r[6]*r[15]-r[8]*r[7]*r[14]-r[12]*r[6]*r[11]+r[12]*r[7]*r[10],i[8]=r[4]*r[9]*r[15]-r[4]*r[11]*r[13]-r[8]*r[5]*r[15]+r[8]*r[7]*r[13]+r[12]*r[5]*r[11]-r[12]*r[7]*r[9],i[12]=-r[4]*r[9]*r[14]+r[4]*r[10]*r[13]+r[8]*r[5]*r[14]-r[8]*r[6]*r[13]-r[12]*r[5]*r[10]+r[12]*r[6]*r[9],i[1]=-r[1]*r[10]*r[15]+r[1]*r[11]*r[14]+r[9]*r[2]*r[15]-r[9]*r[3]*r[14]-r[13]*r[2]*r[11]+r[13]*r[3]*r[10],i[5]=r[0]*r[10]*r[15]-r[0]*r[11]*r[14]-r[8]*r[2]*r[15]+r[8]*r[3]*r[14]+r[12]*r[2]*r[11]-r[12]*r[3]*r[10],i[9]=-r[0]*r[9]*r[15]+r[0]*r[11]*r[13]+r[8]*r[1]*r[15]-r[8]*r[3]*r[13]-r[12]*r[1]*r[11]+r[12]*r[3]*r[9],i[13]=r[0]*r[9]*r[14]-r[0]*r[10]*r[13]-r[8]*r[1]*r[14]+r[8]*r[2]*r[13]+r[12]*r[1]*r[10]-r[12]*r[2]*r[9],i[2]=r[1]*r[6]*r[15]-r[1]*r[7]*r[14]-r[5]*r[2]*r[15]+r[5]*r[3]*r[14]+r[13]*r[2]*r[7]-r[13]*r[3]*r[6],i[6]=-r[0]*r[6]*r[15]+r[0]*r[7]*r[14]+r[4]*r[2]*r[15]-r[4]*r[3]*r[14]-r[12]*r[2]*r[7]+r[12]*r[3]*r[6],i[10]=r[0]*r[5]*r[15]-r[0]*r[7]*r[13]-r[4]*r[1]*r[15]+r[4]*r[3]*r[13]+r[12]*r[1]*r[7]-r[12]*r[3]*r[5],i[14]=-r[0]*r[5]*r[14]+r[0]*r[6]*r[13]+r[4]*r[1]*r[14]-r[4]*r[2]*r[13]-r[12]*r[1]*r[6]+r[12]*r[2]*r[5],i[3]=-r[1]*r[6]*r[11]+r[1]*r[7]*r[10]+r[5]*r[2]*r[11]-r[5]*r[3]*r[10]-r[9]*r[2]*r[7]+r[9]*r[3]*r[6],i[7]=r[0]*r[6]*r[11]-r[0]*r[7]*r[10]-r[4]*r[2]*r[11]+r[4]*r[3]*r[10]+r[8]*r[2]*r[7]-r[8]*r[3]*r[6],i[11]=-r[0]*r[5]*r[11]+r[0]*r[7]*r[9]+r[4]*r[1]*r[11]-r[4]*r[3]*r[9]-r[8]*r[1]*r[7]+r[8]*r[3]*r[5],i[15]=r[0]*r[5]*r[10]-r[0]*r[6]*r[9]-r[4]*r[1]*r[10]+r[4]*r[2]*r[9]+r[8]*r[1]*r[6]-r[8]*r[2]*r[5],s=r[0]*i[0]+r[1]*i[4]+r[2]*i[8]+r[3]*i[12],0===s)return this;for(s=1/s,t=0;t<16;t++)n[t]=i[t]*s;return this}invert(){return this.setInverseOf(this)}makeOrthographic(e,t,r,n,i,s){var o=this.elements,a=1/(t-e),c=1/(r-n),l=1/(s-i),h=(t+e)*a,u=(r+n)*c,f=(s+i)*l;return o[0]=2*a,o[4]=0,o[8]=0,o[12]=-h,o[1]=0,o[5]=2*c,o[9]=0,o[13]=-u,o[2]=0,o[6]=0,o[10]=-2*l,o[14]=-f,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this}setOrtho(e,t,r,n){let i,s,o,a;return s=1/e,o=1/t,a=2/(r-n),i=this.elements,i[0]=s,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=o,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=a,i[11]=(n+r)/(r-n),i[12]=0,i[13]=0,i[14]=0,i[15]=1,this}setPerspective(e,t,r,n){let i,s,o,a;if(r===n||0===t)throw"null frustum";if(r<=0)throw"near <= 0";if(n<=0)throw"far <= 0";if(e/=2,o=Math.sin(e),0===o)throw"null frustum";return s=1/(n-r),a=Math.cos(e)/o,i=this.elements,i[0]=a/t,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=a,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=-(n+r)*s,i[11]=-1,i[12]=0,i[13]=0,i[14]=-2*r*n*s,i[15]=0,this}perspective(e,t,r,n){return this.concat((new i).setPerspective(e,t,r,n))}multiplyVector4({elements:e}){const t=this.elements,r=e,n=new c,i=n.elements;return i[0]=r[0]*t[0]+r[1]*t[4]+r[2]*t[8]+r[3]*t[12],i[1]=r[0]*t[1]+r[1]*t[5]+r[2]*t[9]+r[3]*t[13],i[2]=r[0]*t[2]+r[1]*t[6]+r[2]*t[10]+r[3]*t[14],i[3]=r[0]*t[3]+r[1]*t[7]+r[2]*t[11]+r[3]*t[15],n}getScaling(){let e=this.elements,t=e[0],r=e[1],n=e[2],i=e[4],s=e[5],a=e[6],c=e[8],l=e[9],h=e[10];return new o([Math.sqrt(t*t+r*r+n*n),Math.sqrt(i*i+s*s+a*a),Math.sqrt(c*c+l*l+h*h)])}scale(e){const t=e.elements[0],r=e.elements[1],n=e.elements[2],i=this.elements;return i[0]*=t,i[4]*=r,i[8]*=n,i[1]*=t,i[5]*=r,i[9]*=n,i[2]*=t,i[6]*=r,i[10]*=n,i[3]*=t,i[7]*=r,i[11]*=n,this}restoreScale(e){const t=e.elements[0],r=e.elements[1],n=e.elements[2],i=this.elements;return i[0]/=t,i[4]/=r,i[8]/=n,i[1]/=t,i[5]/=r,i[9]/=n,i[2]/=t,i[6]/=r,i[10]/=n,i[3]/=t,i[7]/=r,i[11]/=n,this}setTranslate(e){const t=this.elements,r=e.elements[0],n=e.elements[1],i=e.elements[2];return t[12]=r,t[13]=n,t[14]=i,t[15]=1,this}translate(e,t,r){const n=this.elements;return n[12]+=n[0]*e+n[4]*t+n[8]*r,n[13]+=n[1]*e+n[5]*t+n[9]*r,n[14]+=n[2]*e+n[6]*t+n[10]*r,n[15]+=n[3]*e+n[7]*t+n[11]*r,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],r=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],n=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,r,n))}rotate(e,t){let r,n,i,s,o,a,c,l,h,u,f,m,T,E,d,R,p,_,A,g,x,F,v,U,b=e.elements[0],N=e.elements[1],I=e.elements[2],S=Math.hypot(b,N,I);if(S<Number.EPSILON)return null;S=1/S,b*=S,N*=S,I*=S,r=Math.sin(t),n=Math.cos(t),i=1-n;let M=this.elements;return s=M[0],o=M[1],a=M[2],c=M[3],l=M[4],h=M[5],u=M[6],f=M[7],m=M[8],T=M[9],E=M[10],d=M[11],R=b*b*i+n,p=N*b*i+I*r,_=I*b*i-N*r,A=b*N*i-I*r,g=N*N*i+n,x=I*N*i+b*r,F=b*I*i+N*r,v=N*I*i-b*r,U=I*I*i+n,M[0]=s*R+l*p+m*_,M[1]=o*R+h*p+T*_,M[2]=a*R+u*p+E*_,M[3]=c*R+f*p+d*_,M[4]=s*A+l*g+m*x,M[5]=o*A+h*g+T*x,M[6]=a*A+u*g+E*x,M[7]=c*A+f*g+d*x,M[8]=s*F+l*v+m*U,M[9]=o*F+h*v+T*U,M[10]=a*F+u*v+E*U,M[11]=c*F+f*v+d*U,this}makeRotationAxis(e,t){const r=this.elements,n=Math.cos(t),i=Math.sin(t),s=1-n,o=e.elements[0],a=e.elements[1],c=e.elements[2],l=s*o,h=s*a;return r[0]=l*o+n,r[1]=l*a-i*c,r[2]=l*c+i*a,r[3]=0,r[4]=l*a+i*c,r[5]=h*a+n,r[6]=h*c-i*o,r[7]=0,r[8]=l*c-i*a,r[9]=h*c+i*o,r[10]=s*c*c+n,r[11]=0,r[15]=1,this}makeRotationFromQuaternion(e){const t=this.elements,r=e[0],n=e[1],i=e[2],s=e[3],o=r+r,a=n+n,c=i+i,l=r*o,h=r*a,u=r*c,f=n*a,m=n*c,T=i*c,E=s*o,d=s*a,R=s*c;return t[0]=1-(f+T),t[4]=h-R,t[8]=u+d,t[1]=h+R,t[5]=1-(l+T),t[9]=m-E,t[2]=u-d,t[6]=m+E,t[10]=1-(l+f),this}transpose(){let e,t;return e=this.elements,t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}}class s{constructor(e){this.elements=e.slice()}lerp(e,t,r){const n=this.elements;for(let i=0;i<n.length;i++)n[i]=e[i]+r*(t[i]-e[i]);return this}}class o{constructor(e){const t=new Float32Array(3);e&&"object"==typeof e&&(t[0]=e[0],t[1]=e[1],t[2]=e[2]),this.elements=t}get x(){return this.elements[0]}get y(){return this.elements[1]}get z(){return this.elements[2]}set x(e){this.elements[0]=e}set y(e){this.elements[1]=e}set z(e){this.elements[2]=e}static FromArrayToRef(e,t,r){r.x=e[t],r.y=e[t+1],r.z=e[t+2]}projectOnVector(e){const t=o.dot(e,this)/e.lengthSq();return new o(e).scale(t)}applyQuaternion({elements:e}){const t=this.elements[0],r=this.elements[1],n=this.elements[2],i=e[0],s=e[1],o=e[2],a=e[3],c=a*t+s*n-o*r,l=a*r+o*t-i*n,h=a*n+i*r-s*t,u=-i*t-s*r-o*n;return this.elements[0]=c*a+u*-i+l*-o-h*-s,this.elements[1]=l*a+u*-s+h*-i-c*-o,this.elements[2]=h*a+u*-o+c*-s-l*-i,this}normalize(){const e=this.elements,t=e[0],r=e[1],n=e[2];let i=Math.sqrt(t*t+r*r+n*n);return i?(1==i||(i=1/i,e[0]=t*i,e[1]=r*i,e[2]=n*i),this):(e[0]=0,e[1]=0,e[2]=0,this)}add(e){const t=this.elements;return e=e.elements,t[0]=t[0]+e[0],t[1]=t[1]+e[1],t[2]=t[2]+e[2],this}addS(e){const t=this.elements;return t[0]=t[0]+e,t[1]=t[1]+e,t[2]=t[2]+e,this}scale(e){const t=this.elements;return t[0]=t[0]*e,t[1]=t[1]*e,t[2]=t[2]*e,this}scale2(e){return new o([this.x*e,this.y*e,this.z*e])}subtract2(e){return new o([this.x-e.x,this.y-e.y,this.z-e.z])}add2(e){return new o([this.x+e.x,this.y+e.y,this.z+e.z])}distanceToSquared(e,t,r){const n=this.elements[0]-e,i=this.elements[1]-t,s=this.elements[2]-r;return n*n+i*i+s*s}subtract(e){const t=this.elements;return e=e.elements,t[0]=t[0]-e[0],t[1]=t[1]-e[1],t[2]=t[2]-e[2],this}divideScalar(e){return this.scale(1/e)}applyMatrix4({elements:e}){const t=this.elements[0],r=this.elements[1],n=this.elements[2],i=e;this.elements[0]=i[0]*t+i[4]*r+i[8]*n+i[12],this.elements[1]=i[1]*t+i[5]*r+i[9]*n+i[13],this.elements[2]=i[2]*t+i[6]*r+i[10]*n+i[14];const s=i[3]*t+i[7]*r+i[11]*n+i[15];return this.divideScalar(s)}lerp(e,t,r){const n=this.elements,i=e[0],s=e[1],o=e[2];return n[0]=i+r*(t[0]-i),n[1]=s+r*(t[1]-s),n[2]=o+r*(t[2]-o),this}lengthSq(){return this.elements[0]*this.elements[0]+this.elements[1]*this.elements[1]+this.elements[2]*this.elements[2]}multiply({elements:e}){return this.elements[0]*=e[0],this.elements[1]*=e[1],this.elements[2]*=e[2],this}static angle(e,t){const r=new o(e.elements),n=new o(t.elements);r.normalize(),n.normalize();const i=o.dot(r,n);return i>1?0:Math.acos(i)}static cross(e,t){e=e.elements,t=t.elements;const r=e[0],n=e[1],i=e[2],s=t[0],a=t[1],c=t[2],l=new o;return l.elements[0]=n*c-i*a,l.elements[1]=i*s-r*c,l.elements[2]=r*a-n*s,l}static dot(e,t){return e=e.elements,t=t.elements,e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}}class a{constructor(){this.min=new o([1/0,1/0,1/0]),this.max=new o([-1/0,-1/0,-1/0])}expand(e){this.min.min(e.min),this.max.max(e.max)}getSize(){const e=new o;return e.subVectors(this.max,this.min),e.length()}}class c{constructor(e){const t=new Float32Array(4);e&&"object"==typeof e&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3]),this.elements=t}set(e){const t=this.elements;return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],this}add(e){const t=this.elements;return e=e.elements,t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=t[3]+e[3],this}normalize(){const e=this.elements[0],t=this.elements[1],r=this.elements[2],n=this.elements[3];let i=e*e+t*t+r*r+n*n;return i>0&&(i=1/Math.sqrt(i),this.elements[0]=e*i,this.elements[1]=t*i,this.elements[2]=r*i,this.elements[3]=n*i),this}setFromRotationMatrix({elements:e}){const t=e,r=t[0],n=t[4],i=t[8],s=t[1],o=t[5],a=t[9],c=t[2],l=t[6],h=t[10],u=r+o+h;let f;return u>0?(f=.5/Math.sqrt(u+1),this.elements[3]=.25/f,this.elements[0]=(l-a)*f,this.elements[1]=(i-c)*f,this.elements[2]=(s-n)*f):r>o&&r>h?(f=2*Math.sqrt(1+r-o-h),this.elements[3]=(l-a)/f,this.elements[0]=.25*f,this.elements[1]=(n+s)/f,this.elements[2]=(i+c)/f):o>h?(f=2*Math.sqrt(1+o-r-h),this.elements[3]=(i-c)/f,this.elements[0]=(n+s)/f,this.elements[1]=.25*f,this.elements[2]=(a+l)/f):(f=2*Math.sqrt(1+h-r-o),this.elements[3]=(s-n)/f,this.elements[0]=(i+c)/f,this.elements[1]=(a+l)/f,this.elements[2]=.25*f),this}lerp(e,t,r){const n=this.elements;if(0===r)return this;if(1===r)return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],this;const i=e[0],s=e[1],o=e[2],a=e[3];let c=a*t[3]+i*t[0]+s*t[1]+o*t[2];if(c<0?(n[3]=-t[3],n[0]=-t[0],n[1]=-t[1],n[2]=-t[2],c=-c):(n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3]),c>=1)return n[3]=a,n[0]=i,n[1]=s,n[2]=o,this;const l=1-c*c;if(l<=Number.EPSILON){var h=1-r;return n[3]=h*a+r*n[3],n[0]=h*i+r*n[0],n[1]=h*s+r*n[1],n[2]=h*o+r*n[2],this.normalize()}const u=Math.sqrt(l),f=Math.atan2(u,c),m=Math.sin((1-r)*f)/u,T=Math.sin(r*f)/u;return n[3]=a*m+n[3]*T,n[0]=i*m+n[0]*T,n[1]=s*m+n[1]*T,n[2]=o*m+n[2]*T,this}inverse(){return this.elements[0]=-this.elements[0],this.elements[1]=-this.elements[1],this.elements[2]=-this.elements[2],this}}class l{constructor(e){const t=new Float32Array(2);e&&"object"==typeof e&&(t[0]=e[0],t[1]=e[1]),this.elements=t}get x(){return this.elements[0]}get y(){return this.elements[1]}set x(e){this.elements[0]=e}set y(e){this.elements[1]=e}subtract(e){const t=this.elements;return e=e.elements,t[0]=t[0]-e[0],t[1]=t[1]-e[1],this}lerp(e,t,r){const n=this.elements,i=e[0],s=e[1];return n[0]=i+r*(t[0]-i),n[1]=s+r*(t[1]-s),this}}function h(e){const t=[new c,new c,new c,new c,new c,new c],r=e.elements;let n=r[0],i=r[1],s=r[2],o=r[3],a=r[4],l=r[5],h=r[6],u=r[7],f=r[8],m=r[9],T=r[10],E=r[11],d=r[12],R=r[13],p=r[14],_=r[15];return t[0].set([o-n,u-a,E-f,_-d]).normalize(),t[1].set([o+n,u+a,E+f,_+d]).normalize(),t[2].set([o+i,u+l,E+m,_+R]).normalize(),t[3].set([o-i,u-l,E-m,_-R]).normalize(),t[4].set([o-s,u-h,E-T,_-p]).normalize(),t[5].set([o+s,u+h,E+T,_+p]).normalize(),t}class u{constructor(){this.opaqueChildren=[],this.transparentChildren=[],this.meshes=[],this.children=[],this.bin=[],this.matrixWorld=new i,this.matrix=new i,this.variants=[]}}class f{constructor(e,t){this.uuid=Math.floor(Date.now()*Math.random()),this.name=e,this.children=[],this.matrix=new i,this.matrixWorld=new i,this.parent=t}getPosition(){return new Float32Array([this.matrixWorld.elements[12],this.matrixWorld.elements[13],this.matrixWorld.elements[14]])}setPosition(e,t,r){t&&this.matrix.makeRotationFromQuaternion(t),r&&this.matrix.scale(new o(r)),e&&this.matrix.setTranslate(new o(e))}setMatrix(e){this.matrix.set(e)}setMatrixWorld(e){this.matrixWorld.set(e)}updateMatrix(){const e=new i;e.multiply(this.parent.matrixWorld),e.multiply(this.matrix),this.setMatrixWorld(e.elements)}}const m={0:"NONE",1:"ONE",2:"LINE_LOOP",3:"LINE_STRIP",4:"TRIANGLES",5:"TRIANGLE_STRIP",6:"TRIANGLE_FAN",256:"DEPTH_BUFFER_BIT",512:"NEVER",513:"LESS",514:"EQUAL",515:"LEQUAL",516:"GREATER",517:"NOTEQUAL",518:"GEQUAL",519:"ALWAYS",768:"SRC_COLOR",769:"ONE_MINUS_SRC_COLOR",770:"SRC_ALPHA",771:"ONE_MINUS_SRC_ALPHA",772:"DST_ALPHA",773:"ONE_MINUS_DST_ALPHA",774:"DST_COLOR",775:"ONE_MINUS_DST_COLOR",776:"SRC_ALPHA_SATURATE",1024:"STENCIL_BUFFER_BIT",1028:"FRONT",1029:"BACK",1032:"FRONT_AND_BACK",1280:"INVALID_ENUM",1281:"INVALID_VALUE",1282:"INVALID_OPERATION",1285:"OUT_OF_MEMORY",1286:"INVALID_FRAMEBUFFER_OPERATION",1798:"drawingBufferHeight",2304:"CW",2305:"CCW",2712:"drawingBufferWidth",2849:"LINE_WIDTH",2884:"CULL_FACE",2885:"CULL_FACE_MODE",2886:"FRONT_FACE",2928:"DEPTH_RANGE",2929:"DEPTH_TEST",2930:"DEPTH_WRITEMASK",2931:"DEPTH_CLEAR_VALUE",2932:"DEPTH_FUNC",2960:"STENCIL_TEST",2961:"STENCIL_CLEAR_VALUE",2962:"STENCIL_FUNC",2963:"STENCIL_VALUE_MASK",2964:"STENCIL_FAIL",2965:"STENCIL_PASS_DEPTH_FAIL",2966:"STENCIL_PASS_DEPTH_PASS",2967:"STENCIL_REF",2968:"STENCIL_WRITEMASK",2978:"VIEWPORT",3024:"DITHER",3042:"BLEND",3074:"READ_BUFFER",3088:"SCISSOR_BOX",3089:"SCISSOR_TEST",3106:"COLOR_CLEAR_VALUE",3107:"COLOR_WRITEMASK",3314:"UNPACK_ROW_LENGTH",3315:"UNPACK_SKIP_ROWS",3316:"UNPACK_SKIP_PIXELS",3317:"UNPACK_ALIGNMENT",3330:"PACK_ROW_LENGTH",3331:"PACK_SKIP_ROWS",3332:"PACK_SKIP_PIXELS",3333:"PACK_ALIGNMENT",3379:"MAX_TEXTURE_SIZE",3386:"MAX_VIEWPORT_DIMS",3408:"SUBPIXEL_BITS",3410:"RED_BITS",3411:"GREEN_BITS",3412:"BLUE_BITS",3413:"ALPHA_BITS",3414:"DEPTH_BITS",3415:"STENCIL_BITS",3553:"TEXTURE_2D",4352:"DONT_CARE",4353:"FASTEST",4354:"NICEST",5120:"BYTE",5121:"UNSIGNED_BYTE",5122:"SHORT",5123:"UNSIGNED_SHORT",5124:"INT",5125:"UNSIGNED_INT",5126:"FLOAT",5131:"HALF_FLOAT",5386:"INVERT",5890:"TEXTURE",6144:"COLOR",6145:"DEPTH",6146:"STENCIL",6402:"DEPTH_COMPONENT",6403:"RED",6406:"ALPHA",6407:"RGB",6408:"RGBA",6409:"LUMINANCE",6410:"LUMINANCE_ALPHA",7680:"KEEP",7681:"REPLACE",7682:"INCR",7683:"DECR",7936:"VENDOR",7937:"RENDERER",7938:"VERSION",9728:"NEAREST",9729:"LINEAR",9984:"NEAREST_MIPMAP_NEAREST",9985:"LINEAR_MIPMAP_NEAREST",9986:"NEAREST_MIPMAP_LINEAR",9987:"LINEAR_MIPMAP_LINEAR",10240:"TEXTURE_MAG_FILTER",10241:"TEXTURE_MIN_FILTER",10242:"TEXTURE_WRAP_S",10243:"TEXTURE_WRAP_T",10497:"REPEAT",10752:"POLYGON_OFFSET_UNITS",16384:"COLOR_BUFFER_BIT",32769:"CONSTANT_COLOR",32770:"ONE_MINUS_CONSTANT_COLOR",32771:"CONSTANT_ALPHA",32772:"ONE_MINUS_CONSTANT_ALPHA",32773:"BLEND_COLOR",32774:"FUNC_ADD",32775:"MIN",32776:"MAX",32777:"BLEND_EQUATION_RGB",32778:"FUNC_SUBTRACT",32779:"FUNC_REVERSE_SUBTRACT",32819:"UNSIGNED_SHORT_4_4_4_4",32820:"UNSIGNED_SHORT_5_5_5_1",32823:"POLYGON_OFFSET_FILL",32824:"POLYGON_OFFSET_FACTOR",32849:"RGB8",32854:"RGBA4",32855:"RGB5_A1",32856:"RGBA8",32857:"RGB10_A2",32873:"TEXTURE_BINDING_2D",32874:"TEXTURE_BINDING_3D",32877:"UNPACK_SKIP_IMAGES",32878:"UNPACK_IMAGE_HEIGHT",32879:"TEXTURE_3D",32882:"TEXTURE_WRAP_R",32883:"MAX_3D_TEXTURE_SIZE",32926:"SAMPLE_ALPHA_TO_COVERAGE",32928:"SAMPLE_COVERAGE",32936:"SAMPLE_BUFFERS",32937:"SAMPLES",32938:"SAMPLE_COVERAGE_VALUE",32939:"SAMPLE_COVERAGE_INVERT",32968:"BLEND_DST_RGB",32969:"BLEND_SRC_RGB",32970:"BLEND_DST_ALPHA",32971:"BLEND_SRC_ALPHA",33e3:"MAX_ELEMENTS_VERTICES",33001:"MAX_ELEMENTS_INDICES",33071:"CLAMP_TO_EDGE",33082:"TEXTURE_MIN_LOD",33083:"TEXTURE_MAX_LOD",33084:"TEXTURE_BASE_LEVEL",33085:"TEXTURE_MAX_LEVEL",33170:"GENERATE_MIPMAP_HINT",33189:"DEPTH_COMPONENT16",33190:"DEPTH_COMPONENT24",33296:"FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING",33297:"FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE",33298:"FRAMEBUFFER_ATTACHMENT_RED_SIZE",33299:"FRAMEBUFFER_ATTACHMENT_GREEN_SIZE",33300:"FRAMEBUFFER_ATTACHMENT_BLUE_SIZE",33301:"FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE",33302:"FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE",33303:"FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE",33304:"FRAMEBUFFER_DEFAULT",33306:"DEPTH_STENCIL_ATTACHMENT",33319:"RG",33320:"RG_INTEGER",33321:"R8",33323:"RG8",33325:"R16F",33326:"R32F",33327:"RG16F",33328:"RG32F",33329:"R8I",33330:"R8UI",33331:"R16I",33332:"R16UI",33333:"R32I",33334:"R32UI",33335:"RG8I",33336:"RG8UI",33337:"RG16I",33338:"RG16UI",33339:"RG32I",33340:"RG32UI",33503:"TEXTURE_IMMUTABLE_LEVELS",33635:"UNSIGNED_SHORT_5_6_5",33640:"UNSIGNED_INT_2_10_10_10_REV",33648:"MIRRORED_REPEAT",33901:"ALIASED_POINT_SIZE_RANGE",33902:"ALIASED_LINE_WIDTH_RANGE",33984:"TEXTURE0",33985:"TEXTURE1",33986:"TEXTURE2",33987:"TEXTURE3",33988:"TEXTURE4",33989:"TEXTURE5",33990:"TEXTURE6",33991:"TEXTURE7",33992:"TEXTURE8",33993:"TEXTURE9",33994:"TEXTURE10",33995:"TEXTURE11",33996:"TEXTURE12",33997:"TEXTURE13",33998:"TEXTURE14",33999:"TEXTURE15",34e3:"TEXTURE16",34001:"TEXTURE17",34002:"TEXTURE18",34003:"TEXTURE19",34004:"TEXTURE20",34005:"TEXTURE21",34006:"TEXTURE22",34007:"TEXTURE23",34008:"TEXTURE24",34009:"TEXTURE25",34010:"TEXTURE26",34011:"TEXTURE27",34012:"TEXTURE28",34013:"TEXTURE29",34014:"TEXTURE30",34015:"TEXTURE31",34016:"ACTIVE_TEXTURE",34024:"MAX_RENDERBUFFER_SIZE",34041:"DEPTH_STENCIL",34042:"UNSIGNED_INT_24_8",34045:"MAX_TEXTURE_LOD_BIAS",34055:"INCR_WRAP",34056:"DECR_WRAP",34067:"TEXTURE_CUBE_MAP",34068:"TEXTURE_BINDING_CUBE_MAP",34069:"TEXTURE_CUBE_MAP_POSITIVE_X",34070:"TEXTURE_CUBE_MAP_NEGATIVE_X",34071:"TEXTURE_CUBE_MAP_POSITIVE_Y",34072:"TEXTURE_CUBE_MAP_NEGATIVE_Y",34073:"TEXTURE_CUBE_MAP_POSITIVE_Z",34074:"TEXTURE_CUBE_MAP_NEGATIVE_Z",34076:"MAX_CUBE_MAP_TEXTURE_SIZE",34229:"VERTEX_ARRAY_BINDING",34338:"VERTEX_ATTRIB_ARRAY_ENABLED",34339:"VERTEX_ATTRIB_ARRAY_SIZE",34340:"VERTEX_ATTRIB_ARRAY_STRIDE",34341:"VERTEX_ATTRIB_ARRAY_TYPE",34342:"CURRENT_VERTEX_ATTRIB",34373:"VERTEX_ATTRIB_ARRAY_POINTER",34467:"COMPRESSED_TEXTURE_FORMATS",34660:"BUFFER_SIZE",34661:"BUFFER_USAGE",34816:"STENCIL_BACK_FUNC",34817:"STENCIL_BACK_FAIL",34818:"STENCIL_BACK_PASS_DEPTH_FAIL",34819:"STENCIL_BACK_PASS_DEPTH_PASS",34836:"RGBA32F",34837:"RGB32F",34842:"RGBA16F",34843:"RGB16F",34852:"MAX_DRAW_BUFFERS",34853:"DRAW_BUFFER0",34854:"DRAW_BUFFER1",34855:"DRAW_BUFFER2",34856:"DRAW_BUFFER3",34857:"DRAW_BUFFER4",34858:"DRAW_BUFFER5",34859:"DRAW_BUFFER6",34860:"DRAW_BUFFER7",34861:"DRAW_BUFFER8",34862:"DRAW_BUFFER9",34863:"DRAW_BUFFER10",34864:"DRAW_BUFFER11",34865:"DRAW_BUFFER12",34866:"DRAW_BUFFER13",34867:"DRAW_BUFFER14",34868:"DRAW_BUFFER15",34877:"BLEND_EQUATION_ALPHA",34892:"TEXTURE_COMPARE_MODE",34893:"TEXTURE_COMPARE_FUNC",34894:"COMPARE_REF_TO_TEXTURE",34917:"CURRENT_QUERY",34918:"QUERY_RESULT",34919:"QUERY_RESULT_AVAILABLE",34921:"MAX_VERTEX_ATTRIBS",34922:"VERTEX_ATTRIB_ARRAY_NORMALIZED",34930:"MAX_TEXTURE_IMAGE_UNITS",34962:"ARRAY_BUFFER",34963:"ELEMENT_ARRAY_BUFFER",34964:"ARRAY_BUFFER_BINDING",34965:"ELEMENT_ARRAY_BUFFER_BINDING",34975:"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",35040:"STREAM_DRAW",35041:"STREAM_READ",35042:"STREAM_COPY",35044:"STATIC_DRAW",35045:"STATIC_READ",35046:"STATIC_COPY",35048:"DYNAMIC_DRAW",35049:"DYNAMIC_READ",35050:"DYNAMIC_COPY",35051:"PIXEL_PACK_BUFFER",35052:"PIXEL_UNPACK_BUFFER",35053:"PIXEL_PACK_BUFFER_BINDING",35055:"PIXEL_UNPACK_BUFFER_BINDING",35056:"DEPTH24_STENCIL8",35069:"VERTEX_ATTRIB_ARRAY_INTEGER",35070:"VERTEX_ATTRIB_ARRAY_DIVISOR",35071:"MAX_ARRAY_TEXTURE_LAYERS",35076:"MIN_PROGRAM_TEXEL_OFFSET",35077:"MAX_PROGRAM_TEXEL_OFFSET",35097:"SAMPLER_BINDING",35345:"UNIFORM_BUFFER",35368:"UNIFORM_BUFFER_BINDING",35369:"UNIFORM_BUFFER_START",35370:"UNIFORM_BUFFER_SIZE",35371:"MAX_VERTEX_UNIFORM_BLOCKS",35373:"MAX_FRAGMENT_UNIFORM_BLOCKS",35374:"MAX_COMBINED_UNIFORM_BLOCKS",35375:"MAX_UNIFORM_BUFFER_BINDINGS",35376:"MAX_UNIFORM_BLOCK_SIZE",35377:"MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS",35379:"MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS",35380:"UNIFORM_BUFFER_OFFSET_ALIGNMENT",35382:"ACTIVE_UNIFORM_BLOCKS",35383:"UNIFORM_TYPE",35384:"UNIFORM_SIZE",35386:"UNIFORM_BLOCK_INDEX",35387:"UNIFORM_OFFSET",35388:"UNIFORM_ARRAY_STRIDE",35389:"UNIFORM_MATRIX_STRIDE",35390:"UNIFORM_IS_ROW_MAJOR",35391:"UNIFORM_BLOCK_BINDING",35392:"UNIFORM_BLOCK_DATA_SIZE",35394:"UNIFORM_BLOCK_ACTIVE_UNIFORMS",35395:"UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES",35396:"UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER",35398:"UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER",35632:"FRAGMENT_SHADER",35633:"VERTEX_SHADER",35657:"MAX_FRAGMENT_UNIFORM_COMPONENTS",35658:"MAX_VERTEX_UNIFORM_COMPONENTS",35659:"MAX_VARYING_COMPONENTS",35660:"MAX_VERTEX_TEXTURE_IMAGE_UNITS",35661:"MAX_COMBINED_TEXTURE_IMAGE_UNITS",35663:"SHADER_TYPE",35664:"FLOAT_VEC2",35665:"FLOAT_VEC3",35666:"FLOAT_VEC4",35667:"INT_VEC2",35668:"INT_VEC3",35669:"INT_VEC4",35670:"BOOL",35671:"BOOL_VEC2",35672:"BOOL_VEC3",35673:"BOOL_VEC4",35674:"FLOAT_MAT2",35675:"FLOAT_MAT3",35676:"FLOAT_MAT4",35678:"SAMPLER_2D",35679:"SAMPLER_3D",35680:"SAMPLER_CUBE",35682:"SAMPLER_2D_SHADOW",35685:"FLOAT_MAT2x3",35686:"FLOAT_MAT2x4",35687:"FLOAT_MAT3x2",35688:"FLOAT_MAT3x4",35689:"FLOAT_MAT4x2",35690:"FLOAT_MAT4x3",35712:"DELETE_STATUS",35713:"COMPILE_STATUS",35714:"LINK_STATUS",35715:"VALIDATE_STATUS",35717:"ATTACHED_SHADERS",35718:"ACTIVE_UNIFORMS",35721:"ACTIVE_ATTRIBUTES",35723:"FRAGMENT_SHADER_DERIVATIVE_HINT",35724:"SHADING_LANGUAGE_VERSION",35725:"CURRENT_PROGRAM",35738:"IMPLEMENTATION_COLOR_READ_TYPE",35739:"IMPLEMENTATION_COLOR_READ_FORMAT",35863:"UNSIGNED_NORMALIZED",35866:"TEXTURE_2D_ARRAY",35869:"TEXTURE_BINDING_2D_ARRAY",35887:"ANY_SAMPLES_PASSED",35898:"R11F_G11F_B10F",35899:"UNSIGNED_INT_10F_11F_11F_REV",35901:"RGB9_E5",35902:"UNSIGNED_INT_5_9_9_9_REV",35904:"SRGB",35905:"SRGB8",35907:"SRGB8_ALPHA8",35967:"TRANSFORM_FEEDBACK_BUFFER_MODE",35968:"MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS",35971:"TRANSFORM_FEEDBACK_VARYINGS",35972:"TRANSFORM_FEEDBACK_BUFFER_START",35973:"TRANSFORM_FEEDBACK_BUFFER_SIZE",35976:"TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN",35977:"RASTERIZER_DISCARD",35978:"MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS",35979:"MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS",35980:"INTERLEAVED_ATTRIBS",35981:"SEPARATE_ATTRIBS",35982:"TRANSFORM_FEEDBACK_BUFFER",35983:"TRANSFORM_FEEDBACK_BUFFER_BINDING",36003:"STENCIL_BACK_REF",36004:"STENCIL_BACK_VALUE_MASK",36005:"STENCIL_BACK_WRITEMASK",36006:"FRAMEBUFFER_BINDING",36007:"RENDERBUFFER_BINDING",36008:"READ_FRAMEBUFFER",36009:"DRAW_FRAMEBUFFER",36010:"READ_FRAMEBUFFER_BINDING",36011:"RENDERBUFFER_SAMPLES",36012:"DEPTH_COMPONENT32F",36013:"DEPTH32F_STENCIL8",36048:"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",36049:"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",36050:"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",36051:"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",36052:"FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER",36053:"FRAMEBUFFER_COMPLETE",36054:"FRAMEBUFFER_INCOMPLETE_ATTACHMENT",36055:"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",36057:"FRAMEBUFFER_INCOMPLETE_DIMENSIONS",36061:"FRAMEBUFFER_UNSUPPORTED",36063:"MAX_COLOR_ATTACHMENTS",36064:"COLOR_ATTACHMENT0",36065:"COLOR_ATTACHMENT1",36066:"COLOR_ATTACHMENT2",36067:"COLOR_ATTACHMENT3",36068:"COLOR_ATTACHMENT4",36069:"COLOR_ATTACHMENT5",36070:"COLOR_ATTACHMENT6",36071:"COLOR_ATTACHMENT7",36072:"COLOR_ATTACHMENT8",36073:"COLOR_ATTACHMENT9",36074:"COLOR_ATTACHMENT10",36075:"COLOR_ATTACHMENT11",36076:"COLOR_ATTACHMENT12",36077:"COLOR_ATTACHMENT13",36078:"COLOR_ATTACHMENT14",36079:"COLOR_ATTACHMENT15",36096:"DEPTH_ATTACHMENT",36128:"STENCIL_ATTACHMENT",36160:"FRAMEBUFFER",36161:"RENDERBUFFER",36162:"RENDERBUFFER_WIDTH",36163:"RENDERBUFFER_HEIGHT",36164:"RENDERBUFFER_INTERNAL_FORMAT",36168:"STENCIL_INDEX8",36176:"RENDERBUFFER_RED_SIZE",36177:"RENDERBUFFER_GREEN_SIZE",36178:"RENDERBUFFER_BLUE_SIZE",36179:"RENDERBUFFER_ALPHA_SIZE",36180:"RENDERBUFFER_DEPTH_SIZE",36181:"RENDERBUFFER_STENCIL_SIZE",36182:"FRAMEBUFFER_INCOMPLETE_MULTISAMPLE",36183:"MAX_SAMPLES",36194:"RGB565",36202:"ANY_SAMPLES_PASSED_CONSERVATIVE",36203:"MAX_ELEMENT_INDEX",36208:"RGBA32UI",36209:"RGB32UI",36214:"RGBA16UI",36215:"RGB16UI",36220:"RGBA8UI",36221:"RGB8UI",36226:"RGBA32I",36227:"RGB32I",36232:"RGBA16I",36233:"RGB16I",36238:"RGBA8I",36239:"RGB8I",36244:"RED_INTEGER",36248:"RGB_INTEGER",36249:"RGBA_INTEGER",36255:"INT_2_10_10_10_REV",36269:"FLOAT_32_UNSIGNED_INT_24_8_REV",36289:"SAMPLER_2D_ARRAY",36292:"SAMPLER_2D_ARRAY_SHADOW",36293:"SAMPLER_CUBE_SHADOW",36294:"UNSIGNED_INT_VEC2",36295:"UNSIGNED_INT_VEC3",36296:"UNSIGNED_INT_VEC4",36298:"INT_SAMPLER_2D",36299:"INT_SAMPLER_3D",36300:"INT_SAMPLER_CUBE",36303:"INT_SAMPLER_2D_ARRAY",36306:"UNSIGNED_INT_SAMPLER_2D",36307:"UNSIGNED_INT_SAMPLER_3D",36308:"UNSIGNED_INT_SAMPLER_CUBE",36311:"UNSIGNED_INT_SAMPLER_2D_ARRAY",36336:"LOW_FLOAT",36337:"MEDIUM_FLOAT",36338:"HIGH_FLOAT",36339:"LOW_INT",36340:"MEDIUM_INT",36341:"HIGH_INT",36347:"MAX_VERTEX_UNIFORM_VECTORS",36348:"MAX_VARYING_VECTORS",36349:"MAX_FRAGMENT_UNIFORM_VECTORS",36386:"TRANSFORM_FEEDBACK",36387:"TRANSFORM_FEEDBACK_PAUSED",36388:"TRANSFORM_FEEDBACK_ACTIVE",36389:"TRANSFORM_FEEDBACK_BINDING",36662:"COPY_READ_BUFFER_BINDING",36663:"COPY_WRITE_BUFFER_BINDING",36756:"R8_SNORM",36757:"RG8_SNORM",36758:"RGB8_SNORM",36759:"RGBA8_SNORM",36764:"SIGNED_NORMALIZED",36975:"RGB10_A2UI",37137:"MAX_SERVER_WAIT_TIMEOUT",37138:"OBJECT_TYPE",37139:"SYNC_CONDITION",37140:"SYNC_STATUS",37141:"SYNC_FLAGS",37142:"SYNC_FENCE",37143:"SYNC_GPU_COMMANDS_COMPLETE",37144:"UNSIGNALED",37145:"SIGNALED",37146:"ALREADY_SIGNALED",37147:"TIMEOUT_EXPIRED",37148:"CONDITION_SATISFIED",37149:"WAIT_FAILED",37154:"MAX_VERTEX_OUTPUT_COMPONENTS",37157:"MAX_FRAGMENT_INPUT_COMPONENTS",37167:"TEXTURE_IMMUTABLE_FORMAT",37440:"UNPACK_FLIP_Y_WEBGL",37441:"UNPACK_PREMULTIPLY_ALPHA_WEBGL",37442:"CONTEXT_LOST_WEBGL",37443:"UNPACK_COLORSPACE_CONVERSION_WEBGL",37444:"BROWSER_DEFAULT_WEBGL",37447:"MAX_CLIENT_WAIT_TIMEOUT_WEBGL",4294967295:"INVALID_INDEX","-1":"TIMEOUT_IGNORED"};let T,E=31;const d=[0,0,0,1];function R(e,t){return Math.random()*(t-e)+e}function p(e){let t;switch(e){case"MAT2":t=4;break;case"MAT3":t=9;break;case"MAT4":t=16;break;case"VEC4":t=4;break;case"VEC3":t=3;break;case"VEC2":t=2;break;case"SCALAR":t=1}return t}function _(e){return"rotation"===e?4:"translation"===e||"scale"===e?3:void 0}function A(e,t){if(0===t.length)return[-1,-1,0];let r=-1;for(let n=t.length-1;n>=0;n--)if(e>=t[n].time){r=n;break}if(-1===r||r===t.length-1)return r<0&&(r=0),[r,r,0];{const s=t[r],o=t[r+1];return e=Math.max(s.time,Math.min(e,o.time)),[r,r+1,(n=s.time,i=o.time,(e-n)/(i-n))]}var n,i}const g=new Map;function x(e,t,r){const n=function(e){let t;switch(m[e]){case"BYTE":case"UNSIGNED_BYTE":t=1;break;case"SHORT":case"UNSIGNED_SHORT":t=2;break;case"UNSIGNED_INT":case"FLOAT":t=4}return t}(t.componentType),i=p(t.type),s=(r.byteOffset||0)+(t.byteOffset||0),o=r.byteStride,a=o*t.count/n,c=t.count*i;let l,h=a||c;switch(e.byteLength<h*n+s&&(h-=t.byteOffset),m[t.componentType]){case"BYTE":l=new Int8Array(e,s,h);break;case"UNSIGNED_BYTE":l=new Uint8Array(e,s,h);break;case"SHORT":l=new Int16Array(e,s,h);break;case"UNSIGNED_SHORT":l=new Uint16Array(e,s,h);break;case"UNSIGNED_INT":l=new Uint32Array(e,s,h);break;case"FLOAT":l=new Float32Array(e,s,h)}if(h!==c){const e=new l.constructor(c);let t=0;for(let r=0;r<e.length;r+=i){for(let n=0;n<i;n++)e[r+n]=l[t+n];t+=o/n}return e}return l}function F(e,t,r,n){let i;switch(m[t]){case"BYTE":i=new Int8Array(e,r,n);break;case"UNSIGNED_BYTE":i=new Uint8Array(e,r,n);break;case"SHORT":i=new Int16Array(e,r,n);break;case"UNSIGNED_SHORT":i=new Uint16Array(e,r,n);break;case"UNSIGNED_INT":i=new Uint32Array(e,r,n);break;case"FLOAT":i=new Float32Array(e,r,n)}return i}function v(e,t,r){const n=T.createShader(e);T.shaderSource(n,t),T.compileShader(n),T.attachShader(r,n);const i=T.getShaderInfoLog(n);if(i)throw new Error(i)}function U(e,t){const r=T.createProgram();if(v(T.VERTEX_SHADER,e,r),v(T.FRAGMENT_SHADER,t,r),T.linkProgram(r),T.validateProgram(r),!T.getProgramParameter(r,T.LINK_STATUS)){const e=T.getProgramInfoLog(r);throw new Error(`Could not compile WebGL program. ${e}`)}return r}function b(e=T.TEXTURE_2D,t=function(){return E--,E}()){const r=T.createTexture();return T.activeTexture(T[`TEXTURE${t}`]),T.bindTexture(e,r),r.index=t,r}function N(e,t){!function e(r){t(r),r.children&&r.children.forEach(e)}(e)}function I(e,t,r,n){const[s,a]=e,l=new i;l.setTranslate(new o([0,0,.05]));const h=new i(t);h.multiply(l);const u=h.multiplyVector4(new c([0,0,0,1]));u.elements[0]=(2*s/r-1)*u.elements[3],u.elements[1]=(-2*a/n+1)*u.elements[3];const f=h.invert().multiplyVector4(u);return[f.elements[0],f.elements[1]]}function S(e){const{aspect:t,zoom:r}=e;let n;if("perspective"===e.type&&e.perspective){const{yfov:r}=e.perspective;n=(new i).setPerspective(r,t,e.perspective.znear||1,e.perspective.zfar||2e6)}else"orthographic"===e.type&&e.orthographic&&(n=(new i).setOrtho(e.orthographic.xmag*r,e.orthographic.ymag*r,e.orthographic.znear,e.orthographic.zfar));return n}function M(e=0,t=0){return e+t}function O(e){let t;switch(!0){case e instanceof Uint8Array:t=e=>e/255;break;case e instanceof Int8Array:t=e=>Math.max(e/127,-1);break;case e instanceof Uint16Array:t=e=>e/65535;break;case e instanceof Int16Array:t=e=>Math.max(e/32767,-1)}if(t){const r=new Float32Array(e.length);for(let n=0;n<e.length;n++)r[n]=t(e[n]);return r}return e}g.set(Int8Array,"BYTE"),g.set(Uint8Array,"UNSIGNED_BYTE"),g.set(Int16Array,"SHORT"),g.set(Uint16Array,"UNSIGNED_SHORT"),g.set(Uint32Array,"UNSIGNED_INT"),g.set(Float32Array,"FLOAT");class C extends f{constructor(e,t){super(e,t),this.program=null,this.defines=null,this.mode=4,this.variants=[]}setDefines(e){this.defines=e}setBlend(e){this.material.blend=e}setMaterial(e){this.material=e}drawWebGPU(e,t,{needUpdateView:r,needUpdateProjection:n,camera:s,light:o}){if(this.reflow){const t=new i(this.matrixWorld);t.invert().transpose(),this.geometry.uniformBuffer.updateWebGPU(e,"model",this.matrixWorld.elements),this.geometry.uniformBuffer.updateWebGPU(e,"normalMatrix",t.elements)}if(r&&(this.geometry.uniformBuffer.updateWebGPU(e,"view",s.matrixWorldInvert.elements),this.geometry.uniformBuffer.updateWebGPU(e,"light",o.matrixWorldInvert.elements)),n&&this.geometry.uniformBuffer.updateWebGPU(e,"projection",s.projection.elements),this instanceof B&&this.bones.some((e=>e.reflow))){const t=this.getJointMatrix(),r=new Float32Array(16*t.length);let n=0;for(const e of t)r.set(e.elements,0+16*n),n++;e.device.queue.writeBuffer(this.skinBuffer,0*Float32Array.BYTES_PER_ELEMENT,r.buffer,r.byteOffset,r.byteLength)}t.setBindGroup(0,this.uniformBindGroup1),t.setVertexBuffer(0,this.geometry.verticesWebGPUBuffer),this.geometry.indicesBuffer?(t.setIndexBuffer(this.geometry.indicesWebGPUBuffer,"uint32"),t.drawIndexed(this.geometry.indicesBuffer.length)):t.draw(this.geometry.attributes.POSITION.length/3,1,0,0)}draw(e,{lights:t,camera:r,light:n,needUpdateView:s,needUpdateProjection:o,preDepthTexture:a,colorTexture:c,renderState:l,fakeDepth:h,isIBL:u,isDefaultLight:f}){const{isprepender:m,isprerefraction:T}=l;if(!this.material.transmissionFactor||!T){if(e.useProgram(this.program),e.bindVertexArray(this.geometry.VAO),e.bindBufferBase(e.UNIFORM_BUFFER,0,this.geometry.UBO),this.reflow){const t=new i(this.matrixWorld);t.invert().transpose(),this.geometry.uniformBuffer.update(e,"model",this.matrixWorld.elements),this.geometry.uniformBuffer.update(e,"normalMatrix",t.elements)}if(s&&(this.geometry.uniformBuffer.update(e,"view",r.matrixWorldInvert.elements),this.geometry.uniformBuffer.update(e,"light",n.matrixWorldInvert.elements)),o&&this.geometry.uniformBuffer.update(e,"projection",r.projection.elements),this.geometry.uniformBuffer.update(e,"isShadow",m?1:0),this instanceof B&&(e.bindBufferBase(e.UNIFORM_BUFFER,2,this.geometry.SKIN),this.bones.some((e=>e.reflow)))){const t=this.getJointMatrix(),r=new Float32Array(16*t.length);let n=0;for(const e of t)r.set(e.elements,0+16*n),n++;e.bufferSubData(e.UNIFORM_BUFFER,0,r)}if(this.material.UBO&&(e.bindBufferBase(e.UNIFORM_BUFFER,1,this.material.UBO),s)){const n=new Float32Array(3*t.length);t.forEach(((e,t)=>{n.set(e.getPosition(),3*t)})),this.material.materialUniformBuffer.update(e,"viewPos",r.getPosition()),e.bindBufferBase(e.UNIFORM_BUFFER,4,this.material.lightUBO2),this.material.lightPosBuffer.update(e,"lightPos",n)}this.material.lightUBO1&&(e.bindBufferBase(e.UNIFORM_BUFFER,3,this.material.lightUBO1),e.bindBufferBase(e.UNIFORM_BUFFER,4,this.material.lightUBO2),e.bindBufferBase(e.UNIFORM_BUFFER,5,this.material.lightUBO3),e.bindBufferBase(e.UNIFORM_BUFFER,6,this.material.lightUBO4)),this.material.matrices.length&&e.bindBufferBase(e.UNIFORM_BUFFER,8,this.material.lightUBO5),this.material.sphericalHarmonics&&e.bindBufferBase(e.UNIFORM_BUFFER,7,this.material.sphericalHarmonics),e.uniform1i(this.material.uniforms.depthTexture,a&&!m?a.index:h.index),e.uniform1i(this.material.uniforms.colorTexture,T?h.index:c.index),e.uniform1i(e.getUniformLocation(this.program,"isTone"),T?0:1),e.uniform1i(e.getUniformLocation(this.program,"isIBL"),u?1:0),e.uniform1i(e.getUniformLocation(this.program,"isDefaultLight"),f||t.some((e=>!e.isInitial))?1:0),this.material.baseColorTexture&&(e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,this.material.baseColorTexture),e.bindSampler(0,this.material.baseColorTexture.sampler)),this.material.metallicRoughnessTexture&&(e.activeTexture(e.TEXTURE1),e.bindTexture(e.TEXTURE_2D,this.material.metallicRoughnessTexture),e.bindSampler(1,this.material.metallicRoughnessTexture.sampler)),this.material.normalTexture&&(e.activeTexture(e.TEXTURE2),e.bindTexture(e.TEXTURE_2D,this.material.normalTexture),e.bindSampler(2,this.material.normalTexture.sampler)),this.material.occlusionTexture&&(e.activeTexture(e.TEXTURE3),e.bindTexture(e.TEXTURE_2D,this.material.occlusionTexture),e.bindSampler(3,this.material.occlusionTexture.sampler)),this.material.emissiveTexture&&(e.activeTexture(e.TEXTURE4),e.bindTexture(e.TEXTURE_2D,this.material.emissiveTexture),e.bindSampler(4,this.material.emissiveTexture.sampler)),this.material.clearcoatTexture&&(e.activeTexture(e.TEXTURE8),e.bindTexture(e.TEXTURE_2D,this.material.clearcoatTexture),e.bindSampler(8,this.material.clearcoatTexture.sampler)),this.material.clearcoatRoughnessTexture&&(e.activeTexture(e.TEXTURE9),e.bindTexture(e.TEXTURE_2D,this.material.clearcoatRoughnessTexture),e.bindSampler(9,this.material.clearcoatRoughnessTexture.sampler)),this.material.sheenColorTexture&&(e.activeTexture(e.TEXTURE11),e.bindTexture(e.TEXTURE_2D,this.material.sheenColorTexture),e.bindSampler(11,this.material.sheenColorTexture.sampler)),this.material.sheenRoughnessTexture&&(e.activeTexture(e.TEXTURE12),e.bindTexture(e.TEXTURE_2D,this.material.sheenRoughnessTexture),e.bindSampler(12,this.material.sheenRoughnessTexture.sampler)),this.material.iridescenceThicknessTexture&&(e.activeTexture(e.TEXTURE17),e.bindTexture(e.TEXTURE_2D,this.material.iridescenceThicknessTexture),e.bindSampler(17,this.material.iridescenceThicknessTexture.sampler)),this.material.clearcoatNormalTexture&&(e.activeTexture(e.TEXTURE10),e.bindTexture(e.TEXTURE_2D,this.material.clearcoatNormalTexture),e.bindSampler(10,this.material.clearcoatNormalTexture.sampler)),this.material.transmissionTexture&&(e.activeTexture(e.TEXTURE14),e.bindTexture(e.TEXTURE_2D,this.material.transmissionTexture),e.bindSampler(14,this.material.transmissionTexture.sampler)),this.material.specularTexture&&(e.activeTexture(e.TEXTURE15),e.bindTexture(e.TEXTURE_2D,this.material.specularTexture),e.bindSampler(15,this.material.specularTexture.sampler)),this.material.specularColorTexture&&(e.activeTexture(e.TEXTURE19),e.bindTexture(e.TEXTURE_2D,this.material.specularColorTexture),e.bindSampler(19,this.material.specularColorTexture.sampler)),this.material.thicknessTexture&&(e.activeTexture(e.TEXTURE16),e.bindTexture(e.TEXTURE_2D,this.material.thicknessTexture),e.bindSampler(16,this.material.thicknessTexture.sampler)),this.material.doubleSided&&e.disable(e.CULL_FACE),this.geometry.indicesBuffer?e.drawElements(this.mode,this.geometry.indicesBuffer.length,e[g.get(this.geometry.indicesBuffer.constructor)],0):e.drawArrays(this.mode,0,this.geometry.attributes.POSITION.length/3),this.material.doubleSided&&e.enable(e.CULL_FACE)}}setGeometry(e){this.geometry=e}setProgram(e){this.program=e}setMode(e=4){this.mode=e}setVariants(e){this.variants=e}isVisible(e){const t=new o(this.geometry.boundingSphere.center.elements).applyMatrix4(this.matrixWorld),r=this.geometry.boundingSphere.radius*this.matrixWorld.getMaxScaleOnAxis();let n,i=!0;for(const s of e)if(n=s.elements[0]*t.elements[0]+s.elements[1]*t.elements[1]+s.elements[2]*t.elements[2]+s.elements[3],n<-r){i=!1;break}return this.distance=n+r,i}calculateBounding(){this.geometry.calculateBounding(this.matrixWorld)}}class B extends C{constructor(e,t){super(e,t)}setSkinWebGPU(e,t){this.bones=t.bones,this.boneInverses=t.boneInverses;const r=this.getJointMatrix(),n=new Float32Array(16*r.length);let i=0;for(const e of r)n.set(e.elements,0+16*i),i++;const s=n.byteLength,o=256+s,{device:a}=e,c=a.createBuffer({size:o,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});this.skinBuffer=c;const l={binding:22,resource:{buffer:c,offset:0,size:s}};return a.queue.writeBuffer(c,0,n.buffer,n.byteOffset,n.byteLength),l}setSkin(e,t){this.bones=t.bones,this.boneInverses=t.boneInverses;const r=this.getJointMatrix(),n=new Float32Array(16*r.length);let i=0;for(const e of r)n.set(e.elements,0+16*i),i++;const s=e.getUniformBlockIndex(this.program,"Skin");e.uniformBlockBinding(this.program,s,2);const o=e.createBuffer();return e.bindBuffer(e.UNIFORM_BUFFER,o),e.bufferData(e.UNIFORM_BUFFER,n,e.DYNAMIC_DRAW),this.geometry.SKIN=o,e.bindBuffer(e.UNIFORM_BUFFER,null),this}getJointMatrix(){const e=new i(this.matrixWorld).invert(),t=[];for(let r=0;r<this.boneInverses.length;r++){const n=(new i).multiply(e).multiply(this.bones[r].matrixWorld).multiply(this.boneInverses[r]);t.push(n)}return t}}class L extends f{}class P extends f{constructor(e,t,r){super(t,r),this.matrixWorldInvert=new i,this.projection=new i,this.props=e,this.yaw=0,this.pitch=-Math.PI,this.rotation=new i}setProjection(e){this.projection.set(e.elements)}setMatrixWorld(e){super.setMatrixWorld(e),this.matrixWorldInvert.setInverseOf(this.matrixWorld),this.matrixInitial||(this.matrixInitial=new i(this.matrixWorld))}setZ(e){this.matrix.elements[14]=e,this.matrixInitial=new i(this.matrix),this.setMatrixWorld(this.matrix.elements)}getViewProjMatrix(){const e=new i;return e.multiply(this.projection),e.multiply(this.matrixWorldInvert),e}pan(e,t,r,n){const s=I(e,this.projection,r,n),a=I(t,this.projection,r,n),c=new o([...s,0]),l=new o([...a,0]);if("orthographic"===this.props.type){const e=2*this.matrixWorld.elements[14],t=c.subtract(l).scale(e);this.matrixInitial.translate(t.elements[0],t.elements[1],0)}else{const e=10*this.matrixWorld.elements[14],t=l.subtract(c).scale(e);this.matrixInitial.translate(t.elements[0],t.elements[1],0)}const h=new i(this.rotation);h.multiply(this.matrixInitial),this.setMatrixWorld(h.elements)}rotate(e,t){var r,n,s;this.yaw+=.01*(e[0]-t[0]),this.pitch+=.01*(e[1]-t[1]),this.pitch=(r=this.pitch,n=-1.5*Math.PI,s=-.5*Math.PI,r<n?n:r>s?s:r);const a=new i;a.rotate(new o([1,0,0]),this.pitch),a.rotate(new o([0,1,0]),-this.yaw),a.rotate(new o([1,0,0]),Math.PI),this.rotation=a;const c=new i(a);c.multiply(this.matrixInitial),this.setMatrixWorld(c.elements)}zoom(e){if(this.matrixInitial.elements[14]>5*this.modelSize&&e>0)return;this.matrixInitial.elements[14]+=e*this.modelSize*.001;const t=new i(this.rotation);t.multiply(this.matrixInitial),this.setMatrixWorld(t.elements),this.updateNF()}updateNF(){if(this.props.isInitial){const e=Math.min(...this.matrixWorld.getScaling().elements),t=this.modelSize/e,r=Math.abs(this.matrixWorldInvert.elements[14]),n=this.props.perspective||this.props.orthographic;n.znear=Math.max(r-t,.05*t),n.zfar=r+t}this.setProjection(S(this.props))}}class D extends f{constructor(e,t,r){super(t,r);const{type:n,color:s,intensity:a,isInitial:c,spot:l={}}=e;this.type=n,this.color=new o(s),this.intensity=a,this.isInitial=c,this.spot=l,this.matrixWorldInvert=new i}setMatrixWorld(e){super.setMatrixWorld(e),this.matrixWorldInvert.setInverseOf(this.matrixWorld)}setZ(e){this.matrix.elements[13]=e,this.matrix.elements[14]=e,this.setMatrixWorld(this.matrix.elements)}update(e){if(this.isInitial||"directional"===this.type){const t=new i;t.makeRotationAxis(new o([0,1,0]),e),t.multiply(this.matrix),this.setMatrixWorld(t.elements)}}}class y{constructor(){this.map=new Map,this.tempStore={},this.offset=0}getBuffer(e){const{length:t}=e;return 3===t?new Float32Array([e[0],e[1],e[2],0]):9===t?new Float32Array([e[0],e[1],e[2],0,e[3],e[4],e[5],0,e[6],e[7],e[8],0]):12===t?new Float32Array([e[0],e[1],e[2],0,e[3],e[4],e[5],0,e[6],e[7],e[8],0,e[9],e[10],e[11],0]):6===t?new Float32Array([e[0],e[1],e[2],0,e[3],e[4],e[5],0]):e}add(e,t){void 0===t.length&&(t=[t]),this.map.set(e,this.offset);const r=this.getBuffer(t);this.tempStore[e]=r,this.offset+=Math.max(r.length,4)}update(e,t,r){void 0===r.length&&(r=new Float32Array([r]));const n=this.map.get(t),i=this.getBuffer(r);this.store.set(i,n),e.bufferSubData(e.UNIFORM_BUFFER,n*Float32Array.BYTES_PER_ELEMENT,i)}updateWebGPU(e,t,r){const{device:n}=e;void 0===r.length&&(r=new Float32Array([r]));const i=this.map.get(t),s=this.getBuffer(r);this.store.set(s,i),n.queue.writeBuffer(this.bufferWebGPU,i*Float32Array.BYTES_PER_ELEMENT,s.buffer,s.byteOffset,s.byteLength)}done(){this.store=new Float32Array(this.offset);for(const[e,t]of this.map)this.store.set(this.tempStore[e],t);this.tempStore=null}}const w={baseColorFactor:[1,0,0,1]},G={directional:0,point:1,spot:2};class V extends class{}{constructor(e=w,t,r,n){super();const i=Object.assign({},e);if(this.defines=r,this.name=i.name,this.matrices=[],!i.pbrMetallicRoughness&&i.extensions&&i.extensions.KHR_materials_pbrSpecularGlossiness){i.pbrMetallicRoughness={};const e=i.extensions.KHR_materials_pbrSpecularGlossiness;i.pbrMetallicRoughness.baseColorTexture=e.diffuseTexture,i.pbrMetallicRoughness.metallicRoughnessTexture=e.specularGlossinessTexture,i.pbrMetallicRoughness.baseColorFactor=e.diffuseFactor,i.pbrMetallicRoughness.specularFactor=e.specularFactor,i.pbrMetallicRoughness.glossinessFactor=e.glossinessFactor,r.push({name:"SPECULARGLOSSINESSMAP"})}if(i.extensions&&i.extensions.KHR_materials_clearcoat){const e=i.extensions.KHR_materials_clearcoat;if(this.clearcoatFactor=e.clearcoatFactor,this.clearcoatRoughnessFactor=e.clearcoatRoughnessFactor,r.push({name:"CLEARCOAT"}),e.clearcoatTexture){const{extensions:n,texCoord:i}=e.clearcoatTexture;if(this.clearcoatTexture=t[e.clearcoatTexture.index],r.push({name:"CLEARCOATMAP",value:i?2:1}),n){const e=n.KHR_texture_transform;e&&this.buildTrans(e,r,"CLEARCOATMAP")}}if(e.clearcoatNormalTexture){const{extensions:n,texCoord:i}=e.clearcoatNormalTexture;if(this.clearcoatNormalTexture=t[e.clearcoatNormalTexture.index],r.push({name:"CLEARCOATNORMALMAP",value:i?2:1}),n){const e=n.KHR_texture_transform;e&&this.buildTrans(e,r,"CLEARCOATNORMALMAP")}}if(e.clearcoatRoughnessTexture){const{extensions:n,texCoord:i}=e.clearcoatRoughnessTexture;if(this.clearcoatRoughnessTexture=t[e.clearcoatRoughnessTexture.index],r.push({name:"CLEARCOATROUGHMAP",value:i?2:1}),n){const e=n.KHR_texture_transform;e&&this.buildTrans(e,r,"CLEARCOATROUGHMAP")}}}if(i.extensions&&i.extensions.KHR_materials_sheen){const{sheenColorTexture:e,sheenColorFactor:n,sheenRoughnessFactor:s,sheenRoughnessTexture:o}=i.extensions.KHR_materials_sheen;if(this.sheenColorFactor=n,this.sheenRoughnessFactor=s,e){const{extensions:n,texCoord:i}=e;if(this.sheenColorTexture=t[e.index],r.push({name:"SHEENMAP",value:i?2:1}),n){const e=n.KHR_texture_transform;e&&this.buildTrans(e,r,"SHEENMAP")}}if(o){const{extensions:e,texCoord:n}=o;if(this.sheenRoughnessTexture=t[o.index],r.push({name:"SHEENROUGHNESSMAP",value:n?2:1}),e){const t=e.KHR_texture_transform;t&&this.buildTrans(t,r,"SHEENROUGHNESSMAP")}}r.push({name:"SHEEN"})}if(i.extensions&&i.extensions.KHR_materials_transmission){const{transmissionFactor:e,transmissionTexture:n}=i.extensions.KHR_materials_transmission;this.transmissionFactor=e,n&&(this.transmissionTexture=t[n.index],r.push({name:"TRANSMISSIONMAP"})),r.push({name:"TRANSMISSION"})}if(i.extensions&&i.extensions.KHR_materials_volume){const{attenuationColor:e,attenuationDistance:n,thicknessFactor:s,thicknessTexture:o}=i.extensions.KHR_materials_volume;this.attenuationColor=e,this.attenuationDistance=n,this.thicknessFactor=s,this.ior=1.5,o&&(this.thicknessTexture=t[o.index],r.push({name:"THICKNESSMAP"})),r.push({name:"VOLUME"})}if(i.extensions&&i.extensions.KHR_materials_emissive_strength){const{emissiveStrength:e}=i.extensions.KHR_materials_emissive_strength;this.emissiveStrength=e}if(i.extensions&&i.extensions.KHR_materials_anisotropy){const{anisotropy:e}=i.extensions.KHR_materials_anisotropy;this.anisotropy=e}if(i.extensions&&i.extensions.KHR_materials_iridescence){const{iridescenceTexture:e,iridescenceThicknessTexture:n,iridescenceFactor:s,iridescenceIOR:o,iridescenceThicknessMaximum:a,iridescenceThicknessMinimum:c}=i.extensions.KHR_materials_iridescence;this.iridescenceFactor=s,this.iridescenceIOR=o,this.iridescenceThicknessMaximum=a,this.iridescenceThicknessMinimum=c,e&&(this.iridescenceTexture=t[e.index]),n&&(this.iridescenceThicknessTexture=t[n.index],r.push({name:"IRIDESCENCEMAP",value:n.texCoord?2:1})),r.push({name:"IRIDESCENCE"})}if(i.extensions&&i.extensions.KHR_materials_ior&&(this.ior=i.extensions.KHR_materials_ior.ior,r.push({name:"IOR"})),i.extensions&&i.extensions.KHR_materials_specular){const{specularFactor:e,specularTexture:n,specularColorFactor:s,specularColorTexture:o}=i.extensions.KHR_materials_specular;this.specularFactor=e,this.specularColorFactor=s,n&&(this.specularTexture=t[n.index],r.push({name:"SPECULARMAP"})),o&&(this.specularColorTexture=t[o.index],r.push({name:"SPECULARCOLORMAP"})),r.push({name:"SPECULAR"})}this.uniforms={baseColorTexture:null,metallicRoughnessTexture:null,normalTexture:null,occlusionTexture:null,clearcoatTexture:null,clearcoatRoughnessTexture:null,sheenRoughnessTexture:null,iridescenceThicknessTexture:null,sheenColorTexture:null,clearcoatNormalTexture:null,emissiveTexture:null,prefilterMap:null,charlieMap:null,brdfLUT:null,irradianceMap:null,transmissionTexture:null,specularTexture:null,specularColorTexture:null,thicknessTexture:null,colorTexture:null,Sheen_E:null,depthTexture:null};const{pbrMetallicRoughness:s}=i;if(s&&(this.baseColorFactor=s.baseColorFactor,this.roughnessFactor=s.roughnessFactor,this.metallicFactor=s.metallicFactor,s.specularFactor&&(this.specularFactor=s.specularFactor),s.glossinessFactor&&(this.glossinessFactor=s.glossinessFactor)),this.alpha="BLEND"===i.alphaMode,this.doubleSided=i.doubleSided,this.emissiveFactor=i.emissiveFactor,this.extras=i.extras,s&&s.metallicRoughnessTexture){const{extensions:e,texCoord:n}=s.metallicRoughnessTexture;if(this.metallicRoughnessTexture=t[s.metallicRoughnessTexture.index],r.push({name:"METALROUGHNESSMAP",value:n?2:1}),e){const t=e.KHR_texture_transform;t&&this.buildTrans(t,r,"METALROUGHNESSMAP")}}if(i.normalTexture){const{extensions:e,texCoord:n,scale:s}=i.normalTexture;if(this.normalTexture=t[i.normalTexture.index],this.normalTextureScale=s,r.push({name:"NORMALMAP",value:n?2:1}),e){const t=e.KHR_texture_transform;t&&(this.normalTextureScale=void 0,this.buildTrans(t,r,"NORMALMAP"))}}if(i.occlusionTexture){const{extensions:e,texCoord:n}=i.occlusionTexture;if(this.occlusionTexture=t[i.occlusionTexture.index],r.push({name:"OCCLUSIONMAP",value:n?2:1}),e){const t=e.KHR_texture_transform;t&&this.buildTrans(t,r,"OCCLUSIONMAP")}}if(s&&s.baseColorTexture){const{extensions:e,texCoord:n}=s.baseColorTexture;if(this.baseColorTexture=t[s.baseColorTexture.index],r.push({name:"BASECOLORTEXTURE",value:n?2:1}),e){const t=e.KHR_texture_transform;t&&this.buildTrans(t,r,"BASECOLORTEXTURE")}}if(i.emissiveTexture){const{extensions:e,texCoord:n}=i.emissiveTexture;if(this.emissiveTexture=t[i.emissiveTexture.index],r.push({name:"EMISSIVEMAP",value:n?2:1}),e){const t=e.KHR_texture_transform;t&&this.buildTrans(t,r,"EMISSIVEMAP")}}"MASK"===i.alphaMode?r.push({name:"ALPHATEST",value:i.alphaCutoff??.5}):"BLEND"===i.alphaMode&&r.push({name:"ALPHATEST",value:.01}),this.doubleSided&&r.push({name:"DOUBLESIDED"}),r.push({name:"LIGHTNUMBER",value:n.length}),i.extensions&&i.extensions.KHR_materials_unlit&&r.push({name:"NOLIGHT"}),this.matrices.length&&r.push({name:"MATRICES",value:this.matrices.length})}buildTrans(e,t,r=""){if(e.offset||e.scale||e.rotation){const n=e.offset||[0,0],s=e.scale||[1,1],o=e.rotation||0;t.push({name:`${r}_TEXTURE_TRANSFORM`,value:this.matrices.push((new i).set([...n,0,0,...s,0,0,o,0,0,0,0,0,0,0]))-1})}}setHarmonics(e){this.sphericalHarmonics=e}updateUniformsWebgl(e,t){e.useProgram(t),this.baseColorTexture&&(this.uniforms.baseColorTexture=e.getUniformLocation(t,"baseColorTexture"),e.uniform1i(this.uniforms.baseColorTexture,0)),this.metallicRoughnessTexture&&(this.uniforms.metallicRoughnessTexture=e.getUniformLocation(t,"metallicRoughnessTexture"),e.uniform1i(this.uniforms.metallicRoughnessTexture,1)),this.normalTexture&&(this.uniforms.normalTexture=e.getUniformLocation(t,"normalTexture"),e.uniform1i(this.uniforms.normalTexture,2)),this.occlusionTexture&&(this.uniforms.occlusionTexture=e.getUniformLocation(t,"occlusionTexture"),e.uniform1i(this.uniforms.occlusionTexture,3)),this.emissiveTexture&&(this.uniforms.emissiveTexture=e.getUniformLocation(t,"emissiveTexture"),e.uniform1i(this.uniforms.emissiveTexture,4)),this.clearcoatTexture&&(this.uniforms.clearcoatTexture=e.getUniformLocation(t,"clearcoatTexture"),e.uniform1i(this.uniforms.clearcoatTexture,8)),this.clearcoatRoughnessTexture&&(this.uniforms.clearcoatRoughnessTexture=e.getUniformLocation(t,"clearcoatRoughnessTexture"),e.uniform1i(this.uniforms.clearcoatRoughnessTexture,9)),this.clearcoatNormalTexture&&(this.uniforms.clearcoatNormalTexture=e.getUniformLocation(t,"clearcoatNormalTexture"),e.uniform1i(this.uniforms.clearcoatNormalTexture,10)),this.sheenRoughnessTexture&&(this.uniforms.sheenRoughnessTexture=e.getUniformLocation(t,"sheenRoughnessTexture"),e.uniform1i(this.uniforms.sheenRoughnessTexture,12)),this.iridescenceThicknessTexture&&(this.uniforms.iridescenceThicknessTexture=e.getUniformLocation(t,"iridescenceThicknessTexture"),e.uniform1i(this.uniforms.iridescenceThicknessTexture,17)),this.sheenColorTexture&&(this.uniforms.sheenColorTexture=e.getUniformLocation(t,"sheenColorTexture"),e.uniform1i(this.uniforms.sheenColorTexture,11)),this.transmissionTexture&&(this.uniforms.transmissionTexture=e.getUniformLocation(t,"transmissionTexture"),e.uniform1i(this.uniforms.transmissionTexture,14)),this.specularTexture&&(this.uniforms.specularTexture=e.getUniformLocation(t,"specularTexture"),e.uniform1i(this.uniforms.specularTexture,15)),this.specularColorTexture&&(this.uniforms.specularColorTexture=e.getUniformLocation(t,"specularColorTexture"),e.uniform1i(this.uniforms.specularColorTexture,19)),this.thicknessTexture&&(this.uniforms.thicknessTexture=e.getUniformLocation(t,"thicknessTexture"),e.uniform1i(this.uniforms.thicknessTexture,16)),this.uniforms.prefilterMap=e.getUniformLocation(t,"prefilterMap"),this.uniforms.charlieMap=e.getUniformLocation(t,"charlieMap"),this.uniforms.brdfLUT=e.getUniformLocation(t,"brdfLUT"),this.uniforms.irradianceMap=e.getUniformLocation(t,"irradianceMap"),this.uniforms.depthTexture=e.getUniformLocation(t,"depthTexture"),this.uniforms.colorTexture=e.getUniformLocation(t,"colorTexture"),this.uniforms.Sheen_E=e.getUniformLocation(t,"Sheen_E"),e.uniform1i(this.uniforms.prefilterMap,6),e.uniform1i(this.uniforms.charlieMap,18),e.uniform1i(this.uniforms.brdfLUT,7),e.uniform1i(this.uniforms.irradianceMap,5),e.uniform1i(this.uniforms.Sheen_E,13);{const r=e.getUniformBlockIndex(t,"Material");e.uniformBlockBinding(t,r,1);const n=e.createBuffer();e.bindBuffer(e.UNIFORM_BUFFER,n),e.bufferData(e.UNIFORM_BUFFER,this.materialUniformBuffer.store,e.STATIC_DRAW),this.UBO=n}{const r=e.getUniformBlockIndex(t,"LightColor");e.uniformBlockBinding(t,r,3);const n=e.createBuffer();e.bindBuffer(e.UNIFORM_BUFFER,n),e.bufferData(e.UNIFORM_BUFFER,this.lightColorBuffer.store,e.STATIC_DRAW),this.lightUBO1=n}{const r=e.getUniformBlockIndex(t,"LightPos");e.uniformBlockBinding(t,r,4);const n=e.createBuffer();e.bindBuffer(e.UNIFORM_BUFFER,n),e.bufferData(e.UNIFORM_BUFFER,this.lightPosBuffer.store,e.STATIC_DRAW),this.lightUBO2=n}{const r=e.getUniformBlockIndex(t,"Spotdir");e.uniformBlockBinding(t,r,5);const n=e.createBuffer();e.bindBuffer(e.UNIFORM_BUFFER,n),e.bufferData(e.UNIFORM_BUFFER,this.spotdirBuffer.store,e.STATIC_DRAW),this.lightUBO3=n}{const r=e.getUniformBlockIndex(t,"LightIntensity");e.uniformBlockBinding(t,r,6);const n=e.createBuffer();e.bindBuffer(e.UNIFORM_BUFFER,n),e.bufferData(e.UNIFORM_BUFFER,this.lightIntensityBuffer.store,e.STATIC_DRAW),this.lightUBO4=n}if(this.matrices.length){const r=e.getUniformBlockIndex(t,"TextureMatrices");e.uniformBlockBinding(t,r,8);const n=e.createBuffer();e.bindBuffer(e.UNIFORM_BUFFER,n),e.bufferData(e.UNIFORM_BUFFER,this.textureMatricesBuffer.store,e.STATIC_DRAW),this.lightUBO5=n}}createUniforms(e,t){const r=new Float32Array(3*t.length),n=new Float32Array(3*t.length),i=new Float32Array(3*t.length),s=new Float32Array(4*t.length),a=new Float32Array(16*this.matrices.length);t.forEach(((e,t)=>{r.set(new o([e.matrixWorld.elements[8],e.matrixWorld.elements[9],e.matrixWorld.elements[10]]).normalize().elements,3*t),n.set(e.getPosition(),3*t),i.set(e.color.elements,3*t),s.set([e.intensity,e.spot.innerConeAngle??0,e.spot.outerConeAngle??0,G[e.type]],4*t)})),this.matrices.forEach(((e,t)=>{a.set(e.elements,16*t)}));{const t=new y;t.add("baseColorFactor",this.baseColorFactor??[.8,.8,.8,1]),t.add("viewPos",e.getPosition()),t.add("specularFactor",this.specularFactor??1),t.add("specularColorFactor",this.specularColorFactor??[1,1,1]),t.add("emissiveFactor",this.emissiveFactor??[0,0,0]),t.add("glossinessFactor",this.glossinessFactor??.5),t.add("metallicFactor",this.metallicFactor??1),t.add("roughnessFactor",this.roughnessFactor??1),t.add("clearcoatFactor",this.clearcoatFactor??0),t.add("clearcoatRoughnessFactor",this.clearcoatRoughnessFactor??0),t.add("sheenColorFactor",this.sheenColorFactor??0),t.add("sheenRoughnessFactor",this.sheenRoughnessFactor??0),t.add("transmissionFactor",this.transmissionFactor??0),t.add("ior",this.ior??1),t.add("normalTextureScale",this.normalTextureScale??1),t.add("attenuationColor",this.attenuationColor??[1,1,1]),t.add("attenuationDistance",this.attenuationDistance??1),t.add("thicknessFactor",this.thicknessFactor??1),t.add("emissiveStrength",this.emissiveStrength??1),t.add("anisotropy",this.anisotropy??1),t.add("iridescence",[this.iridescenceFactor,this.iridescenceIOR,this.iridescenceThicknessMaximum,this.iridescenceThicknessMinimum]??0),t.done(),this.materialUniformBuffer=t}{const e=new y;e.add("lightColor",i),e.done(),this.lightColorBuffer=e}{const e=new y;e.add("lightPos",n),e.done(),this.lightPosBuffer=e}{const e=new y;e.add("spotdir",r),e.done(),this.spotdirBuffer=e}{const e=new y;e.add("lightIntensity",s),e.done(),this.lightIntensityBuffer=e}if(this.matrices.length){const e=new y;e.add("textureMatrices",a),e.done(),this.textureMatricesBuffer=e}}updateUniformsWebGPU(e){const{device:t}=e,r=t.createBuffer({size:256+this.materialUniformBuffer.store.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),n=t.createBuffer({size:256+this.lightColorBuffer.store.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),i=t.createBuffer({size:256+this.lightPosBuffer.store.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),s=t.createBuffer({size:256+this.spotdirBuffer.store.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),o=t.createBuffer({size:256+this.lightIntensityBuffer.store.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),a=this.baseColorTexture?this.baseColorTexture.sampler:t.createSampler({magFilter:"linear",minFilter:"linear",addressModeU:"repeat",addressModeV:"repeat",addressModeW:"repeat"}),c=[{binding:1,resource:{buffer:r,offset:0,size:this.materialUniformBuffer.store.byteLength}},{binding:2,resource:a},{binding:24,resource:t.createSampler()},{binding:3,resource:this.baseColorTexture?.createView()},{binding:4,resource:this.metallicRoughnessTexture?.createView()},{binding:5,resource:this.normalTexture?.createView()},{binding:6,resource:this.emissiveTexture?.createView()},{binding:7,resource:this.occlusionTexture?.createView()},{binding:8,resource:this.clearcoatTexture?.createView()},{binding:9,resource:this.clearcoatRoughnessTexture?.createView()},{binding:10,resource:this.transmissionTexture?.createView()},{binding:11,resource:this.sheenColorTexture?.createView()},{binding:12,resource:this.sheenRoughnessTexture?.createView()},{binding:13,resource:this.clearcoatNormalTexture?.createView()},{binding:14,resource:this.specularTexture?.createView()},{binding:15,resource:{buffer:n,offset:0,size:this.lightColorBuffer.store.byteLength}},{binding:16,resource:{buffer:i,offset:0,size:this.lightPosBuffer.store.byteLength}},{binding:17,resource:{buffer:s,offset:0,size:this.spotdirBuffer.store.byteLength}},{binding:18,resource:{buffer:o,offset:0,size:this.lightIntensityBuffer.store.byteLength}}];t.queue.writeBuffer(r,0,this.materialUniformBuffer.store.buffer,this.materialUniformBuffer.store.byteOffset,this.materialUniformBuffer.store.byteLength),t.queue.writeBuffer(n,0,this.lightColorBuffer.store.buffer,this.lightColorBuffer.store.byteOffset,this.lightColorBuffer.store.byteLength),t.queue.writeBuffer(i,0,this.lightPosBuffer.store.buffer,this.lightPosBuffer.store.byteOffset,this.lightPosBuffer.store.byteLength),t.queue.writeBuffer(s,0,this.spotdirBuffer.store.buffer,this.spotdirBuffer.store.byteOffset,this.spotdirBuffer.store.byteLength),t.queue.writeBuffer(o,0,this.lightIntensityBuffer.store.buffer,this.lightIntensityBuffer.store.byteOffset,this.lightIntensityBuffer.store.byteLength),this.uniformBindGroup1=c.filter((e=>e.resource))}hasNormal(){return Boolean(this.normalTexture)||Boolean(this.clearcoatNormalTexture)}}class X{constructor(){this.counterEl=document.createElement("div"),this.counterEl.setAttribute("style","position: absolute; top: 0; right: 0; color: #fff; font-size: 30px; background: #000;"),document.body.appendChild(this.counterEl),this.fps=0,this.elapsedTime=0,this.lastTime=0}tick(e){this.fps++,this.elapsedTime+=e-this.lastTime,this.lastTime=e,this.elapsedTime>=1e3&&(this.counterEl.innerHTML=String(this.fps),this.fps=0,this.elapsedTime-=1e3)}}class H{setCanvas(e){this.canvas=e}setCamera(e){this.camera=e}setLight(e){this.light=e}get width(){return this.canvas.offsetWidth*devicePixelRatio}get height(){return this.canvas.offsetHeight*devicePixelRatio}}const k=new Float32Array([-1,1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,1,1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,-1,1,1,1,1,1,1,1,1,1,-1,1,-1,-1,-1,-1,1,-1,1,1,1,1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,-1,1,1,-1,1,1,1,1,1,1,-1,1,1,-1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,1,-1,-1,-1,-1,1,1,-1,1]),z=new Float32Array([-1,1,-1,-1,1,1,1,-1]);let W,j;new Float32Array([-1,1,-1,-1,1,-1,1,-1,1,1,-1,1]);class Y extends H{constructor(){super(),this.scale=2}setGL(e){W=e}preProcessing(e){W.clear(W.COLOR_BUFFER_BIT|W.DEPTH_BUFFER_BIT),e.renderScene({isprepender:!0}),W.bindFramebuffer(W.FRAMEBUFFER,this.framebuffer),W.framebufferTexture2D(W.FRAMEBUFFER,W.COLOR_ATTACHMENT0,W.TEXTURE_2D,this.texture,0),W.useProgram(this.program),W.viewport(0,0,this.width/this.scale,this.height/this.scale),W.bindVertexArray(this.quadVAO);const t=S(Object.assign({},this.camera.props,{zoom:1}));W.uniformMatrix4fv(W.getUniformLocation(this.program,"Iproj"),!1,(new i).setInverseOf(t).elements),W.uniformMatrix4fv(W.getUniformLocation(this.program,"proj"),!1,t.elements),W.uniformMatrix4fv(W.getUniformLocation(this.program,"Iview"),!1,this.camera.matrixWorld.elements),W.uniformMatrix4fv(W.getUniformLocation(this.program,"view"),!1,this.camera.matrixWorldInvert.elements),W.uniformMatrix4fv(W.getUniformLocation(this.program,"light"),!1,this.light.matrixWorldInvert.elements),W.uniform1i(W.getUniformLocation(this.program,"lightTexture"),e.preDepthTexture.index),W.uniform1i(W.getUniformLocation(this.program,"cameraTexture"),e.depthTexture.index),W.uniform3fv(W.getUniformLocation(this.program,"viewPos"),this.camera.getPosition()),W.uniform3fv(W.getUniformLocation(this.program,"lightPos"),this.light.getPosition()),W.drawArrays(W.TRIANGLE_STRIP,0,4),W.bindFramebuffer(W.FRAMEBUFFER,null),W.viewport(0,0,this.width,this.height)}buildScreenBuffer(e){this.framebuffer=W.createFramebuffer(),W.bindFramebuffer(W.FRAMEBUFFER,this.framebuffer),this.texture=e.createOneChannelTexture(this.scale),W.framebufferTexture2D(W.FRAMEBUFFER,W.COLOR_ATTACHMENT0,W.TEXTURE_2D,this.texture,0),this.program=U("#version 300 es\r\nprecision highp float;\r\n\r\nlayout (location = 0) in vec2 pos;\r\n\r\nout vec2 uv;\r\nout vec4 vPosLight1;\r\nout vec4 vPosLight2;\r\nout vec3 outPositionView;\r\nout vec3 outPositionLight;\r\n\r\nuniform mat4 proj;\r\nuniform mat4 light;\r\nuniform mat4 Iproj;\r\nuniform mat4 Iview;\r\nuniform mat4 view;\r\n\r\nvoid main() {\r\n    vec4 p1 = Iview * Iproj * vec4(pos, -1.0/16.0, 1.0);\r\n    vec4 p2 = Iview * Iproj * vec4(pos, 1.0/16.0, 1.0);\r\n\r\n\tvPosLight1 = proj * light * p1;\r\n    vPosLight2 = proj * light * p2;\r\n    outPositionLight = vec3(light * p1);\r\n    outPositionView = vec3(view * p1);\r\n\r\n\tuv = pos * 0.5 + 0.5;\r\n\tgl_Position = vec4(pos, 0.0, 1.0);\r\n}\r\n","#version 300 es\r\nprecision highp float;\r\n\r\nin vec2 uv;\r\n// in vec4 tPos1;\r\n// in vec4 tPos2;\r\nin vec4 vPosLight1;\r\nin vec4 vPosLight2;\r\nout float color;\r\n\r\nuniform sampler2D lightTexture;\r\nuniform sampler2D cameraTexture;\r\n\r\nuniform mat4 proj;\r\nuniform mat4 light;\r\nuniform mat4 view;\r\nuniform vec3 viewPos;\r\nuniform vec3 lightPos;\r\n\r\nin vec3 outPositionView;\r\nin vec3 outPositionLight;\r\n\r\nconst int samples = 80;\r\n\r\nvoid main() {\r\n    float stp = 1.0/float(samples);\r\n\tfloat k = 0.0;\r\n    float d = 0.0;\r\n\r\n    for (int i = 0; i < samples; i++) {\r\n\r\n        //vec4 vPos = mix(tPos1,tPos2,k);\r\n        vec4 vPosLight = mix(vPosLight1,vPosLight2,k);\r\n        k += stp;\r\n\r\n        vec3 ShadowTexC = (vPosLight.xyz/vPosLight.w) * 0.5 + 0.5;\r\n\r\n        float add = step(texture(lightTexture, ShadowTexC.xy).x, ShadowTexC.z);\r\n        d += add*stp;\r\n\t}\r\n\r\n    vec3 viewDir = normalize(viewPos - outPositionView);\r\n    vec3 L = normalize(lightPos - outPositionLight);\r\n    color = min((1.0 - d), (1.0 - dot(L, viewDir)) * 0.2);\r\n}\r\n"),this.quadVAO=W.createVertexArray(),W.bindVertexArray(this.quadVAO);const t=W.createBuffer();return W.bindBuffer(W.ARRAY_BUFFER,t),W.bufferData(W.ARRAY_BUFFER,new Float32Array(z),W.STATIC_DRAW),W.enableVertexAttribArray(0),W.vertexAttribPointer(0,2,W.FLOAT,!1,0,0),W.bindVertexArray(null),W.bindFramebuffer(W.FRAMEBUFFER,null),{name:"LIGHT"}}attachUniform(e){W.uniform1i(W.getUniformLocation(e,"light"),this.texture.index)}postProcessing(){}}class K{constructor(e){this.reflow=!0,this.fps=new X,this.getState=e,this.currentTrack=0}setEnv(e){this.env=e}setCamera(e){this.camera=e}setParticles(e){this.Particles=e}setScene(e){this.scene=e}setPp(e){this.PP=e}setGl(e){j=e}setParser(e){this.parse=e}step(e,t){const r=A(e,t.keys);if(-1===r[0]||-1===r[1]||0===r[0]&&0===r[1])return!1;const n=t.keys[r[0]],i=_(t.type);let a;a=3===i?o:4===i?c:s;const l=new a(n.value);if("rotation"===t.type)for(const e of t.meshes){const t=e.matrix.getScaling();e.matrix.makeRotationFromQuaternion(l.elements),e.matrix.scale(t)}else if("scale"===t.type)for(const e of t.meshes){if(e.matrix.animated){const t=e.matrix.getScaling();e.matrix.restoreScale(t)}e.matrix.scale(l),e.matrix.animated=!0}else if("translation"===t.type)for(const e of t.meshes)e.matrix.setTranslate(l)}spline(e,t){const r=A(e,t.keys);if(-1===r[0]||-1===r[1]||0===r[0]&&0===r[1])return!1;const n=e,i=t.keys[r[1]].time,s=t.keys[r[0]].time,a=_(t.type),l=i-s,h=(n-s)/l,u=h*h,f=u*h,m=-2*f+3*u,T=f-u,E=1-m,d=T-u+h,R=new Float32Array(a);for(let e=0;e!==a;e++){const n=t.keys[r[0]].value[a+e],i=t.keys[r[0]].value[2*a+e]*l,s=t.keys[r[1]].value[a+e],o=t.keys[r[1]].value[e]*l;if(R[e]=E*n+d*i+m*s+T*o,isNaN(R[e]))return!1}if("rotation"===t.type){const e=new c(R).normalize();for(const r of t.meshes){const t=r.matrix.getScaling();r.matrix.makeRotationFromQuaternion(e.elements),r.matrix.scale(t)}}else if("scale"===t.type){const e=new o(R);for(const r of t.meshes){if(r.matrix.animated){const e=r.matrix.getScaling();r.matrix.restoreScale(e)}r.matrix.scale(e),r.matrix.animated=!0}}else if("translation"===t.type){const e=new o(R);for(const r of t.meshes)r.matrix.setTranslate(e)}}updateGeometry(e,t){e.geometry.update(j,t)}interpolation(e,t){const r=A(e,t.keys);if(-1===r[0]||-1===r[1]||0===r[0]&&0===r[1])return!1;const n=t.keys[r[0]],i=t.keys[r[1]],a=r[2],l=_(t.type);let h;h=3===l?o:4===l?c:s;const u=new h(n.value),f=new h(i.value);if("rotation"===t.type){const e=new c;e.lerp(u.elements,f.elements,a);for(const r of t.meshes){const t=r.matrix.getScaling();r.matrix.makeRotationFromQuaternion(e.elements),r.matrix.scale(t)}}else if("scale"===t.type){const e=new o;e.lerp(u.elements,f.elements,a);for(const r of t.meshes){if(r.matrix.animated){const e=r.matrix.getScaling();r.matrix.restoreScale(e)}r.matrix.scale(e),r.matrix.animated=!0}}else if("weights"===t.type){const e=new s(u.elements);e.lerp(u.elements,f.elements,a);for(const r of t.meshes){const t={};for(const n in r.geometry.targets[0])if("POSITION"===n){t[n]=r.geometry.attributes[n].slice();for(let i=0;i<e.elements.length;i++){if(0===e.elements[i])continue;const s=0;for(let o=0;o<t[n].length;o++)t[n][o]+=e.elements[i]*r.geometry.targets[i][n][o-s]}}this.updateGeometry(r,t)}}else if("translation"===t.type){const e=new o;e.lerp(u.elements,f.elements,a);for(const r of t.meshes)r.matrix.setTranslate(e)}else console.error("ERROR")}animate(e){if(!this.parse.tracks.length)return;this.parse.tracks[this.currentTrack];const t=Math.max(...this.parse.tracks.map((e=>e[0].duration)));e-=Math.floor(e/t)*t;for(const t of this.parse.tracks.sort(((e,t)=>e[0].duration-t[0].duration)))for(const r of t){let t;switch(r.interpolation){case"LINEAR":t=this.interpolation(e,r);break;case"CUBICSPLINE":t=this.spline(e,r);break;case"STEP":t=this.step(e,r);break;default:t=this.interpolation(e,r)}if(!1!==t){for(const e of r.meshes)N(e,(e=>{e.updateMatrix(),e instanceof L&&(e.reflow=!0),e instanceof C&&(e.reflow=!0),e instanceof P&&e===this.camera&&(this.needUpdateView=!0)}));this.reflow=!0}}}render(e=0){const t=e/1e3;this.animate(t),this.reflow&&(this.PP.postprocessors.length>0&&(this.PP.bindPrePass(),this.PP.preProcessing()),j.clear(j.COLOR_BUFFER_BIT|j.DEPTH_BUFFER_BIT),this.parse.json.extensions&&this.parse.json.extensions.EXT_lights_image_based&&this.env.draw(),this.renderScene(),this.clean(),this.PP.postprocessors.some((e=>e instanceof Y))&&(j.bindFramebuffer(j.DRAW_FRAMEBUFFER,null),this.Particles.draw(e),this.reflow=!0)),this.fps.tick(e),requestAnimationFrame(this.render.bind(this))}renderScene(){if(this.needUpdateView){const e=h(this.camera.getViewProjMatrix());this.scene.meshes.forEach((t=>{t.visible=t.isVisible(e)}))}this.scene.opaqueChildren.forEach((e=>{e.visible&&e.draw(j,this.getState())})),this.scene.transparentChildren.length&&(j.enable(j.BLEND),j.blendFunc(j.SRC_ALPHA,j.ONE_MINUS_SRC_ALPHA),this.scene.transparentChildren.forEach((e=>{e.visible&&e.draw(j,this.getState())})),j.disable(j.BLEND),j.blendFunc(j.ONE,j.ZERO))}clean(){N(this.scene,(e=>{e.reflow=!1})),this.needUpdateView=!1,this.needUpdateProjection=!1,this.reflow=!1}}class q{constructor(e,t){this.redraw=t,document.addEventListener("wheel",this,{passive:!1}),e.addEventListener("mousedown",this),e.addEventListener("mousemove",this),e.addEventListener("mouseup",this),document.addEventListener("keyup",this),document.addEventListener("keydown",this),addEventListener("resize",this)}handleEvent(e){switch(e.type){case"wheel":this.zoom(e);break;case"mousedown":this.onStart(e);break;case"mousemove":this.onMove(e);break;case"mouseup":this.onEnd();break;case"keyup":this.onKeyUp();break;case"keydown":this.onKeyDown(e);break;case"resize":this.onResize()}}onResize(){this.redraw("resize")}onKeyDown(e){(e.shiftKey||e.ctrlKey)&&(this.isPan=!0)}onKeyUp(){this.isPan=!1}onStart(e){this.x=e.clientX,this.y=e.clientY,this.isDrag=!0}onMove(e){this.isDrag&&(this.isPan?this.redraw("pan",[this.x,this.y],[e.clientX,e.clientY]):this.redraw("rotate",[this.x,this.y],[e.clientX,e.clientY]),this.x=e.clientX,this.y=e.clientY)}onEnd(){this.isDrag=!1}zoom(e){e.preventDefault(),this.redraw("zoom",e.deltaY)}}var Z=r(870),$=r.n(Z);const J="#version 300 es\r\nprecision highp float;\r\n\r\nlayout (location = 0) in vec3 inPosition;\r\n\r\nuniform mat4 projection;\r\nuniform mat4 view;\r\n\r\nout vec3 outUV;\r\n\r\nvoid main() {\r\n\toutUV = inPosition;\r\n    mat4 rotView = mat4(mat3(view));\r\n    gl_Position = projection * rotView * vec4(inPosition, 1.0);\r\n}\r\n",Q="#version 300 es\r\nlayout (location = 0) in vec2 pos;\r\n\r\nout vec2 uv;\r\n\r\nvoid main() {\r\n    uv = pos * 0.5 + 0.5;\r\n    gl_Position = vec4(pos, 0.0, 1.0); \r\n}\r\n",ee=[Math.sqrt(1/(4*Math.PI)),-Math.sqrt(3/(4*Math.PI)),Math.sqrt(3/(4*Math.PI)),-Math.sqrt(3/(4*Math.PI)),Math.sqrt(15/(4*Math.PI)),-Math.sqrt(15/(4*Math.PI)),Math.sqrt(5/(16*Math.PI)),-Math.sqrt(15/(4*Math.PI)),Math.sqrt(15/(16*Math.PI))];class te{constructor(){this.preScaled=!1,this.l00=new o,this.l1_1=new o,this.l10=new o,this.l11=new o,this.l2_2=new o,this.l2_1=new o,this.l20=new o,this.l21=new o,this.l22=new o}scaleInPlace(e){this.l00.scale(e),this.l1_1.scale(e),this.l10.scale(e),this.l11.scale(e),this.l2_2.scale(e),this.l2_1.scale(e),this.l20.scale(e),this.l21.scale(e),this.l22.scale(e)}convertIrradianceToLambertianRadiance(){this.scaleInPlace(1/Math.PI)}preScaleForRendering(){this.preScaled=!0,this.l00.scale(ee[0]),this.l1_1.scale(ee[1]),this.l10.scale(ee[2]),this.l11.scale(ee[3]),this.l2_2.scale(ee[4]),this.l2_1.scale(ee[5]),this.l20.scale(ee[6]),this.l21.scale(ee[7]),this.l22.scale(ee[8])}static FromArray(e){const t=new te;return o.FromArrayToRef(e[0],0,t.l00),o.FromArrayToRef(e[1],0,t.l1_1),o.FromArrayToRef(e[2],0,t.l10),o.FromArrayToRef(e[3],0,t.l11),o.FromArrayToRef(e[4],0,t.l2_2),o.FromArrayToRef(e[5],0,t.l2_1),o.FromArrayToRef(e[6],0,t.l20),o.FromArrayToRef(e[7],0,t.l21),o.FromArrayToRef(e[8],0,t.l22),t}}class re{constructor(){this.x=new o,this.y=new o,this.z=new o,this.xx=new o,this.yy=new o,this.zz=new o,this.xy=new o,this.yz=new o,this.zx=new o}get preScaledHarmonics(){return this._harmonics.preScaled||this._harmonics.preScaleForRendering(),this._harmonics}scale(e){this.x.scale(e),this.y.scale(e),this.z.scale(e),this.xx.scale(e),this.yy.scale(e),this.zz.scale(e),this.yz.scale(e),this.zx.scale(e),this.xy.scale(e)}static FromHarmonics(e){const t=new re;return t._harmonics=e,t.x=e.l11.scale2(1.02333).scale2(-1),t.y=e.l1_1.scale2(1.02333).scale2(-1),t.z=e.l10.scale2(1.02333),t.xx=e.l00.scale2(.886277).subtract2(e.l20.scale2(.247708)).add2(e.l22.scale2(.429043)),t.yy=e.l00.scale2(.886277).subtract2(e.l20.scale2(.247708)).subtract2(e.l22.scale2(.429043)),t.zz=e.l00.scale2(.886277).add2(e.l20.scale2(.495417)),t.yz=e.l2_1.scale2(.858086).scale2(-1),t.zx=e.l21.scale2(.858086).scale2(-1),t.xy=e.l2_2.scale2(.858086),t.scale(1/Math.PI),t}}var ne=r(358);let ie;class se{constructor(e){this.url=e,this.envMatrix=new i}setCamera(e){this.camera=e}setGl(e){ie=e}setCanvas(e){this.canvas=e}get width(){return this.canvas.offsetWidth*devicePixelRatio}get height(){return this.canvas.offsetHeight*devicePixelRatio}drawQuad(){const e=new i,t=Object.assign({},this.camera.props,{perspective:{yfov:.3,znear:.01,zfar:1e4}});e.multiply(S(t)),ie.enable(ie.CULL_FACE);const r=ie.createProgram();v(ie.VERTEX_SHADER,"#version 300 es\n        precision highp float;\n        \n        layout (location = 0) in vec2 inPosition;\n        \n        out vec2 outUV;\n\n        uniform mat4 projection;\n        uniform mat4 view;\n        \n        void main() {\n            outUV = inPosition;\n            gl_Position = projection * view * vec4(inPosition, 0.0, 1.0);\n        }\n        ",r),v(ie.FRAGMENT_SHADER,"#version 300 es\n        precision highp float;\n        \n        in vec2 outUV;\n        layout (location = 0) out vec4 color;\n\n        uniform sampler2D environmentMap;\n        \n        void main() {\n            vec3 c = texture(environmentMap, outUV).rgb;\n            \n            color = vec4(c, 1.0);\n        }\n        ",r),ie.linkProgram(r),ie.useProgram(r),ie.bindVertexArray(this.quadVAO),ie.uniformMatrix4fv(ie.getUniformLocation(r,"projection"),!1,e.elements),ie.uniform1i(ie.getUniformLocation(r,"environmentMap"),this.brdfLUTTexture.index),ie.uniformMatrix4fv(ie.getUniformLocation(r,"view"),!1,this.camera.matrixWorldInvert.elements),ie.drawArrays(ie.TRIANGLE_STRIP,0,4)}draw(){const e=new i,t=Object.assign({},this.camera.props,{perspective:{yfov:.3,znear:.01,zfar:1e4}});e.multiply(S(t)),ie.enable(ie.CULL_FACE);const r=ie.createProgram();v(ie.VERTEX_SHADER,"#version 300 es\n        precision highp float;\n        \n        layout (location = 0) in vec3 inPosition;\n        \n        out vec3 outUV;\n\n        uniform mat4 projection;\n        uniform mat4 view;\n        uniform mat4 model;\n        \n        void main() {\n            outUV = inPosition;\n            gl_Position = projection * view * model * vec4(inPosition, 1.0);\n        }\n        ",r),v(ie.FRAGMENT_SHADER,"#version 300 es\n        precision highp float;\n        \n        in vec3 outUV;\n        layout (location = 0) out vec4 color;\n        uniform mat4 rotation;\n\n        uniform samplerCube environmentMap;\n        \n        void main() {\n            vec4 c = textureLod(environmentMap, mat3(rotation) * outUV, 0.0);\n            \n            color = vec4(pow(c.rgb, vec3(2.2)) / pow(c.a, 2.2), 1.0);\n        }\n        ",r),ie.disable(ie.DEPTH_TEST),ie.linkProgram(r),ie.useProgram(r),ie.bindVertexArray(this.VAO),ie.uniformMatrix4fv(ie.getUniformLocation(r,"rotation"),!1,this.uniformBuffer.store.subarray(36)),ie.uniformMatrix4fv(ie.getUniformLocation(r,"projection"),!1,e.elements);const n=2*this.camera.modelSize;ie.uniformMatrix4fv(ie.getUniformLocation(r,"model"),!1,(new i).makeRotationAxis(new o([1,0,0]),Math.PI).scale(new o([n,n,n])).elements),ie.uniform1i(ie.getUniformLocation(r,"environmentMap"),this.prefilterMap.index),ie.uniformMatrix4fv(ie.getUniformLocation(r,"view"),!1,this.camera.matrixWorldInvert.elements),ie.drawArrays(ie.TRIANGLES,0,36),ie.enable(ie.DEPTH_TEST)}createEnvironment(){ie.enable(ie.CULL_FACE);const e=new i,t=Object.assign({},this.camera.props,{aspect:1,perspective:{yfov:Math.PI/2,znear:.01,zfar:1e4}});if(e.multiply(S(t)),!this.envData){ie.bindFramebuffer(ie.FRAMEBUFFER,this.framebuffer),ie.useProgram(this.cubeprogram),ie.bindVertexArray(this.VAO),ie.viewport(0,0,this.framebuffer.size,this.framebuffer.size),ie.uniformMatrix4fv(ie.getUniformLocation(this.cubeprogram,"projection"),!1,e.elements),ie.uniform1i(ie.getUniformLocation(this.cubeprogram,"diffuse"),this.original2DTexture.index);const t=10;for(let e=0;e<t;++e){const t=this.framebuffer.size*Math.pow(.5,e),r=this.framebuffer.size*Math.pow(.5,e);ie.viewport(0,0,t,r);for(let t=0;t<6;t++)ie.framebufferTexture2D(ie.FRAMEBUFFER,ie.COLOR_ATTACHMENT0,ie.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.originalCubeTexture,e),ie.uniformMatrix4fv(ie.getUniformLocation(this.cubeprogram,"view"),!1,this.views[t].elements),ie.clear(ie.COLOR_BUFFER_BIT|ie.DEPTH_BUFFER_BIT),ie.drawArrays(ie.TRIANGLES,0,36)}ie.bindVertexArray(null),ie.bindFramebuffer(ie.FRAMEBUFFER,null)}if(!this.envData){ie.bindFramebuffer(ie.FRAMEBUFFER,this.irradiancebuffer),ie.useProgram(this.irradianceprogram),ie.bindVertexArray(this.VAO),ie.viewport(0,0,this.irradiancebuffer.size,this.irradiancebuffer.size),ie.uniformMatrix4fv(ie.getUniformLocation(this.irradianceprogram,"projection"),!1,e.elements),ie.uniform1i(ie.getUniformLocation(this.irradianceprogram,"environmentMap"),this.originalCubeTexture.index);for(let e=0;e<6;e++)ie.framebufferTexture2D(ie.FRAMEBUFFER,ie.COLOR_ATTACHMENT0,ie.TEXTURE_CUBE_MAP_POSITIVE_X+e,this.irradiancemap,0),ie.uniformMatrix4fv(ie.getUniformLocation(this.irradianceprogram,"view"),!1,this.views2[e].elements),ie.clear(ie.COLOR_BUFFER_BIT|ie.DEPTH_BUFFER_BIT),ie.drawArrays(ie.TRIANGLES,0,36);ie.bindVertexArray(null),ie.bindFramebuffer(ie.FRAMEBUFFER,null)}if(!this.envData){ie.bindFramebuffer(ie.FRAMEBUFFER,this.prefilterbuffer),ie.useProgram(this.mipmapcubeprogram),ie.bindVertexArray(this.VAO),ie.uniformMatrix4fv(ie.getUniformLocation(this.mipmapcubeprogram,"projection"),!1,e.elements),ie.uniform1i(ie.getUniformLocation(this.mipmapcubeprogram,"environmentMap"),this.originalCubeTexture.index);const t=5;for(let e=0;e<t;++e){const r=this.prefilterbuffer.size*Math.pow(.5,e),n=this.prefilterbuffer.size*Math.pow(.5,e);ie.viewport(0,0,r,n);const i=e/(t-1);ie.uniform1f(ie.getUniformLocation(this.mipmapcubeprogram,"roughness"),i);for(let t=0;t<6;t++)ie.framebufferTexture2D(ie.FRAMEBUFFER,ie.COLOR_ATTACHMENT0,ie.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.prefilterMap,e),ie.framebufferTexture2D(ie.FRAMEBUFFER,ie.COLOR_ATTACHMENT1,ie.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.charlieMap,e),ie.uniformMatrix4fv(ie.getUniformLocation(this.mipmapcubeprogram,"view"),!1,this.views2[t].elements),ie.clear(ie.COLOR_BUFFER_BIT|ie.DEPTH_BUFFER_BIT),ie.drawArrays(ie.TRIANGLES,0,36)}ie.bindVertexArray(null),ie.bindFramebuffer(ie.FRAMEBUFFER,null)}ie.bindFramebuffer(ie.FRAMEBUFFER,this.brdfbuffer),ie.useProgram(this.bdrfprogram),ie.bindVertexArray(this.quadVAO),ie.viewport(0,0,this.brdfbuffer.size,this.brdfbuffer.size),ie.framebufferTexture2D(ie.FRAMEBUFFER,ie.COLOR_ATTACHMENT0,ie.TEXTURE_2D,this.brdfLUTTexture,0),ie.clear(ie.COLOR_BUFFER_BIT|ie.DEPTH_BUFFER_BIT),ie.drawArrays(ie.TRIANGLE_STRIP,0,4),ie.bindVertexArray(null),ie.bindFramebuffer(ie.FRAMEBUFFER,null),ie.disable(ie.CULL_FACE),ie.viewport(0,0,this.width,this.height)}updateUniform(e,t){if(this.uniformBuffer){const r=e.getUniformBlockIndex(t,"SphericalHarmonics");e.uniformBlockBinding(t,r,7);const n=e.createBuffer();return e.bindBuffer(e.UNIFORM_BUFFER,n),e.bufferData(e.UNIFORM_BUFFER,this.uniformBuffer.store,e.STATIC_DRAW),n}}async createEnvironmentBuffer(e){if(this.envData=e,e){const t=new i;t.makeRotationFromQuaternion(new c(e.rotation).elements);const r=te.FromArray(e.irradianceCoefficients);r.scaleInPlace(e.intensity),r.convertIrradianceToLambertianRadiance();const n=re.FromHarmonics(r),{preScaledHarmonics:s}=n,o=new y;o.add("vSphericalL00",s.l00.elements),o.add("vSphericalL1_1",s.l1_1.elements),o.add("vSphericalL10",s.l10.elements),o.add("vSphericalL11",s.l11.elements),o.add("vSphericalL2_2",s.l2_2.elements),o.add("vSphericalL2_1",s.l2_1.elements),o.add("vSphericalL20",s.l20.elements),o.add("vSphericalL21",s.l21.elements),o.add("vSphericalL22",s.l22.elements),o.add("rotationMatrix",t.elements),o.done(),this.uniformBuffer=o}{const e=ie.createSampler();ie.samplerParameteri(e,ie.TEXTURE_MIN_FILTER,ie.LINEAR),ie.samplerParameteri(e,ie.TEXTURE_MAG_FILTER,ie.LINEAR),ie.samplerParameteri(e,ie.TEXTURE_WRAP_S,ie.CLAMP_TO_EDGE),ie.samplerParameteri(e,ie.TEXTURE_WRAP_T,ie.CLAMP_TO_EDGE),this.sampler=e}{const e=ie.createSampler();ie.samplerParameteri(e,ie.TEXTURE_MIN_FILTER,ie.LINEAR_MIPMAP_LINEAR),ie.samplerParameteri(e,ie.TEXTURE_MAG_FILTER,ie.LINEAR),ie.samplerParameteri(e,ie.TEXTURE_WRAP_S,ie.CLAMP_TO_EDGE),ie.samplerParameteri(e,ie.TEXTURE_WRAP_T,ie.CLAMP_TO_EDGE),ie.samplerParameteri(e,ie.TEXTURE_WRAP_R,ie.CLAMP_TO_EDGE),this.samplerCube=e}{const e=32,t=ie.createFramebuffer();this.irradiancebuffer=t,this.irradiancebuffer.size=e,ie.bindFramebuffer(ie.FRAMEBUFFER,t);const r=b(ie.TEXTURE_CUBE_MAP,5);for(let t=0;t<6;t++)ie.texImage2D(ie.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,ie.RGBA16F,e,e,0,ie.RGBA,ie.FLOAT,null),ie.framebufferTexture2D(ie.FRAMEBUFFER,ie.COLOR_ATTACHMENT0,ie.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,0);ie.texParameteri(ie.TEXTURE_CUBE_MAP,ie.TEXTURE_MIN_FILTER,ie.LINEAR),ie.texParameteri(ie.TEXTURE_CUBE_MAP,ie.TEXTURE_MAG_FILTER,ie.LINEAR),ie.texParameteri(ie.TEXTURE_CUBE_MAP,ie.TEXTURE_WRAP_S,ie.CLAMP_TO_EDGE),ie.texParameteri(ie.TEXTURE_CUBE_MAP,ie.TEXTURE_WRAP_T,ie.CLAMP_TO_EDGE),ie.texParameteri(ie.TEXTURE_CUBE_MAP,ie.TEXTURE_WRAP_R,ie.CLAMP_TO_EDGE),this.irradiancemap=r}{const e=512,t=ie.createFramebuffer();this.framebuffer=t,this.framebuffer.size=e,ie.bindFramebuffer(ie.FRAMEBUFFER,t);const r=b(ie.TEXTURE_CUBE_MAP);for(let t=0;t<6;t++)ie.texImage2D(ie.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,ie.RGBA16F,e,e,0,ie.RGBA,ie.FLOAT,null),ie.framebufferTexture2D(ie.FRAMEBUFFER,ie.COLOR_ATTACHMENT0,ie.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,0);ie.bindSampler(r.index,this.samplerCube),ie.generateMipmap(ie.TEXTURE_CUBE_MAP),this.originalCubeTexture=r}{const e=128,t=ie.createFramebuffer();this.prefilterbuffer=t,this.prefilterbuffer.size=e,ie.bindFramebuffer(ie.FRAMEBUFFER,t);const r=b(ie.TEXTURE_CUBE_MAP,6);if(this.envData){const e=[ie.TEXTURE_CUBE_MAP_POSITIVE_X,ie.TEXTURE_CUBE_MAP_NEGATIVE_X,ie.TEXTURE_CUBE_MAP_NEGATIVE_Y,ie.TEXTURE_CUBE_MAP_POSITIVE_Y,ie.TEXTURE_CUBE_MAP_POSITIVE_Z,ie.TEXTURE_CUBE_MAP_NEGATIVE_Z];for(let t=0;t<this.envData.specularImages.length;t++){const r=this.envData.specularImageSize*Math.pow(.5,t);for(let n=0;n<6;n++)ie.texImage2D(e[n],t,ie.RGBA,r,r,0,ie.RGBA,ie.UNSIGNED_BYTE,this.envData.specularImages[t][n])}ie.bindSampler(r.index,this.samplerCube),ie.generateMipmap(ie.TEXTURE_CUBE_MAP)}else{ie.pixelStorei(ie.UNPACK_FLIP_Y_WEBGL,!0);for(let t=0;t<6;t++)ie.texImage2D(ie.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,ie.RGBA16F,e,e,0,ie.RGBA,ie.FLOAT,null),ie.framebufferTexture2D(ie.FRAMEBUFFER,ie.COLOR_ATTACHMENT0,ie.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,t);ie.bindSampler(r.index,this.samplerCube),ie.generateMipmap(ie.TEXTURE_CUBE_MAP);const t=b(ie.TEXTURE_CUBE_MAP,18);ie.pixelStorei(ie.UNPACK_FLIP_Y_WEBGL,!0);for(let r=0;r<6;r++)ie.texImage2D(ie.TEXTURE_CUBE_MAP_POSITIVE_X+r,0,ie.RGBA16F,e,e,0,ie.RGBA,ie.FLOAT,null),ie.framebufferTexture2D(ie.FRAMEBUFFER,ie.COLOR_ATTACHMENT1,ie.TEXTURE_CUBE_MAP_POSITIVE_X+r,t,r);ie.bindSampler(t.index,this.samplerCube),ie.generateMipmap(ie.TEXTURE_CUBE_MAP),this.charlieMap=t,ie.drawBuffers([ie.COLOR_ATTACHMENT0,ie.COLOR_ATTACHMENT1])}this.prefilterMap=r}{const e=512,t=ie.createFramebuffer();this.brdfbuffer=t,this.brdfbuffer.size=e,ie.bindFramebuffer(ie.FRAMEBUFFER,t);const r=b(ie.TEXTURE_2D,7);ie.texImage2D(ie.TEXTURE_2D,0,ie.RGBA16F,e,e,0,ie.RGBA,ie.FLOAT,null),ie.bindSampler(r.index,this.sampler),this.brdfLUTTexture=r,this.quadVAO=ie.createVertexArray(),ie.bindVertexArray(this.quadVAO);const n=ie.createBuffer();ie.bindBuffer(ie.ARRAY_BUFFER,n),ie.bufferData(ie.ARRAY_BUFFER,new Float32Array(z),ie.STATIC_DRAW),ie.enableVertexAttribArray(0),ie.vertexAttribPointer(0,2,ie.FLOAT,!1,0,0),ie.bindVertexArray(null)}const t=[[new o([0,1,0]),Math.PI/2],[new o([0,1,0]),-Math.PI/2],[new o([1,0,0]),0],[new o([1,0,0]),Math.PI],[new o([1,0,0]),-Math.PI/2],[new o([1,0,0]),Math.PI/2]];this.views=t.map(((e,t)=>{const r=new i;if(r.makeRotationAxis(e[0],e[1]),5===t){const e=new i;e.makeRotationAxis(new o([0,0,1]),Math.PI),r.multiply(e)}if(0===t){const e=new i;e.makeRotationAxis(new o([0,0,1]),Math.PI/2),r.multiply(e)}if(1===t){const e=new i;e.makeRotationAxis(new o([0,0,1]),-Math.PI/2),r.multiply(e)}return(new i).setInverseOf(r)}));const r=[[new o([0,1,0]),Math.PI],[new o([0,1,0]),0],[new o([1,0,0]),Math.PI/2],[new o([1,0,0]),-Math.PI/2],[new o([0,1,0]),Math.PI/2],[new o([0,1,0]),-Math.PI/2]];this.views2=r.map(((e,t)=>{const r=new i;if(r.makeRotationAxis(e[0],e[1]),2===t){const e=new i;e.makeRotationAxis(new o([0,0,1]),Math.PI/2),r.multiply(e)}if(3===t){const e=new i;e.makeRotationAxis(new o([0,0,1]),-Math.PI/2),r.multiply(e)}return(new i).setInverseOf(r)})),this.VAO=ie.createVertexArray(),ie.bindVertexArray(this.VAO);{const e=ie.createBuffer();ie.bindBuffer(ie.ARRAY_BUFFER,e),ie.bufferData(ie.ARRAY_BUFFER,new Float32Array(k),ie.STATIC_DRAW),ie.enableVertexAttribArray(0),ie.vertexAttribPointer(0,3,ie.FLOAT,!1,0,0)}ie.bindVertexArray(null),this.cubeprogram=U(J,"#version 300 es\r\nprecision highp float;\r\n\r\nin vec3 outUV;\r\nlayout (location = 0) out vec4 color;\r\n\r\nuniform sampler2D diffuse;\r\n\r\nconst vec2 invAtan = vec2(0.1591, 0.3183);\r\nvec2 SampleSphericalMap(vec3 v) {\r\n    vec2 uv = vec2(atan(v.y, v.x), asin(v.z));\r\n    uv *= invAtan;\r\n    uv += 0.5;\r\n    return uv;\r\n}\r\n\r\nvoid main() {\t\t\r\n    vec2 uv = SampleSphericalMap(normalize(outUV));\r\n    vec3 c = texture(diffuse, uv).rgb;\r\n    \r\n    color = vec4(c, 1.0);\r\n}\r\n"),this.irradianceprogram=U(J,"#version 300 es\r\nprecision highp float;\r\n\r\nin vec3 outUV;\r\nlayout (location = 0) out vec4 color;\r\n\r\nuniform samplerCube environmentMap;\r\n\r\nconst float PI = 3.14159265359;\r\n\r\nvoid main() {\r\n    vec3 N = normalize(outUV);\r\n    vec3 irradiance = vec3(0.0);\r\n\r\n    vec3 up    = vec3(0.0, 1.0, 0.0);\r\n    vec3 right = cross(up, N);\r\n    up         = cross(N, right);\r\n\r\n    float sampleDelta = 0.025;\r\n    float nrSamples = 0.0; \r\n    for(float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta)\r\n    {\r\n        for(float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta)\r\n        {\r\n            // spherical to cartesian (in tangent space)\r\n            vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));\r\n            // tangent space to world\r\n            vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N; \r\n\r\n            irradiance += textureLod(environmentMap, sampleVec, 8.0).rgb * cos(theta) * sin(theta);\r\n            nrSamples++;\r\n        }\r\n    }\r\n    irradiance = PI * irradiance * (1.0 / float(nrSamples));\r\n    \r\n    color = vec4(irradiance, 1.0);\r\n}\r\n"),this.mipmapcubeprogram=U(J,"#version 300 es\r\nprecision highp float;\r\n\r\nin vec3 outUV;\r\nlayout (location = 0) out vec4 color;\r\nlayout (location = 1) out vec4 color2;\r\n\r\nuniform samplerCube environmentMap;\r\nuniform float roughness;\r\n\r\nconst float PI = 3.14159265359;\r\n\r\nfloat RadicalInverse_VdC(uint bits) {\r\n    bits = (bits << 16u) | (bits >> 16u);\r\n    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\r\n    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\r\n    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\r\n    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\r\n    return float(bits) * 2.3283064365386963e-10; // / 0x100000000\r\n}\r\n// ----------------------------------------------------------------------------\r\nvec2 Hammersley(uint i, uint N) {\r\n    return vec2(float(i)/float(N), RadicalInverse_VdC(i));\r\n}  \r\nvec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness, bool isCharlie, float cosZ) {\r\n    float a = roughness*roughness;\r\n\t\r\n    float phi = 2.0 * PI * Xi.x;\r\n    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));\r\n    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);\r\n\r\n    if (isCharlie) {\r\n        sinTheta = pow(Xi.y, a / (2.0*a + 1.0));\r\n        cosTheta = sqrt(1.0 - sinTheta * sinTheta);\r\n        cosZ = cosTheta;\r\n    }\r\n\t\r\n    // from spherical coordinates to cartesian coordinates\r\n    vec3 H;\r\n    H.x = cos(phi) * sinTheta;\r\n    H.y = sin(phi) * sinTheta;\r\n    H.z = cosTheta;\r\n\t\r\n    // from tangent-space vector to world-space sample vector\r\n    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\r\n    vec3 tangent   = normalize(cross(up, N));\r\n    vec3 bitangent = cross(N, tangent);\r\n\t\r\n    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\r\n    return normalize(sampleVec);\r\n} \r\n\r\nfloat DistributionGGX(vec3 N, vec3 H, float roughness) {\r\n    float a = roughness*roughness;\r\n    float a2 = max(a*a, 0.0001);\r\n    float NdotH = max(dot(N, H), 0.0);\r\n    float NdotH2 = NdotH*NdotH;\r\n\r\n    float nom   = a2;\r\n    float denom = (NdotH2 * (a2 - 1.0) + 1.0);\r\n    denom = PI * denom * denom;\r\n\r\n    return nom / max(denom, 0.0001);\r\n}\r\n\r\nfloat D_Charlie(float sheenRoughness, float NdotH) {\r\n    sheenRoughness = max(sheenRoughness, 0.000001); //clamp (0,1]\r\n    float invR = 1.0 / sheenRoughness;\r\n    float cos2h = NdotH * NdotH;\r\n    float sin2h = 1.0 - cos2h;\r\n    return (2.0 + invR) * pow(sin2h, invR * 0.5) / (2.0 * PI);\r\n}\r\n\r\nvec3 x(bool isCharlie) {\r\n    vec3 N = normalize(outUV);    \r\n    vec3 R = N;\r\n    vec3 V = R;\r\n\r\n    const uint SAMPLE_COUNT = 1024u;\r\n    float totalWeight = 0.0;   \r\n    vec3 prefilteredColor = vec3(0.0);     \r\n    for(uint i = 0u; i < SAMPLE_COUNT; ++i) {\r\n        vec2 Xi = Hammersley(i, SAMPLE_COUNT);\r\n        float cosZ;\r\n        vec3 H  = ImportanceSampleGGX(Xi, N, roughness, isCharlie, cosZ);\r\n        vec3 L  = normalize(2.0 * dot(V, H) * H - V);\r\n\r\n        float NdotL = max(dot(N, L), 0.0);\r\n        if (NdotL > 0.0) {\r\n            float D = DistributionGGX(N, H, roughness);\r\n            float pdf = (D * max(dot(N, H), 0.0) / (4.0 * max(dot(H, V), 0.0))) + 0.0001;\r\n            if (isCharlie) {\r\n                pdf = D_Charlie(roughness * roughness, cosZ);\r\n            }\r\n             \r\n            float saTexel = 4.0 * PI / (6.0 * 512.0 * 512.0);\r\n            float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.00001);\r\n             \r\n            float mipLevel = roughness == 0.0 ? 0.0 :  0.5 * log2( saSample / saTexel )  ;\r\n                                 \r\n            prefilteredColor += textureLod( environmentMap, L, mipLevel ).rgb * NdotL;     \r\n            totalWeight += NdotL;\r\n        }\r\n    }\r\n    prefilteredColor = prefilteredColor / totalWeight;\r\n    return prefilteredColor;\r\n}\r\n\r\nvoid main() {\r\n    color = vec4(x(false), 1.0);\r\n    color2 = vec4(x(true), 1.0);\r\n}\r\n"),this.bdrfprogram=U(Q,"#version 300 es\r\nprecision highp float;\r\n\r\nin vec2 uv;\r\nlayout (location = 0) out vec4 color;\r\n\r\nconst float PI = 3.14159265359;\r\n\r\nfloat V_Ashikhmin(float NdotL, float NdotV) {\r\n    return clamp(1.0 / (4.0 * (NdotL + NdotV - NdotL * NdotV)), 0.0, 1.0);\r\n}\r\n\r\nfloat D_Charlie(float sheenRoughness, float NdotH) {\r\n    sheenRoughness = max(sheenRoughness, 0.000001); //clamp (0,1]\r\n    float invR = 1.0 / sheenRoughness;\r\n    float cos2h = NdotH * NdotH;\r\n    float sin2h = 1.0 - cos2h;\r\n    return (2.0 + invR) * pow(sin2h, invR * 0.5) / (2.0 * PI);\r\n}\r\n\r\nfloat GeometrySchlickGGX(float NdotV, float roughness) {\r\n    float a = roughness;\r\n    float k = (a * a) / 2.0;\r\n\r\n    float nom   = NdotV;\r\n    float denom = NdotV * (1.0 - k) + k;\r\n\r\n    return nom / denom;\r\n}\r\n\r\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {\r\n    float NdotV = max(dot(N, V), 0.0);\r\n    float NdotL = max(dot(N, L), 0.0);\r\n    float ggx2 = GeometrySchlickGGX(NdotV, roughness);\r\n    float ggx1 = GeometrySchlickGGX(NdotL, roughness);\r\n\r\n    return ggx1 * ggx2;\r\n} \r\n\r\nfloat RadicalInverse_VdC(uint bits) {\r\n    bits = (bits << 16u) | (bits >> 16u);\r\n    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\r\n    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\r\n    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\r\n    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\r\n    return float(bits) * 2.3283064365386963e-10; // / 0x100000000\r\n}\r\n\r\nvec2 Hammersley(uint i, uint N) {\r\n    return vec2(float(i)/float(N), RadicalInverse_VdC(i));\r\n}  \r\n\r\nvec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness, bool isCharlie) {\r\n    float a = roughness*roughness;\r\n\t\r\n    float phi = 2.0 * PI * Xi.x;\r\n    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));\r\n    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);\r\n\r\n    if (isCharlie) {\r\n        sinTheta = pow(Xi.y, a / (2.0*a + 1.0));\r\n        cosTheta = sqrt(1.0 - sinTheta * sinTheta);\r\n    }\r\n\t\r\n    // from spherical coordinates to cartesian coordinates\r\n    vec3 H;\r\n    H.x = cos(phi) * sinTheta;\r\n    H.y = sin(phi) * sinTheta;\r\n    H.z = cosTheta;\r\n\t\r\n    // from tangent-space vector to world-space sample vector\r\n    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\r\n    vec3 tangent   = normalize(cross(up, N));\r\n    vec3 bitangent = cross(N, tangent);\r\n\t\r\n    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\r\n    return normalize(sampleVec);\r\n} \r\n\r\nvec3 IntegrateBRDF(float NdotV, float roughness) {\r\n    vec3 V;\r\n    V.x = sqrt(1.0 - NdotV*NdotV);\r\n    V.y = 0.0;\r\n    V.z = NdotV;\r\n\r\n    float A = 0.0;\r\n    float B = 0.0;\r\n    float C = 0.0;\r\n\r\n    vec3 N = vec3(0.0, 0.0, 1.0);\r\n\r\n    const uint SAMPLE_COUNT = 1024u;\r\n    for(uint i = 0u; i < SAMPLE_COUNT; ++i) {\r\n        vec2 Xi = Hammersley(i, SAMPLE_COUNT);\r\n        vec3 H  = ImportanceSampleGGX(Xi, N, roughness, false);\r\n        vec3 L  = normalize(2.0 * dot(V, H) * H - V);\r\n\r\n        float NdotL = max(L.z, 0.0);\r\n        float NdotH = max(H.z, 0.0);\r\n        float VdotH = max(dot(V, H), 0.0);\r\n\r\n        if(NdotL > 0.0) {\r\n            float G = GeometrySmith(N, V, L, roughness);\r\n            float G_Vis = (G * VdotH) / (NdotH * NdotV);\r\n            float Fc = pow(1.0 - VdotH, 5.0);\r\n\r\n            A += (1.0 - Fc) * G_Vis;\r\n            B += Fc * G_Vis;\r\n        }\r\n\r\n        H  = ImportanceSampleGGX(Xi, N, roughness, true);\r\n        L  = normalize(2.0 * dot(V, H) * H - V);\r\n        NdotL = max(L.z, 0.0);\r\n        NdotH = max(H.z, 0.0);\r\n        VdotH = max(dot(V, H), 0.0);\r\n        if (NdotL > 0.0) {\r\n            float sheenDistribution = D_Charlie(roughness, NdotH);\r\n            float sheenVisibility = V_Ashikhmin(NdotL, NdotV);\r\n\r\n            C += sheenVisibility * sheenDistribution; // * NdotL * VdotH;\r\n        }\r\n    }\r\n    A /= float(SAMPLE_COUNT);\r\n    B /= float(SAMPLE_COUNT);\r\n    C = 2.0 * PI * C / float(SAMPLE_COUNT);\r\n    return vec3(A, B, C);\r\n}\r\n\r\nvoid main() {\t\t\r\n    vec3 integratedBRDF = IntegrateBRDF(uv.x, uv.y);\r\n    color = vec4(integratedBRDF, 1.0);\r\n}\r\n"),await fetch(this.url).then((e=>e.arrayBuffer())).then((e=>{const{data:t,shape:r}=$()(e);return this.original2DTexture=b(),ie.texImage2D(ie.TEXTURE_2D,0,ie.RGBA16F,r[0],r[1],0,ie.RGBA,ie.FLOAT,t),ie.bindSampler(this.original2DTexture.index,this.sampler),this.createEnvironment(),!0})),await fetch(ne).then((e=>e.arrayBuffer())).then((e=>{const{data:t,shape:r}=$()(e);return this.Sheen_E=b(ie.TEXTURE_2D,13),ie.pixelStorei(ie.UNPACK_FLIP_Y_WEBGL,!0),ie.texImage2D(ie.TEXTURE_2D,0,ie.RGBA16F,r[0],r[1],0,ie.RGBA,ie.FLOAT,t),ie.bindSampler(this.Sheen_E.index,this.sampler),!0}))}}var oe=r(993);function ae(e){const{ktxTexture:t,TranscodeTarget:r,transcoderConfig:n}=window.LIBKTX,{astcSupported:i,dxtSupported:s,pvrtcSupported:o,etc1Supported:a,etc2Supported:c}=n,l=new Uint8Array(e);if(!function(e){if(e.byteLength>=12){const t=new Uint8Array(e.buffer,e.byteOffset,12);if(171===t[0]&&75===t[1]&&84===t[2]&&88===t[3]&&32===t[4]&&50===t[5]&&48===t[6]&&187===t[7]&&13===t[8]&&10===t[9]&&26===t[10]&&10===t[11])return!0}return!1}(l))throw new Error("Texture is not valid ktx 2.0 file");const h=new t(l);if(h.needsTranscoding){let e,t;if(i?(e="ASTC",t=r.ASTC_4x4_RGBA):s?(e="BC1 or BC3",t=r.BC1_OR_3):o?(e="PVRTC1",t=r.PVRTC1_4_RGBA):a||c?(e="ETC",t=r.ETC):(e="RGBA4444",t=r.RGBA4444),h.transcodeBasis(t,0)!==window.LIBKTX.ErrorCode.SUCCESS)throw new Error("Texture transcode failed. See console for details.");return h.glUpload().texture}}function ce(e){return"undefined"!=typeof window?window.fetch(e).then((e=>e.arrayBuffer())):new Promise((t=>{oe.readFile(e,((e,r)=>{if(e)throw e;t(new Uint8Array(r).buffer)}))}))}let le;function he(e,t,r,n,i){let s,o;switch(e){case"BYTE":s=new Int8Array(t),s.type="BYTE",o=new le.DracoInt8Array,r&&i.GetAttributeInt8ForAllPoints(r,n,o);break;case"UNSIGNED_BYTE":s=new Uint8Array(t),s.type="UNSIGNED_BYTE",o=new le.DracoUInt8Array,r&&i.GetAttributeUInt8ForAllPoints(r,n,o);break;case"SHORT":s=new Int16Array(t),s.type="SHORT",o=new le.DracoInt16Array,r&&i.GetAttributeInt16ForAllPoints(r,n,o);break;case"UNSIGNED_SHORT":s=new Uint16Array(t),s.type="UNSIGNED_SHORT",o=new le.DracoUInt16Array,r&&i.GetAttributeUInt16ForAllPoints(r,n,o);break;case"UNSIGNED_INT":s=new Uint32Array(t),s.type="UNSIGNED_INT",o=new le.DracoUInt32Array,r&&i.GetAttributeUInt32ForAllPoints(r,n,o);break;case"FLOAT":s=new Float32Array(t),s.type="FLOAT",o=new le.DracoFloat32Array,r&&i.GetAttributeFloatForAllPoints(r,n,o)}return[o,s]}const ue="#version 300 es\r\nprecision highp float;\r\n\r\nlayout (location = 0) in vec3 inPosition;\r\nlayout (location = 1) in vec3 inNormal;\r\nlayout (location = 2) in vec2 inUV;\r\nlayout (location = 3) in vec4 inJoint;\r\nlayout (location = 4) in vec4 inWeight;\r\nlayout (location = 5) in vec4 inTangent;\r\nlayout (location = 6) in vec4 inColor;\r\nlayout (location = 7) in vec2 inUV2;\r\nlayout (location = 8) in vec2 inUV3;\r\n\r\nout vec4 vColor;\r\nout vec2 outUV0;\r\nout vec2 outUV2;\r\nout vec2 outUV3;\r\nout vec3 outPosition;\r\nout vec4 outPositionView;\r\n#ifdef TANGENT\r\n    out mat3 outTBN;\r\n#else\r\n    out vec3 outNormal;\r\n#endif\r\n\r\nuniform Matrices {\r\n    mat4 model;\r\n    mat4 normalMatrix;\r\n    mat4 view;\r\n    mat4 projection;\r\n    mat4 light;\r\n    vec4 isShadow;\r\n};\r\n\r\n#ifdef JOINTNUMBER\r\nuniform Skin {\r\n    mat4 joint[JOINTNUMBER];\r\n};\r\n#endif\r\n\r\nvoid main() {\r\n    #ifdef JOINTNUMBER\r\n        mat4 skin = inWeight.x * joint[int(inJoint.x)];\r\n        skin += inWeight.y * joint[int(inJoint.y)];\r\n        skin += inWeight.z * joint[int(inJoint.z)];\r\n        skin += inWeight.w * joint[int(inJoint.w)];\r\n    #else\r\n        mat4 skin = mat4(1.0);\r\n    #endif\r\n\r\n    #ifdef COLOR_255\r\n        vColor = inColor / 255.0;\r\n    #else\r\n        vColor = inColor;\r\n    #endif\r\n    outUV0 = inUV;\r\n    outUV2 = inUV2;\r\n    outUV3 = inUV3;\r\n    #ifdef TANGENT\r\n        vec3 normalW = normalize(vec3(model * vec4(inNormal.xyz, 0.0)));\r\n        vec3 tangentW = normalize(vec3(model * vec4(inTangent.xyz, 0.0)));\r\n        vec3 bitangentW = cross(normalW, tangentW) * inTangent.w;\r\n        #ifdef USERIGHTHANDEDSYSTEM\r\n        tangentW *= 1.0; // invertX\r\n        bitangentW *= -1.0; // invertY\r\n        #endif\r\n        outTBN = mat3(tangentW, bitangentW, normalW);\r\n    #else\r\n        outNormal = normalize(mat3(normalMatrix) * mat3(skin) * inNormal);\r\n    #endif\r\n    outPosition = vec3(model * skin * vec4(inPosition, 1.0));\r\n    outPositionView = projection * light * model * skin * vec4(inPosition, 1.0);\r\n    if (isShadow.x == 1.0) {\r\n        gl_Position = projection * light * model * skin * vec4(inPosition, 1.0);\r\n    } else {\r\n        gl_Position = projection * view * model * skin * vec4(inPosition, 1.0);\r\n    }\r\n}\r\n",fe="#version 300 es\r\nprecision highp float;\r\n\r\nin vec4 vColor;\r\nin vec2 outUV0;\r\nin vec2 outUV2;\r\nin vec2 outUV3;\r\nin vec3 outPosition;\r\nin vec4 outPositionView;\r\n#ifdef TANGENT\r\n    in mat3 outTBN;\r\n#else\r\n    in vec3 outNormal;\r\n#endif\r\n\r\nlayout (location = 0) out vec4 color;\r\nlayout (location = 1) out vec3 normalColor;\r\n\r\nuniform Material {\r\n    vec4 baseColorFactor;\r\n    vec3 viewPos;\r\n    vec3 specularFactor;\r\n    vec3 specularColorFactor;\r\n    vec3 emissiveFactor;\r\n    vec4 glossinessFactor;\r\n    vec4 metallicFactor;\r\n    vec4 roughnessFactor;\r\n    vec4 clearcoatFactor;\r\n    vec4 clearcoatRoughnessFactor;\r\n    vec4 sheenColorFactor;\r\n    vec4 sheenRoughnessFactor;\r\n    vec4 transmissionFactor;\r\n    vec4 ior;\r\n    vec4 normalTextureScale;\r\n    vec4 attenuationColor; \r\n    vec4 attenuationDistance; \r\n    vec4 thicknessFactor;\r\n    vec4 emissiveStrength;\r\n    vec4 anisotropy;\r\n    vec4 iridescence;\r\n};\r\nuniform Matrices {\r\n    mat4 model;\r\n    mat4 normalMatrix;\r\n    mat4 view;\r\n    mat4 projection;\r\n    mat4 light;\r\n    vec4 isShadow;\r\n};\r\nuniform LightColor {\r\n    vec3 lightColor[LIGHTNUMBER];\r\n};\r\nuniform Spotdir {\r\n    vec3 spotdir[LIGHTNUMBER];\r\n};\r\nuniform LightIntensity {\r\n    vec4 lightIntensity[LIGHTNUMBER];\r\n};\r\nuniform LightPos {\r\n    vec3 lightPos[LIGHTNUMBER];\r\n};\r\n#if defined MATRICES\r\nuniform TextureMatrices {\r\n    mat4 textureMatrices[MATRICES];\r\n};\r\n#endif\r\nuniform SphericalHarmonics {\r\n    vec4 vSphericalL00;\r\n    vec4 vSphericalL1_1;\r\n    vec4 vSphericalL10;\r\n    vec4 vSphericalL11;\r\n    vec4 vSphericalL2_2;\r\n    vec4 vSphericalL2_1;\r\n    vec4 vSphericalL20;\r\n    vec4 vSphericalL21;\r\n    vec4 vSphericalL22;\r\n    mat4 rotationMatrix;\r\n};\r\n\r\nuniform sampler2D baseColorTexture;\r\nuniform sampler2D metallicRoughnessTexture;\r\nuniform sampler2D normalTexture;\r\nuniform sampler2D emissiveTexture;\r\nuniform sampler2D occlusionTexture;\r\nuniform sampler2D clearcoatTexture;\r\nuniform sampler2D clearcoatRoughnessTexture;\r\nuniform sampler2D transmissionTexture;\r\nuniform sampler2D sheenColorTexture;\r\nuniform sampler2D sheenRoughnessTexture;\r\nuniform sampler2D iridescenceThicknessTexture;\r\nuniform sampler2D clearcoatNormalTexture;\r\nuniform sampler2D specularTexture;\r\nuniform sampler2D specularColorTexture;\r\nuniform sampler2D thicknessTexture;\r\n\r\nuniform samplerCube prefilterMap;\r\nuniform samplerCube charlieMap;\r\nuniform sampler2D brdfLUT;  \r\nuniform samplerCube irradianceMap;\r\nuniform sampler2D depthTexture;\r\nuniform sampler2D colorTexture;\r\nuniform int isTone;\r\nuniform int isIBL;\r\nuniform int isDefaultLight;\r\nuniform sampler2D Sheen_E;\r\n\r\nconst float RECIPROCAL_PI = 0.31830988618;\r\nconst float PI = 3.141592653589793;\r\nconst float EPSILON = 1e-6;\r\nconst float ambientStrength = 0.1;\r\nconst float specularStrength = 2.5;\r\nconst float specularPower = 32.0;\r\nconst float gamma = 2.2;\r\n\r\n\r\nvec2 getUV(int index) {\r\n    if (index == 2) {\r\n        return outUV3;\r\n    }\r\n    if (index == 1) {\r\n        return outUV0;\r\n    } else {\r\n        return outUV2;\r\n    }\r\n}\r\n\r\nfloat ShadowCalculation(vec4 fragPosLightSpace, float bias) {\r\n    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;\r\n    projCoords = projCoords * 0.5 + 0.5;\r\n    float currentDepth = projCoords.z;\r\n\r\n    float shadow = 0.0;\r\n    vec2 texelSize = 1.0 / vec2(textureSize(depthTexture, 0));\r\n    for (int x = -2; x <= 2; ++x) {\r\n        for (int y = -2; y <= 2; ++y) {\r\n            float pcfDepth = texture(depthTexture, projCoords.xy + vec2(x, y) * texelSize).r;\r\n            shadow += currentDepth - bias > pcfDepth ? 0.5 : 0.0;\r\n        }\r\n    }\r\n    shadow /= 25.0;\r\n\r\n    return shadow;\r\n}\r\n\r\nvec3 srgbToLinear(vec4 srgbIn) {\r\n    #ifdef BASISU\r\n    return srgbIn.rgb;\r\n    #else\r\n    return pow(srgbIn.rgb, vec3(2.2));\r\n    #endif\r\n}\r\n\r\nvec3 fresnelSchlick(float cosTheta, vec3 F0) {\r\n    return F0 + (vec3(1.0) - F0) * pow(1.0 - cosTheta, 5.0);\r\n}\r\nfloat fresnelSchlick(float cosTheta, float F0) {\r\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\r\n}\r\nvec3 Schlick_to_F0(vec3 f, vec3 f90, float VdotH) {\r\n    float x = clamp(1.0 - VdotH, 0.0, 1.0);\r\n    float x2 = x * x;\r\n    float x5 = clamp(x * x2 * x2, 0.0, 0.9999);\r\n\r\n    return (f - f90 * x5) / (1.0 - x5);\r\n}\r\nvec3 Schlick_to_F0(vec3 f, float VdotH) {\r\n    return Schlick_to_F0(f, vec3(1.0), VdotH);\r\n}\r\nfloat sq(float t) {\r\n    return t * t;\r\n}\r\nvec3 sq(vec3 t) {\r\n    return t * t;\r\n}\r\n// XYZ to sRGB color space\r\nconst mat3 XYZ_TO_REC709 = mat3(\r\n     3.2404542, -0.9692660,  0.0556434,\r\n    -1.5371385,  1.8760108, -0.2040259,\r\n    -0.4985314,  0.0415560,  1.0572252\r\n);\r\n\r\nfloat applyIorToRoughness(float roughness, float ior) {\r\n    #if defined VOLUME\r\n    // Scale roughness with IOR so that an IOR of 1.0 results in no microfacet refraction and\r\n    // an IOR of 1.5 results in the default amount of microfacet refraction.\r\n    return roughness * clamp(ior * 2.0 - 2.0, 0.0, 1.0);\r\n    #else\r\n    return roughness;\r\n    #endif\r\n}\r\n\r\n// Assume air interface for top\r\n// Note: We don't handle the case fresnel0 == 1\r\nvec3 Fresnel0ToIor(vec3 fresnel0) {\r\n    vec3 sqrtF0 = sqrt(fresnel0);\r\n    return (vec3(1.0) + sqrtF0) / (vec3(1.0) - sqrtF0);\r\n}\r\n\r\n// Conversion FO/IOR\r\nvec3 IorToFresnel0(vec3 transmittedIor, float incidentIor) {\r\n    return sq((transmittedIor - vec3(incidentIor)) / (transmittedIor + vec3(incidentIor)));\r\n}\r\n\r\n// ior is a value between 1.0 and 3.0. 1.0 is air interface\r\nfloat IorToFresnel0(float transmittedIor, float incidentIor) {\r\n    return sq((transmittedIor - incidentIor) / (transmittedIor + incidentIor));\r\n}\r\n\r\n// Fresnel equations for dielectric/dielectric interfaces.\r\n// Ref: https://belcour.github.io/blog/research/2017/05/01/brdf-thin-film.html\r\n// Evaluation XYZ sensitivity curves in Fourier space\r\nvec3 evalSensitivity(float OPD, vec3 shift) {\r\n    float phase = 2.0 * PI * OPD * 1.0e-9;\r\n    vec3 val = vec3(5.4856e-13, 4.4201e-13, 5.2481e-13);\r\n    vec3 pos = vec3(1.6810e+06, 1.7953e+06, 2.2084e+06);\r\n    vec3 var = vec3(4.3278e+09, 9.3046e+09, 6.6121e+09);\r\n\r\n    vec3 xyz = val * sqrt(2.0 * PI * var) * cos(pos * phase + shift) * exp(-sq(phase) * var);\r\n    xyz.x += 9.7470e-14 * sqrt(2.0 * PI * 4.5282e+09) * cos(2.2399e+06 * phase + shift[0]) * exp(-4.5282e+09 * sq(phase));\r\n    xyz /= 1.0685e-7;\r\n\r\n    vec3 srgb = XYZ_TO_REC709 * xyz;\r\n    return srgb;\r\n}\r\n\r\nvec3 evalIridescence(float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0) {\r\n    vec3 I;\r\n\r\n    // Force iridescenceIOR -> outsideIOR when thinFilmThickness -> 0.0\r\n    float iridescenceIOR = mix(outsideIOR, eta2, smoothstep(0.0, 0.03, thinFilmThickness));\r\n    // Evaluate the cosTheta on the base layer (Snell law)\r\n    float sinTheta2Sq = sq(outsideIOR / iridescenceIOR) * (1.0 - sq(cosTheta1));\r\n\r\n    // Handle TIR:\r\n    float cosTheta2Sq = 1.0 - sinTheta2Sq;\r\n    if (cosTheta2Sq < 0.0) {\r\n        return vec3(1.0);\r\n    }\r\n\r\n    float cosTheta2 = sqrt(cosTheta2Sq);\r\n\r\n    // First interface\r\n    float R0 = IorToFresnel0(iridescenceIOR, outsideIOR);\r\n    float R12 = fresnelSchlick(cosTheta1, R0);\r\n    float R21 = R12;\r\n    float T121 = 1.0 - R12;\r\n    float phi12 = 0.0;\r\n    if (iridescenceIOR < outsideIOR) phi12 = PI;\r\n    float phi21 = PI - phi12;\r\n\r\n    // Second interface\r\n    vec3 baseIOR = Fresnel0ToIor(clamp(baseF0, 0.0, 0.9999)); // guard against 1.0\r\n    vec3 R1 = IorToFresnel0(baseIOR, iridescenceIOR);\r\n    vec3 R23 = fresnelSchlick(cosTheta2, R1);\r\n    vec3 phi23 = vec3(0.0);\r\n    if (baseIOR[0] < iridescenceIOR) phi23[0] = PI;\r\n    if (baseIOR[1] < iridescenceIOR) phi23[1] = PI;\r\n    if (baseIOR[2] < iridescenceIOR) phi23[2] = PI;\r\n\r\n    // Phase shift\r\n    float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\r\n    vec3 phi = vec3(phi21) + phi23;\r\n\r\n    // Compound terms\r\n    vec3 R123 = clamp(R12 * R23, 1e-5, 0.9999);\r\n    vec3 r123 = sqrt(R123);\r\n    vec3 Rs = sq(T121) * R23 / (vec3(1.0) - R123);\r\n\r\n    // Reflectance term for m = 0 (DC term amplitude)\r\n    vec3 C0 = R12 + Rs;\r\n    I = C0;\r\n\r\n    // Reflectance term for m > 0 (pairs of diracs)\r\n    vec3 Cm = Rs - T121;\r\n    for (int m = 1; m <= 2; ++m)\r\n    {\r\n        Cm *= r123;\r\n        vec3 Sm = 2.0 * evalSensitivity(float(m) * OPD, float(m) * phi);\r\n        I += Cm * Sm;\r\n    }\r\n\r\n    // Since out of gamut colors might be produced, negative color values are clamped to 0.\r\n    return max(I, vec3(0.0));\r\n}\r\n\r\nfloat DistributionGGX(vec3 N, vec3 H, float roughness) {\r\n    float NdotH = max(dot(N, H), 0.01);\r\n    float a = max(roughness*roughness, 0.01);\r\n    float alphaRoughnessSq = a * a;\r\n    float f = (NdotH * NdotH) * (alphaRoughnessSq - 1.0) + 1.0;\r\n    return alphaRoughnessSq / (PI * f * f);\r\n}\r\n\r\nfloat GeometrySchlickGGX(float cosTheta, float roughness) {\r\n    float r = (roughness + 1.0);\r\n    float k = (r * r) / 8.0;\r\n\r\n    float nom   = cosTheta;\r\n    float denom = cosTheta * (1.0 - k) + k;\r\n\r\n    return nom / denom;\r\n}\r\n\r\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {\r\n    float NdotV = max(dot(N, V), 0.0);\r\n    float NdotL = max(dot(N, L), 0.0);\r\n    float ggx2 = GeometrySchlickGGX(NdotV, roughness);\r\n    float ggx1 = GeometrySchlickGGX(NdotL, roughness);\r\n\r\n    return ggx1 * ggx2;\r\n}\r\n\r\nfloat fresnelSchlickRoughness(float cosTheta, float F0, float roughness) {\r\n    return F0 + (max(1.0 - roughness, F0) - F0) * pow(1.0 - cosTheta, 5.0);\r\n}\r\nvec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness) {\r\n    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);\r\n}\r\nvec3 calcTransmission(vec3 color, vec3 N, float roughness, vec3 V, float transmission, float thickness) {\r\n    vec4 refractS = projection * view * vec4(outPosition + refract(-V, N, 1.0 / ior.x) * thickness, 1.0);\r\n    refractS.xy = refractS.xy / refractS.w;\r\n    refractS.xy = refractS.xy * 0.5 + 0.5;\r\n    const float MAX_REFLECTION_LOD = 10.0;\r\n    vec3 baseColor = textureLod(colorTexture, refractS.xy, applyIorToRoughness(roughness, ior.x) * MAX_REFLECTION_LOD).xyz;\r\n\r\n    return transmission * baseColor * color;\r\n}\r\n\r\nvec3 computeEnvironmentIrradiance(vec3 normal) {\r\n    return vSphericalL00.xyz\r\n        + vSphericalL1_1.xyz * (normal.y)\r\n        + vSphericalL10.xyz * (normal.z)\r\n        + vSphericalL11.xyz * (normal.x)\r\n        + vSphericalL2_2.xyz * (normal.y * normal.x)\r\n        + vSphericalL2_1.xyz * (normal.y * normal.z)\r\n        + vSphericalL20.xyz * ((3.0 * normal.z * normal.z) - 1.0)\r\n        + vSphericalL21.xyz * (normal.z * normal.x)\r\n        + vSphericalL22.xyz * (normal.x * normal.x - (normal.y * normal.y));\r\n}\r\nfloat sheenDistribution(float sheenRoughness, vec3 N, vec3 H) {\r\n    float NdotH = max(dot(N, H), 0.0);\r\n    float alphaG = max(sheenRoughness * sheenRoughness, 0.01);\r\n    float invR = 1.0 / alphaG;\r\n    float cos2h = NdotH * NdotH;\r\n    float sin2h = 1.0 - cos2h;\r\n    return (2.0 + invR) * pow(sin2h, invR * 0.5) / (2.0 * PI);\r\n}\r\nfloat lambdaSheenNumericHelper(float x, float alphaG) {\r\n    float oneMinusAlphaSq = (1.0 - alphaG) * (1.0 - alphaG);\r\n    float a = mix(21.5473, 25.3245, oneMinusAlphaSq);\r\n    float b = mix(3.82987, 3.32435, oneMinusAlphaSq);\r\n    float c = mix(0.19823, 0.16801, oneMinusAlphaSq);\r\n    float d = mix(-1.97760, -1.27393, oneMinusAlphaSq);\r\n    float e = mix(-4.32054, -4.85967, oneMinusAlphaSq);\r\n    return a / (1.0 + b * pow(x, c)) + d * x + e;\r\n}\r\nfloat lambdaSheen(float cosTheta, float alphaG) {\r\n    if (abs(cosTheta) < 0.5) {\r\n        return exp(lambdaSheenNumericHelper(cosTheta, alphaG));\r\n    } else {\r\n        return exp(2.0 * lambdaSheenNumericHelper(0.5, alphaG) - lambdaSheenNumericHelper(1.0 - cosTheta, alphaG));\r\n    }\r\n}\r\nfloat sheenVisibility(vec3 N, vec3 V, vec3 L, float sheenRoughness) {\r\n    float NdotL = max(dot(N, L), 0.0);\r\n    float NdotV = max(dot(N, V), 0.0);\r\n\r\n    sheenRoughness = max(sheenRoughness, 0.000001); //clamp (0,1]\r\n    float alphaG = sheenRoughness * sheenRoughness;\r\n\r\n    return clamp(1.0 / ((1.0 + lambdaSheen(NdotV, alphaG) + lambdaSheen(NdotL, alphaG)) *\r\n        (4.0 * NdotV * NdotL)), 0.0, 1.0);\r\n}\r\nfloat E(float x, float y) {\r\n    return texture(Sheen_E, vec2(x,y)).r;\r\n}\r\nfloat max3(vec3 v) { return max(max(v.x, v.y), v.z); }\r\nvec3 IBLAmbient(vec3 baseColor, float metallic, vec3 n, float roughness, vec3 viewDir, float transmission, vec3 sheenColor, float sheenRoughness, vec3 iridescenceFresnel, float iridescenceFactor, vec3 F0, float specularWeight, inout vec3 f_sheen, out vec3 specular) {\r\n    vec3 F = fresnelSchlickRoughness(max(dot(n, viewDir), 0.0), F0, roughness);\r\n\r\n    vec3 kD = vec3(1.0) - F * specularWeight;\r\n    #if defined SPECULARGLOSSINESSMAP\r\n    #else\r\n        kD *= 1.0 - clamp(metallic, 0.0, 0.9);\r\n    #endif\r\n    #if defined IRIDESCENCE\r\n    kD = vec3(1.0) - mix(F, iridescenceFresnel, iridescenceFactor) * specularWeight;\r\n    kD *= 1.0 - clamp(metallic, 0.0, 0.9);\r\n    #endif\r\n\r\n    vec3 R;\r\n    #ifdef SPHERICAL_HARMONICS\r\n    R = reflect(viewDir, n);\r\n    vec4 rotatedR = rotationMatrix * vec4(R.x * -1.0, R.y, R.z, 0.0);\r\n    R = rotatedR.xyz;\r\n    vec4 prefilterColor = textureLod(prefilterMap, R, roughness * float(SPHERICAL_HARMONICS));\r\n    vec3 prefilteredColor = srgbToLinear(vec4(prefilterColor.rgb, 0.0)) / pow(prefilterColor.a, 2.2);\r\n    vec3 irradianceVector = vec3(rotationMatrix * vec4(n.x, n.y, n.z * -1.0, 0)).xyz;\r\n    vec3 irradiance = computeEnvironmentIrradiance(irradianceVector).rgb;\r\n    #else\r\n    const float MAX_REFLECTION_LOD = 4.0;\r\n    R = reflect(-viewDir, n);\r\n    vec3 prefilteredColor = textureLod(prefilterMap, R, roughness * MAX_REFLECTION_LOD).rgb;\r\n    vec3 irradiance = texture(irradianceMap, n).rgb;\r\n    #endif\r\n    vec2 envBRDF  = texture(brdfLUT, vec2(max(dot(n, viewDir), 0.0), roughness)).rg;\r\n    vec3 kS = F;\r\n    #if defined IRIDESCENCE\r\n    kS = mix(F, iridescenceFresnel, iridescenceFactor);\r\n    #endif\r\n    specular = prefilteredColor * (kS * specularWeight * envBRDF.x + envBRDF.y);\r\n\r\n    #if defined SHEEN\r\n    float charliebrdf = texture(brdfLUT, vec2(max(dot(n, viewDir), 0.0), sheenRoughness)).b;\r\n    vec3 sheenSample = textureLod(charlieMap, R, sheenRoughness * MAX_REFLECTION_LOD).rgb;\r\n    f_sheen += sheenSample * sheenColor * charliebrdf;\r\n    #endif\r\n\r\n    return (1.0 - transmission) * kD * irradiance * baseColor;\r\n}\r\n\r\nfloat specEnv(vec3 N, vec3 V, float metallic, float roughness, vec3 F0, float specularWeight) {\r\n    float F = fresnelSchlickRoughness(max(dot(N, V), 0.0), (F0.x+F0.y+F0.z)/3.0, roughness);\r\n    vec2 envBRDF  = texture(brdfLUT, vec2(max(dot(N, V), 0.0), roughness)).rg;\r\n    return (F * specularWeight * envBRDF.x + envBRDF.y);\r\n}\r\n\r\nvec3 CookTorranceSpecular2(vec3 baseColor, float metallic, vec3 n, vec3 H, float roughness, vec3 viewDir, vec3 lightDir, float anisotropy, vec3 iridescenceFresnel, float iridescenceFactor, vec3 F0, float specularWeight) {\r\n    float D = DistributionGGX(n, H, roughness);\r\n    float G = GeometrySmith(n, viewDir, lightDir, roughness);\r\n    vec3 F = mix(fresnelSchlick(max(dot(viewDir, H), 0.0), F0), iridescenceFresnel, iridescenceFactor);\r\n\r\n    vec3 nominator = D * G * F * specularWeight;\r\n    float denominator = 4.0 * max(dot(n, viewDir), 0.0) * max(dot(n, lightDir), 0.0);\r\n    return nominator / max(denominator, 0.001);\r\n}\r\n\r\nvec3 CookTorranceSpecular(vec3 baseColor, float metallic, vec3 n, vec3 H, float roughness, vec3 viewDir, vec3 lightDir, float anisotropy, vec3 F0, float specularWeight) {\r\n    float D = DistributionGGX(n, H, roughness);\r\n    float G = GeometrySmith(n, viewDir, lightDir, roughness);\r\n    vec3 F = fresnelSchlick(max(dot(viewDir, H), 0.0), F0); \r\n\r\n    vec3 nominator = D * G * F * specularWeight;\r\n    float denominator = 4.0 * max(dot(n, viewDir), 0.0) * max(dot(n, lightDir), 0.0);\r\n    return nominator / max(denominator, 0.001);\r\n}\r\n\r\nvec3 LambertDiffuse(vec3 baseColor, float metallic, vec3 n, vec3 H, float roughness, vec3 viewDir, vec3 lightDir, vec3 F0, float specularWeight) {\r\n    float NdotL = max(dot(n, lightDir), 0.0);\r\n\r\n    vec3 F = fresnelSchlick(max(dot(H, viewDir), 0.0), F0);    \r\n\r\n    vec3 kD = vec3(1.0) - F * specularWeight;\r\n    #if defined SPECULARGLOSSINESSMAP\r\n    #else\r\n        kD *= 1.0 - metallic;\r\n    #endif\r\n    return baseColor * kD / PI;\r\n}\r\n\r\nfloat saturate(float a) {\r\n\tif (a > 1.0) return 1.0;\r\n\tif (a < 0.0) return 0.0;\r\n\treturn a;\r\n}\r\nvec3 ImprovedOrenNayarDiffuse(vec3 baseColor, float metallic, vec3 N, vec3 H, float a, vec3 V, vec3 L, vec3 F0, vec3 iridescenceFresnel, float iridescenceFactor, float specularWeight) {\r\n    vec3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);\r\n    vec3 kD = vec3(1.0) - F * specularWeight;\r\n    #if defined SPECULARGLOSSINESSMAP\r\n    #else\r\n        kD *= 1.0 - metallic;\r\n    #endif\r\n    #if defined IRIDESCENCE\r\n    kD = vec3(1.0) - mix(F, iridescenceFresnel, iridescenceFactor) * specularWeight;\r\n    kD *= 1.0 - clamp(metallic, 0.0, 0.9);\r\n    #endif\r\n    vec3 diffuseColor = baseColor * kD;\r\n\t// calculate intermediary values\r\n\tfloat dotNL = saturate(dot(N, L));\r\n\tfloat dotNV = saturate(dot(N, V));\r\n\tfloat dotLV = saturate(dot(L, V));\r\n\tfloat dotLH = saturate(dot(L, H));\r\n\r\n\tfloat s = dotLV - dotNL * dotNV;\r\n\tfloat t = mix(1.0, max(max(dotNL, dotNV), 0.001), step(0.0, s));\r\n\tfloat st = s * (1.0 / (t + EPSILON));\r\n\r\n\tfloat sigma2 = a;\r\n\tvec3 A = diffuseColor * (0.17 * sigma2 / (sigma2 + 0.13)) + vec3(1.0 - 0.5 * sigma2 / (sigma2 + 0.33));\r\n\tfloat B = 0.45 * sigma2 / (sigma2 + 0.09);\r\n\treturn (diffuseColor * max(0.0, dotNL)) * (A + vec3(B * s / t) / PI) / PI;\r\n}\r\n\r\nvec2 applyTransform(vec2 uv, mat4 textureMatrix) {\r\n    mat3 translation = mat3(1, 0, 0, 0, 1, 0, textureMatrix[0].x, textureMatrix[0].y, 1);\r\n    mat3 rotation = mat3(1, 0, 0, 0, 1, 0, 0, 0, 1);\r\n    if (textureMatrix[2].x != 0.0) {\r\n        rotation = mat3(\r\n            cos(-textureMatrix[2].x), sin(-textureMatrix[2].x), 0,\r\n            -sin(-textureMatrix[2].x), cos(-textureMatrix[2].x), 0,\r\n            0, 0, 1\r\n        );\r\n    }\r\n    mat3 scale = mat3(textureMatrix[1].x, 0, 0, 0, textureMatrix[1].y, 0, 0, 0, 1);\r\n\r\n    mat3 matrix = translation * rotation * scale;\r\n    vec2 outUV = ( matrix * vec3(uv, 1.0) ).xy;\r\n    return outUV;\r\n}\r\n\r\nvec3 cocaLambert(vec3 alpha, float distance) {\r\n    return exp(-alpha*distance);\r\n}\r\n\r\nvec3 computeColorAtDistanceInMedia(vec3 color, float distance) {\r\n    return -log(color)/distance;\r\n}\r\n\r\nvoid main() {\r\n    vec2 outUV = outUV0;\r\n    #ifdef BASECOLORTEXTURE\r\n        outUV = getUV(BASECOLORTEXTURE);\r\n        #ifdef BASECOLORTEXTURE_TEXTURE_TRANSFORM\r\n            outUV = applyTransform(outUV, textureMatrices[BASECOLORTEXTURE_TEXTURE_TRANSFORM]);\r\n        #endif\r\n        vec3 baseColor = texture(baseColorTexture, outUV).rgb * baseColorFactor.rgb;\r\n        float alpha = min(texture(baseColorTexture, outUV).a, baseColorFactor.a);\r\n    #else\r\n        vec3 baseColor = baseColorFactor.rgb;\r\n        float alpha = baseColorFactor.a;\r\n    #endif\r\n\r\n    #ifdef ALPHATEST\r\n    if ( alpha < ALPHATEST ) {\r\n        discard;\r\n    }\r\n    if ( ALPHATEST > 0.01 ) {\r\n        alpha = 1.0;\r\n    }\r\n    #else\r\n        alpha = 1.0;\r\n    #endif\r\n\r\n    if ( length(vColor.rgb) != 0.0 ) {\r\n        baseColor.rgb *= vColor.rgb;\r\n    }\r\n\r\n    #ifdef NOLIGHT\r\n        color = vec4(baseColor, alpha);\r\n        return;\r\n    #endif\r\n\r\n    float ao = 1.0;\r\n    #ifdef OCCLUSIONMAP\r\n        outUV = getUV(OCCLUSIONMAP);\r\n        #ifdef OCCLUSIONMAP_TEXTURE_TRANSFORM\r\n            outUV = applyTransform(outUV, textureMatrices[OCCLUSIONMAP_TEXTURE_TRANSFORM]);\r\n        #endif\r\n        ao = texture(occlusionTexture, outUV).r;\r\n    #endif\r\n\r\n    float roughness = roughnessFactor.x;\r\n    float metallic = metallicFactor.x;\r\n    float clearcoatRoughness = clearcoatRoughnessFactor.x;\r\n    float clearcoat = clearcoatFactor.x;\r\n    float clearcoatBlendFactor = clearcoat;\r\n    vec3 sheenColor = sheenColorFactor.xyz;\r\n    float sheenRoughness = sheenRoughnessFactor.x;\r\n    float transmission = transmissionFactor.x;\r\n    float thickness = clamp(thicknessFactor.x, 0.0, 1.0);\r\n    #ifdef CLEARCOATMAP\r\n        outUV = getUV(CLEARCOATMAP);\r\n        #ifdef CLEARCOATMAP_TEXTURE_TRANSFORM\r\n            outUV = applyTransform(outUV, textureMatrices[CLEARCOATMAP_TEXTURE_TRANSFORM]);\r\n        #endif\r\n        clearcoatBlendFactor = texture(clearcoatTexture, outUV).r * clearcoat;\r\n    #endif\r\n    #ifdef CLEARCOATROUGHMAP\r\n        outUV = getUV(CLEARCOATROUGHMAP);\r\n        #ifdef CLEARCOATROUGHMAP_TEXTURE_TRANSFORM\r\n            outUV = applyTransform(outUV, textureMatrices[CLEARCOATROUGHMAP_TEXTURE_TRANSFORM]);\r\n        #endif\r\n        clearcoatRoughness = texture(clearcoatRoughnessTexture, outUV).g * clearcoatRoughness;\r\n    #endif\r\n    #ifdef SHEENMAP\r\n        outUV = getUV(SHEENMAP);\r\n        #ifdef SHEENMAP_TEXTURE_TRANSFORM\r\n            outUV = applyTransform(outUV, textureMatrices[SHEENMAP_TEXTURE_TRANSFORM]);\r\n        #endif\r\n        vec3 sheenColorTextureV = texture(sheenColorTexture, outUV).rgb;\r\n        sheenColor = sheenColorTextureV * sheenColor;\r\n    #endif\r\n    #ifdef SHEENROUGHNESSMAP\r\n        outUV = getUV(SHEENROUGHNESSMAP);\r\n        #ifdef SHEENROUGHNESSMAP_TEXTURE_TRANSFORM\r\n            outUV = applyTransform(outUV, textureMatrices[SHEENROUGHNESSMAP_TEXTURE_TRANSFORM]);\r\n        #endif\r\n    vec4 sheenRoughnessTextureV = texture(sheenRoughnessTexture, outUV);\r\n    sheenRoughness = sheenRoughnessTextureV.a * sheenRoughness;\r\n    #endif\r\n    float iridescenceThickness = iridescence.z;\r\n    #ifdef IRIDESCENCEMAP\r\n        iridescenceThickness = mix(iridescence.w, iridescence.z, texture(iridescenceThicknessTexture, outUV).g);\r\n    #endif\r\n    #ifdef TRANSMISSIONMAP\r\n        float transmissionTextureV = texture(transmissionTexture, outUV).r;\r\n        transmission = transmissionTextureV * transmission;\r\n    #endif\r\n    #ifdef THICKNESSMAP\r\n        float thicknessTextureV = texture(thicknessTexture, outUV).g;\r\n        thickness = thicknessTextureV * thickness;\r\n    #endif\r\n    vec3 specularMap = vec3(0);\r\n    #ifdef SPECULARGLOSSINESSMAP\r\n        #ifdef METALROUGHNESSMAP\r\n            outUV = getUV(METALROUGHNESSMAP);\r\n            #ifdef METALROUGHNESSMAP_TEXTURE_TRANSFORM\r\n                outUV = applyTransform(outUV, textureMatrices[METALROUGHNESSMAP_TEXTURE_TRANSFORM]);\r\n            #endif\r\n            roughness = 1.0 - texture(metallicRoughnessTexture, outUV).a;\r\n            specularMap = texture(metallicRoughnessTexture, outUV).rgb;\r\n        #else\r\n            roughness = glossinessFactor.x;\r\n            specularMap = specularFactor;\r\n        #endif\r\n    #else\r\n        #ifdef METALROUGHNESSMAP\r\n            outUV = getUV(METALROUGHNESSMAP);\r\n            #ifdef METALROUGHNESSMAP_TEXTURE_TRANSFORM\r\n                outUV = applyTransform(outUV, textureMatrices[METALROUGHNESSMAP_TEXTURE_TRANSFORM]);\r\n            #endif\r\n            vec4 metallicRoughness = texture(metallicRoughnessTexture, outUV);\r\n            roughness *= metallicRoughness.g;\r\n            metallic *= metallicRoughness.b;\r\n        #endif\r\n    #endif\r\n    float specularWeight = 1.0;\r\n    #ifdef SPECULAR\r\n        specularMap = specularColorFactor;\r\n        #ifdef SPECULARCOLORMAP\r\n        specularMap *= texture(specularColorTexture, outUV).rgb;\r\n        #endif\r\n        specularWeight = specularFactor.x;\r\n        #ifdef SPECULARMAP\r\n        specularWeight *= texture(specularTexture, outUV).a;\r\n        #endif\r\n    #endif\r\n    vec3 F0 = mix(vec3(0.04), baseColor, metallic);\r\n    #if defined IOR\r\n    F0 = vec3(pow(( ior.x - 1.0) /  (ior.x + 1.0), 2.0));\r\n    #endif\r\n    #if defined SPECULAR\r\n    F0 = mix(min(F0 * specularMap, vec3(1.0)), baseColor, metallic);\r\n    #endif\r\n    #if defined SPECULARGLOSSINESSMAP\r\n        F0 = specularMap;\r\n    #endif\r\n\r\n    #ifdef TANGENT\r\n        #ifdef NORMALMAP\r\n            outUV = getUV(NORMALMAP);\r\n            #ifdef NORMALMAP_TEXTURE_TRANSFORM\r\n                outUV = applyTransform(outUV, textureMatrices[NORMALMAP_TEXTURE_TRANSFORM]);\r\n            #endif\r\n            vec3 n = texture(normalTexture, outUV).rgb;\r\n            n = normalize(outTBN * (2.0 * n - 1.0) * vec3(normalTextureScale.x, normalTextureScale.x, 1.0));\r\n        #else\r\n            vec3 n = normalize(outTBN[2].xyz);\r\n        #endif\r\n    #else\r\n        vec3 n = normalize(outNormal);\r\n    #endif\r\n\r\n    #ifdef TANGENT\r\n    #ifdef CLEARCOATNORMALMAP\r\n        outUV = getUV(CLEARCOATNORMALMAP);\r\n        #ifdef CLEARCOATNORMALMAP_TEXTURE_TRANSFORM\r\n            outUV = applyTransform(outUV, textureMatrices[CLEARCOATNORMALMAP_TEXTURE_TRANSFORM]);\r\n        #endif\r\n        vec3 clearcoatNormal = texture(clearcoatNormalTexture, outUV).rgb;\r\n        clearcoatNormal = normalize(outTBN * (2.0 * clearcoatNormal - 1.0));\r\n    #else\r\n        vec3 clearcoatNormal = outTBN[2].xyz;\r\n    #endif\r\n    #else\r\n        vec3 clearcoatNormal = outNormal;\r\n    #endif\r\n\r\n    vec3 viewDir = normalize(viewPos - outPosition);\r\n\r\n    #ifdef DOUBLESIDED\r\n    if (dot(n, viewDir) < 0.0) {\r\n        n = -n;\r\n        clearcoatNormal = -clearcoatNormal;\r\n    }\r\n    #endif\r\n\r\n    float shadow = 1.0;\r\n    #ifdef SHADOWMAP\r\n        vec3 l = normalize(lightPos[0] - outPosition);\r\n        float shadowBias = max(0.05 * (1.0 - dot(n, l)), 0.005);\r\n        shadow = 1.0 - ShadowCalculation(outPositionView, shadowBias);\r\n    #endif\r\n\r\n    #ifdef USE_PBR\r\n        vec3 f_sheen = vec3(0.0);\r\n        float albedoSheenScaling = 1.0;\r\n        vec3 Lo = vec3(0.0);\r\n        if (isDefaultLight == 1) {\r\n        for (int i = 0; i < LIGHTNUMBER; ++i) {\r\n            vec3 lightDir = normalize(lightPos[i] - outPosition);\r\n            float NdotL = max(dot(n, lightDir), 0.0);\r\n            vec3 H = normalize(viewDir + lightDir);\r\n\r\n            vec3 radiance = lightColor[i] * lightIntensity[i].x;\r\n            float distance = length(lightPos[i] - outPosition);\r\n            float attenuation = 1.0 / (distance * distance);\r\n            if (lightIntensity[i].w == 1.0) { // point\r\n                radiance = radiance * attenuation;\r\n            }\r\n            if (lightIntensity[i].w == 2.0) { // spot\r\n                float lightAngleScale = 1.0 / max(0.001, cos(lightIntensity[i].y) - cos(lightIntensity[i].z));\r\n                float lightAngleOffset = -cos(lightIntensity[i].z) * lightAngleScale;\r\n\r\n                float cd = dot(spotdir[i], lightDir);\r\n                float attenuationSpot = saturate(cd * lightAngleScale + lightAngleOffset);\r\n                attenuationSpot *= attenuationSpot;\r\n\r\n                radiance = radiance * attenuationSpot * attenuation;\r\n            }\r\n\r\n            float NdotV = saturate(dot(n, viewDir));\r\n            vec3 iridescenceF0 = vec3(0.0);\r\n            #if defined IRIDESCENCE\r\n            vec3 iridescenceFresnel = evalIridescence(1.0, iridescence.y, NdotV, iridescenceThickness, F0);\r\n            iridescenceF0 = Schlick_to_F0(iridescenceFresnel, NdotV);\r\n            vec3 specular = CookTorranceSpecular2(baseColor, metallic, n, H, roughness, viewDir, lightDir, anisotropy.x, iridescenceF0, iridescence.x, F0, specularWeight);\r\n            #else\r\n            vec3 specular = CookTorranceSpecular(baseColor, metallic, n, H, roughness, viewDir, lightDir, anisotropy.x, F0, specularWeight);\r\n            #endif\r\n            vec3 f_clearcoat = CookTorranceSpecular(vec3(0.0), 0.0, clearcoatNormal, H, clearcoatRoughness, viewDir, lightDir, anisotropy.x, F0, specularWeight);\r\n            vec3 clearcoatFresnel = 1.0 - clearcoatBlendFactor * fresnelSchlick(saturate(dot(clearcoatNormal, viewDir)), vec3(0.04));\r\n            vec3 diffuse = ImprovedOrenNayarDiffuse(baseColor, metallic, n, H, roughness, viewDir, lightDir, F0, iridescenceF0, iridescence.x, specularWeight);\r\n            #if defined SPECULARGLOSSINESSMAP\r\n                diffuse = baseColor * (1.0 - max(max(specularMap.r, specularMap.g), specularMap.b));\r\n            #endif\r\n            #if defined SHEEN\r\n            f_sheen = NdotL * (sheenColor * sheenDistribution(sheenRoughness, n, H) * sheenVisibility(n, viewDir, lightDir, sheenRoughness));\r\n            albedoSheenScaling = min(1.0 - max3(sheenColor) * E(max(dot(viewDir, n), 0.0), sheenRoughness), 1.0 - max3(sheenColor) * E(max(dot(lightDir, n), 0.0), sheenRoughness));\r\n            #endif\r\n\r\n            diffuse *= (1.0 - transmission);\r\n            Lo +=  (diffuse + specular * NdotL) * radiance * clearcoatFresnel + f_clearcoat * clearcoatBlendFactor;\r\n        }\r\n        }\r\n\r\n        vec3 ambient = vec3(0.0);\r\n        vec3 ambientClearcoat = vec3(0.0);\r\n        vec3 clearcoatFresnel = vec3(1.0);\r\n        vec3 f_transmission = cocaLambert(computeColorAtDistanceInMedia(attenuationColor.rgb, attenuationDistance.x), thickness) * calcTransmission(baseColor, n, roughness, viewDir, transmission, thickness);\r\n        vec3 aSpecular;\r\n        vec3 cSpecular;\r\n        if (isIBL == 1) {\r\n            float NdotV = saturate(dot(n, viewDir));\r\n            vec3 iridescenceFresnel = evalIridescence(1.0, iridescence.y, NdotV, iridescenceThickness, F0);\r\n            vec3 iridescenceF0 = Schlick_to_F0(iridescenceFresnel, NdotV);\r\n            ambient = IBLAmbient(baseColor, metallic, n, roughness, viewDir, transmission, sheenColor, sheenRoughness, iridescenceF0, iridescence.x, F0, specularWeight, f_sheen, aSpecular);\r\n            vec3 placeholder = vec3(0.0);\r\n            ambientClearcoat = IBLAmbient(vec3(0.0), 0.0, clearcoatNormal, clearcoatRoughness, viewDir, transmission, sheenColor, sheenRoughness, iridescenceF0, iridescence.x, F0, specularWeight, placeholder, cSpecular) * clearcoatBlendFactor;\r\n            #ifndef SPHERICAL_HARMONICS\r\n            ambient += aSpecular;\r\n            ambientClearcoat += cSpecular * clearcoatBlendFactor;\r\n            #endif\r\n            clearcoatFresnel = (1.0 - clearcoatBlendFactor * fresnelSchlick(saturate(dot(clearcoatNormal, viewDir)), vec3(0.04)));\r\n        } else {\r\n            ambient = vec3(0.03) * baseColor * 0.2;\r\n        }\r\n\r\n        vec3 emissive = emissiveFactor;\r\n        #ifdef EMISSIVEMAP\r\n            outUV = getUV(EMISSIVEMAP);\r\n            #ifdef EMISSIVEMAP_TEXTURE_TRANSFORM\r\n                outUV = applyTransform(outUV, textureMatrices[EMISSIVEMAP_TEXTURE_TRANSFORM]);\r\n            #endif\r\n            emissive *= texture(emissiveTexture, outUV).rgb;\r\n        #endif\r\n        emissive *= emissiveStrength.x;\r\n\r\n        #ifdef TRANSMISSION\r\n        float kT = 1.0 - specEnv(n, viewDir, metallic, roughness, F0, specularWeight);\r\n        color = vec4((ambient + Lo + f_transmission * kT) * clearcoatFresnel + ambientClearcoat, alpha);\r\n        #else\r\n        color = vec4(ao * ((emissive + ambient + Lo) * clearcoatFresnel + ambientClearcoat), alpha);\r\n        #endif\r\n\r\n        color.rgb = f_sheen + color.rgb * albedoSheenScaling;\r\n    #else\r\n        vec3 lightDir = normalize(lightPos[0] - outPosition);\r\n        vec3 ambient = ambientStrength * lightColor[0];\r\n\r\n        float diff = max(dot(n, lightDir), 0.0);\r\n        vec3 diffuse = diff * lightColor[0];\r\n\r\n        vec3 reflectDir = reflect(-lightDir, n);\r\n        float spec = pow(max(dot(viewDir, reflectDir), 0.0), specularPower);\r\n        vec3 specular = specularStrength * spec * lightColor[0];\r\n\r\n        color = vec4(baseColor.rgb * (ambient + diffuse + specular) * shadow, alpha);\r\n    #endif\r\n\r\n    if (isTone == 1) {\r\n        #ifdef SPHERICAL_HARMONICS\r\n        color.rgb  *= 4.0;\r\n        vec3 X = max(vec3(0.0, 0.0, 0.0), color.rgb - 0.004);\r\n        vec3 retColor = (X * (6.2 * X + 0.5)) / (X * (6.2 * X + 1.7) + 0.06);\r\n        color.rgb = retColor * retColor;\r\n        #else\r\n        // color.rgb = color.rgb / (color.rgb + vec3(1.0));\r\n        color.rgb = pow(color.rgb, vec3(1.0 / gamma));\r\n        #endif\r\n    }\r\n\r\n    #ifdef SPHERICAL_HARMONICS\r\n    color.rgb += aSpecular;\r\n    #endif\r\n\r\n    normalColor = n;\r\n}\r\n",me={POSITION:[0,3],NORMAL:[1,3],TEXCOORD_0:[2,2],JOINTS_0:[3,4],WEIGHTS_0:[4,4],TANGENT:[5,4],COLOR_0:[6,4],TEXCOORD_1:[7,2],TEXCOORD_2:[8,2]};class Te{constructor(e,t,r,n,i){let s;this.boundingSphere={center:new o,radius:null,min:null,max:null},this.uniformBuffer=null,this.UBO=null,this.VAO=null,this.indicesBuffer=null,this.attributes=null,this.targets=null,this.blend=null,this.uniforms=null,this.SKIN=null,this.targets=[];const a={},c=e.accessors[i.indices],h=new Map;for(const t in i.attributes)h.set(t,e.accessors[i.attributes[t]]);const u={min:h.get("POSITION").min,max:h.get("POSITION").max},f=i.extensions&&i.extensions.KHR_draco_mesh_compression;if(f){const r=e.bufferViews[f.bufferView],i=new n.Decoder,o=function(e,t,r,n){const i=new le.DecoderBuffer;i.Init(new Int8Array(e,r,n),e.byteLength);const s=new le.Mesh;return t.DecodeBufferToMesh(i,s),le.destroy(i),s}(t[r.buffer],i,r.byteOffset,r.byteLength),c=o.num_faces(),l=o.num_points();for(const e of h.keys()){const t=i.GetAttributeByUniqueId(o,f.attributes[e]),r=p(h.get(e).type),[s,c]=he((T=h.get(e).componentType,m[T]),l*r,o,t,i);for(let e=0;e<l*r;e+=r)c[e]=s.GetValue(e),c[e+1]=s.GetValue(e+1),r>2&&(c[e+2]=s.GetValue(e+2)),r>3&&(c[e+3]=s.GetValue(e+3));n.destroy(s),a[e]=c}{s=new Uint32Array(3*c),s.type="UNSIGNED_INT";const e=new n.DracoUInt32Array;for(let t=0;t<c;++t){i.GetFaceFromMesh(o,t,e);const r=3*t;s[r]=e.GetValue(0),s[r+1]=e.GetValue(1),s[r+2]=e.GetValue(2)}n.destroy(e)}n.destroy(i),n.destroy(o)}else{if(c){const r=e.bufferViews[c.bufferView];s=F(t[r.buffer],c.componentType,M(r.byteOffset,c.byteOffset),p(c.type)*c.count)}for(const r of h.keys()){const n=h.get(r),i=e.bufferViews[n.bufferView];a[r]=x(t[i.buffer],n,i)}}var T;if(i.targets){for(const r of i.targets){const n={};for(const i in r){n[i]=e.accessors[r[i]];const s=n[i],o=e.bufferViews[s.bufferView];n[i]=x(t[o.buffer],s,o)}this.targets.push(n)}for(const e of h.keys())if(this.targets[0][e]){let t=0;const n=a[e];a[e]=new n.constructor(n.length);for(let i=0;i<a[e].length;i++)"TANGENT"!==e||(i+1)%4!=0?a[e][i]=n[i]+r.reduce(((n,s,o)=>n+r[o]*this.targets[o][e][i-t]),0):t++}}for(const r of h.keys()){const n=h.get(r);if("COLOR_0"===r&&"VEC3"===n.type){const e=new a[r].constructor(4*n.count);let t=0;for(let n=0;n<e.length;n++)(n+1)%4==0?e[n]=1:(e[n]=a[r][t],t++);a[r]=e}if(void 0!==n.sparse){const i=p(n.type),s=e.bufferViews[n.sparse.indices.bufferView],o=e.bufferViews[n.sparse.values.bufferView],c=F(t[s.buffer],n.sparse.indices.componentType,M(s.byteOffset,n.sparse.indices.byteOffset),n.sparse.count),l=F(t[o.buffer],n.componentType,M(o.byteOffset,n.byteOffset),p(n.type)*n.sparse.count);for(let e=0,t=c.length;e<t;e++){const t=c[e];a[r][t*i]=l[e*i],i>=2&&(a[r][t*i+1]=l[e*i+1]),i>=3&&(a[r][t*i+2]=l[e*i+2]),i>=4&&(a[r][t*i+3]=l[e*i+3])}}}void 0===a.NORMAL&&s&&(a.NORMAL=function(e,t){const r=new Float32Array(t.length/3*3);for(let i=0;i<e.length;i+=3){const s=[e[i],e[i+1],e[i+2]].map((e=>n(t,e))),a=s[1].subtract(s[0]),c=s[2].subtract(s[0]),l=o.cross(a.normalize(),c.normalize()),[h,u,f]=l.elements;for(let t=0;t<3;t++)r[3*e[i+t]+0]=r[3*e[i+t]+0]+h,r[3*e[i+t]+1]=r[3*e[i+t]+1]+u,r[3*e[i+t]+2]=r[3*e[i+t]+2]+f}return r;function n(e,t,r=3){return new o([e[t*=r],e[t+1],e[t+2]])}}(s,a.POSITION),h.set("NORMAL",{componentType:5126})),void 0===a.NORMAL&&void 0===s&&(a.NORMAL=function(e){const t=new Float32Array(e.length);for(let r=0;r<e.length;r+=9){const n=[new o([e[r],e[r+1],e[r+2]]),new o([e[r+3],e[r+4],e[r+5]]),new o([e[r+6],e[r+7],e[r+8]])],i=n[1].subtract(n[0]),s=n[2].subtract(n[0]),a=o.cross(i.normalize(),s.normalize()),[c,l,h]=a.elements;t[r]=c,t[r+1]=l,t[r+2]=h,t[r+3]=c,t[r+4]=l,t[r+5]=h,t[r+6]=c,t[r+7]=l,t[r+8]=h}return t}(a.POSITION),h.set("NORMAL",{componentType:5126})),void 0===a.TEXCOORD_0&&s&&(a.TEXCOORD_0=function(e,t){const r=new Float32Array(e.length/3*2),n=new l([1/0,1/0]),i=new l([-1/0,-1/0]);for(let s=0;s<e.length/3;++s){const a=[],c=[];for(let r=0;r<3;++r)a.push(e[3*s+r]),c.push(t[3*s+r]);const l=new o(c),h=["x","y","z"].sort(((e,t)=>Math.abs(l[e])-Math.abs(l[t]))),u=new o(a),f=u[h[0]],m=u[h[1]];r[2*s]=f,r[2*s+1]=m,i.x=Math.max(i.x,f),i.y=Math.max(i.y,m),n.x=Math.min(n.x,f),n.y=Math.min(n.y,m)}const s=new l(i.elements).subtract(n);for(let t=0;t<e.length/3;++t){const e=2*t;r[e]=(r[e]-n.x)/s.x,r[e+1]=(r[e+1]-n.y)/s.y}return r}(a.POSITION,a.NORMAL),h.set("TEXCOORD_0",{componentType:5126})),void 0===i.attributes.TANGENT&&s&&(a.TANGENT=function(e,t,r,n){const i=new Float32Array(r.length/3*4);for(let r=0;r<e.length;r+=3){const c=[e[r],e[r+1],e[r+2]],l=c.map((e=>s(t,e))),h=c.map((e=>s(n,e,2))),u=l[1].subtract(l[0]),f=l[2].subtract(l[0]),m=h[1].subtract(h[0]),T=h[2].subtract(h[0]);let E=m.elements[0]*T.elements[1]-m.elements[1]*T.elements[0];const d=E>0?1:-1;E=0!==E?1/E:1;const R=new o([(T.elements[1]*u.elements[0]-m.elements[1]*f.elements[0])*E,(T.elements[1]*u.elements[1]-m.elements[1]*f.elements[1])*E,(T.elements[1]*u.elements[2]-m.elements[1]*f.elements[2])*E]);R.normalize(),c.forEach((e=>{a(i,e,R,d)}))}return i;function s(e,t,r=3){return t*=r,3===r?new o([e[t],e[t+1],e[t+2]]):2===r?new l([e[t],e[t+1]]):void 0}function a(e,t,r,n,i=4,s=((e,t)=>e+t)){t*=i;for(let o=0;o<i;++o)e[t+o]=3===o?n:s(e[t+o],r.elements[o])}}(s,a.POSITION,a.NORMAL,a.TEXCOORD_0),h.set("TANGENT",{componentType:5126})),this.vertexAccessor=h,this.attributes=a,this.indicesBuffer=s;const{min:E,max:d}=u;this.boundingSphere.min=new o(E),this.boundingSphere.max=new o(d)}createGeometryForWebGPU(e){const{device:t}=e;let r=12;const n=this.attributes.POSITION.length/3,i=new Float32Array(3*n+2*n+3*n+4*n+(this.attributes.JOINTS_0?.length??0)+(this.attributes.WEIGHTS_0?.length??0)+(this.attributes.COLOR_0?.length??0)+(this.attributes.TEXCOORD_1?.length??0));this.attributes.WEIGHTS_0&&(r+=8),this.attributes.COLOR_0&&(r+=4),this.attributes.TEXCOORD_1&&(r+=2);let s=0,o=0,a=0;for(let e=0;e<i.length;e+=r)i[e]=this.attributes.POSITION[s],i[e+1]=this.attributes.POSITION[s+1],i[e+2]=this.attributes.POSITION[s+2],this.attributes.TEXCOORD_0&&(i[e+3]=this.attributes.TEXCOORD_0[o],i[e+4]=this.attributes.TEXCOORD_0[o+1]),i[e+5]=this.attributes.NORMAL[s],i[e+6]=this.attributes.NORMAL[s+1],i[e+7]=this.attributes.NORMAL[s+2],this.attributes.TANGENT&&(i[e+8]=this.attributes.TANGENT[a],i[e+9]=this.attributes.TANGENT[a+1],i[e+10]=this.attributes.TANGENT[a+2],i[e+11]=this.attributes.TANGENT[a+3]),this.attributes.WEIGHTS_0&&(i[e+12]=this.attributes.JOINTS_0[a],i[e+13]=this.attributes.JOINTS_0[a+1],i[e+14]=this.attributes.JOINTS_0[a+2],i[e+15]=this.attributes.JOINTS_0[a+3],i[e+16]=this.attributes.WEIGHTS_0[a],i[e+17]=this.attributes.WEIGHTS_0[a+1],i[e+18]=this.attributes.WEIGHTS_0[a+2],i[e+19]=this.attributes.WEIGHTS_0[a+3]),this.attributes.COLOR_0&&(i[e+12]=this.attributes.COLOR_0[a],i[e+13]=this.attributes.COLOR_0[a+1],i[e+14]=this.attributes.COLOR_0[a+2],i[e+15]=this.attributes.COLOR_0[a+3]),this.attributes.TEXCOORD_1&&(i[e+12]=this.attributes.TEXCOORD_1[o],i[e+13]=this.attributes.TEXCOORD_1[o+1]),s+=3,o+=2,a+=4;this.g=i;const c=t.createBuffer({size:i.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST,mappedAtCreation:!0});if(new Float32Array(c.getMappedRange()).set(i),c.unmap(),this.verticesWebGPUBuffer=c,this.indicesBuffer){this.indicesBuffer=new Uint32Array(this.indicesBuffer);const e=t.createBuffer({size:this.indicesBuffer.byteLength,usage:GPUBufferUsage.INDEX,mappedAtCreation:!0});new Uint32Array(e.getMappedRange()).set(this.indicesBuffer),e.unmap(),this.indicesWebGPUBuffer=e}}createGeometryForWebGl(e){const t=e.createVertexArray();e.bindVertexArray(t);for(const t in this.attributes){const r=this.vertexAccessor.get(t),n=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,n),e.bufferData(e.ARRAY_BUFFER,this.attributes[t],e.STATIC_DRAW);const i=me[t];e.enableVertexAttribArray(i[0]),e.vertexAttribPointer(i[0],i[1],r.componentType,!1,0,0)}if(this.indicesBuffer){const t=e.createBuffer();e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,t),e.bufferData(e.ELEMENT_ARRAY_BUFFER,this.indicesBuffer,e.STATIC_DRAW)}this.VAO=t,e.bindVertexArray(null)}calculateBounding(e){this.boundingSphere.min.applyMatrix4(e),this.boundingSphere.max.applyMatrix4(e);const t=this.attributes.POSITION;let r=0;this.boundingSphere.center.add(this.boundingSphere.min).add(this.boundingSphere.max).scale(.5);for(let e=0;e<t.length;e+=3)r=Math.max(r,this.boundingSphere.center.distanceToSquared(t[e],t[e+1],t[e+2]));this.boundingSphere.radius=Math.sqrt(r)}createUniforms(e,t,r){const n=new i(e);n.invert().transpose();const s=new y;s.add("model",e.elements),s.add("normalMatrix",n.elements),s.add("view",t.matrixWorldInvert.elements),s.add("projection",t.projection.elements),s.add("light",r.matrixWorldInvert.elements),s.add("isShadow",0),s.done(),this.uniformBuffer=s}updateUniformsWebGPU(e){const t=this.uniformBuffer.store.byteLength,r=256+t,{device:n}=e,i=n.createBuffer({size:r,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});this.uniformBuffer.bufferWebGPU=i;const s=[{binding:0,resource:{buffer:i,offset:0,size:t}}];n.queue.writeBuffer(i,0,this.uniformBuffer.store.buffer,this.uniformBuffer.store.byteOffset,this.uniformBuffer.store.byteLength),this.uniformBindGroup1=s}updateUniformsWebGl(e,t){const r=e.getUniformBlockIndex(t,"Matrices");e.uniformBlockBinding(t,r,0);const n=e.createBuffer();e.bindBuffer(e.UNIFORM_BUFFER,n),e.bufferData(e.UNIFORM_BUFFER,this.uniformBuffer.store,e.DYNAMIC_DRAW),this.UBO=n,e.bindBuffer(e.UNIFORM_BUFFER,null)}async updateWebGPU(e,t){const{device:r,commandEncoder:n}=e;let i=0,s=0,o=0;const{g:a}=this;for(let e=0;e<a.length;e+=12)t.POSITION&&(a[e]=t.POSITION[i],a[e+1]=t.POSITION[i+1],a[e+2]=t.POSITION[i+2]),t.TEXCOORD_0&&(a[e+3]=t.TEXCOORD_0[s],a[e+4]=t.TEXCOORD_0[s+1]),t.NORMAL&&(a[e+5]=t.NORMAL[i],a[e+6]=t.NORMAL[i+1],a[e+7]=t.NORMAL[i+2]),t.TANGENT&&(a[e+8]=t.TANGENT[o],a[e+9]=t.TANGENT[o+1],a[e+10]=t.TANGENT[o+2],a[e+11]=t.TANGENT[o+3]),i+=3,s+=2,o+=4;const c=r.createBuffer({size:a.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC,mappedAtCreation:!0});new Float32Array(c.getMappedRange()).set(a),c.unmap(),n.copyBufferToBuffer(c,0,this.verticesWebGPUBuffer,0,a.byteLength)}update(e,t){e.bindVertexArray(this.VAO);for(const r in t){const n=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,n),e.bufferData(e.ARRAY_BUFFER,t[r],e.STATIC_DRAW);const i=me[r];e.enableVertexAttribArray(i[0]),e.vertexAttribPointer(i[0],i[1],e[g.get(this.attributes[r].constructor)],!1,0,0)}e.bindVertexArray(null)}}let Ee;const de=";base64,";class Re{constructor(e,t,r){this.url=e,this.host=e.substr(0,e.lastIndexOf("/")+1),this.tracks=[],this.skins=[],this.textures=null,this.samplers=null,this.arrayBuffer=null,this.cameras=[],this.lights=[],this.programs={},this.defines=t,this.resize=r}setScene(e){this.scene=e}setGl(e){Ee=e}setCamera(e){this.camera=e}setLight(e){this.light=e}setCanvas(e){this.canvas=e}getBuffer(){return Promise.all(this.scene.bin.map((e=>{if("string"==typeof e){if(/base64/.test(e)){const t=e.indexOf(de)+de.length,r=e.substring(t),n=window.atob(r),i=new ArrayBuffer(n.length),s=new Uint8Array(i);for(let e=0;e<n.length;e++)s[e]=n.charCodeAt(e);return i}return ce(`${this.host}${e}`)}return Promise.resolve(e)}))).then((e=>{this.arrayBuffer=e}))}createProgramWebGPU(e){let t;const r=e.map((e=>`${e.name}${e.value??1}`)).join("");if(this.programs[r])t=this.programs[r];else{const n=e.map((e=>`#define ${e.name} ${e.value??1}\n`)).join("");t=[ue.replace(/\n/,`\n${n}`),fe.replace(/\n/,`\n${n}`)],this.programs[r]=t}return t}createProgram(e){let t;const r=e.map((e=>`${e.name}${e.value??1}`)).join("");if(this.programs[r])t=this.programs[r];else{const n=e.map((e=>`#define ${e.name} ${e.value??1}\n`)).join("");t=U(ue.replace(/\n/,`\n${n}`),fe.replace(/\n/,`\n${n}`)),this.programs[r]=t}return t}buildPrim(e,t,r,n,i){const s=this.json.materials&&this.json.materials[i.material];this.json.extensions&&this.json.extensions.EXT_lights_image_based&&this.defines.push({name:"SPHERICAL_HARMONICS",value:Math.ceil(Math.log(this.json.extensions.EXT_lights_image_based.lights[0].specularImageSize)*Math.LOG2E)+10}),this.json.extensionsUsed&&this.json.extensionsUsed.includes("KHR_texture_basisu")&&this.defines.push({name:"BASISU"});const o=[...this.defines],a=new V(s,this.textures,o,this.lights);void 0!==r&&o.push({name:"JOINTNUMBER",value:this.skins[r].jointNames.length}),void 0===i.indices&&void 0===i.attributes.TANGENT||o.push({name:"TANGENT"}),void 0===i.attributes.TEXCOORD_1&&void 0===i.attributes.TEXCOORD_2||o.push({name:"MULTIUV"}),i.attributes.COLOR_0&&o.push({name:"COLOR"});const c=void 0!==r?new B(t,e):new C(t,e),l=new Te(this.json,this.arrayBuffer,n,this.draco,i);if(l.attributes.COLOR_0&&l.attributes.COLOR_0.constructor!==Float32Array&&o.push({name:"COLOR_255"}),void 0===i.attributes.TANGENT&&o.push({name:"USERIGHTHANDEDSYSTEM"}),i.extensions&&i.extensions.KHR_materials_variants){const e=i.extensions.KHR_materials_variants.mappings.map((e=>({...e,m:new V(this.json.materials[e.material],this.textures,[...o],this.lights)})));c.setVariants(e)}return c.setMode(i.mode),c.setMaterial(a),c.setGeometry(l),c.setDefines(a.defines),c instanceof B&&(c.skin=r),c.updateMatrix(),c.calculateBounding(),c}buildNode(e,t){const r=this.json.nodes[t];let n;if(void 0!==r.camera){const i=Object.assign({zoom:1,aspect:this.canvas?this.canvas.offsetWidth/this.canvas.offsetHeight:1},this.json.cameras[r.camera]);Re.__update?Re.__update("camera",i,t,e):this.camera=new P(i,t,e),n=this.camera;const s=S(n.props);n.setProjection(s),this.cameras.push(n)}else if(r.extensions&&r.extensions.KHR_lights_punctual){const i=this.json.extensions.KHR_lights_punctual.lights[r.extensions.KHR_lights_punctual.light];i.isInitial=!1,Re.__update?Re.__update("light",i,t,e):this.light=new D(i,t,e),n=this.light,this.lights.push(n)}else n=void 0!==r.isBone?new L(t,e):new f(t,e);r.translation||r.rotation||r.scale?n.setPosition(r.translation,r.rotation,r.scale):r.matrix&&n.setMatrix(r.matrix),n.updateMatrix(),n.id=r.name,e.children.push(n),e=n,void 0!==r.mesh&&e.children.push(...this.json.meshes[r.mesh].primitives.map(this.buildPrim.bind(this,e,this.json.meshes[r.mesh].name,r.skin,this.json.meshes[r.mesh].weights))),r.children&&r.children.length&&r.children.forEach(this.buildNode.bind(this,e))}calculateFov(e){const t=new a;N(this.scene,(e=>{e instanceof C&&t.expand(e.geometry.boundingSphere)}));const r=t.getSize();if(e){const e=(new o).add(t.min).add(t.max).scale(.5),r=new i;r.translate(e.x,e.y,e.z),r.invert(),this.scene.matrixWorld.multiply(r),N(this.scene,(e=>{e instanceof f&&e.updateMatrix()}))}this.cameras.forEach((e=>{e.modelSize=r})),this.resize()}async buildMesh(){this.json.extensionsUsed&&this.json.extensionsUsed.includes("KHR_draco_mesh_compression")&&(this.draco=await new Promise((e=>{const t={onModuleLoaded(t){le=t,e(le)}};r.e(681).then(r.t.bind(r,55,23)).then((e=>e.default(t)))}))),this.json.extensions&&this.json.extensions.KHR_materials_variants&&(this.scene.variants=this.json.extensions.KHR_materials_variants.variants),this.json.scenes[void 0!==this.json.scene?this.json.scene:0].nodes.forEach((e=>{this.json.nodes[e].extensions&&this.buildNode(this.scene,e)})),0===this.lights.length&&this.light&&this.lights.push(this.light),this.json.scenes[void 0!==this.json.scene?this.json.scene:0].nodes.forEach((e=>{this.json.nodes[e].children&&this.json.nodes[e].children.length&&!this.json.nodes[e].extensions&&this.buildNode(this.scene,e),void 0!==this.json.nodes[e].mesh&&this.buildNode(this.scene,e),void 0!==this.json.nodes[e].camera&&this.buildNode(this.scene,e)})),N(this.scene,(e=>{e instanceof C&&(e.material.alpha?this.scene.transparentChildren.push(e):this.scene.opaqueChildren.push(e),this.scene.meshes.push(e))})),this.scene.opaqueChildren.sort(((e,t)=>e.distance-t.distance)),this.scene.transparentChildren.sort(((e,t)=>e.distance-t.distance))}buildAnimation(){if(!this.json.animations)return!0;for(const e of this.json.animations){const t=[];for(const r of e.channels){const n=0,i=e.samplers[r.sampler];if(i){const{target:s}=r,o=s.node,a=void 0!==e.parameters?e.parameters[i.input]:i.input,c=void 0!==e.parameters?e.parameters[i.output]:i.output,l=this.json.accessors[a],h=this.json.accessors[c],u=this.json.bufferViews[l.bufferView],m=this.json.bufferViews[h.bufferView],T=F(this.arrayBuffer[u.buffer],l.componentType,M(u.byteOffset,l.byteOffset),p(l.type)*l.count),E=F(this.arrayBuffer[m.buffer],h.componentType,M(m.byteOffset,h.byteOffset),p(h.type)*h.count),d=[];N(this.scene,(e=>{e.name===o&&("weights"===s.path&&e instanceof f?d.push(...e.children):d.push(e))}));let R=_(s.path)||d[0].geometry.targets.length;"CUBICSPLINE"===i.interpolation&&(R*=3);const A=[];for(let e=0;e<T.length;e++){const t=T[e],r=E.slice(e*R,(e+1)*R);A.push({time:t,value:O(r)})}A.length>=2&&d.length&&t.push({duration:Math.max(A[A.length-1].time,n),stoped:!1,meshes:d,type:s.path,name:`${d[0].name}.${s.path}`,keys:A,interpolation:i.interpolation})}}this.tracks.push(t)}}buildSkin(){if(!this.json.skins)return!0;for(const e of this.json.skins){const t=this.json.accessors[e.inverseBindMatrices],r=this.json.bufferViews[t.bufferView],n=F(this.arrayBuffer[r.buffer],t.componentType,M(r.byteOffset,t.byteOffset),p(t.type)*t.count),s={jointNames:e.joints,inverseBindMatrices:n,bones:[],boneInverses:[]};let o=0;for(const e of s.jointNames){this.json.nodes[e].isBone=!0;const t=s.inverseBindMatrices,r=(new i).set(t.slice(16*o,16*(o+1)));s.boneInverses.push(r),o++}this.skins.push(s)}}getJson(){return/glb/.test(this.url)?ce(this.url).then((e=>{const t=new TextDecoder("utf-8"),[r]=new Uint32Array(e,12,1),n=new Uint8Array(e,20,r),i=JSON.parse(t.decode(n)),[s]=new Uint32Array(e,20+r,1),o=e.slice(28+r,28+r+s);this.json=i,this.scene.bin.push(o)})):(e=this.url,"undefined"!=typeof window?window.fetch(e).then((e=>e.json())):new Promise((t=>{oe.readFile(e,"utf8",((e,r)=>{if(e)throw e;t(JSON.parse(r))}))}))).then((e=>{for(const t in e.buffers)this.scene.bin.push(e.buffers[t].uri);return this.json=e,!0}));var e}createSamplers(){const e=this.json.samplers||[{}];this.samplers=e.map((e=>{const t=Ee.createSampler();return Ee.samplerParameteri(t,Ee.TEXTURE_MIN_FILTER,e.minFilter||Ee.NEAREST_MIPMAP_LINEAR),Ee.samplerParameteri(t,Ee.TEXTURE_MAG_FILTER,e.magFilter||Ee.LINEAR),Ee.samplerParameteri(t,Ee.TEXTURE_WRAP_S,e.wrapS||Ee.REPEAT),Ee.samplerParameteri(t,Ee.TEXTURE_WRAP_T,e.wrapT||Ee.REPEAT),t}))}createSamplersWebGPU(e){function t(e){return{9729:"linear",9728:"nearest",10497:"repeat",33648:"mirror-repeat",33071:"clamp-to-edge"}[e]}const r=this.json.samplers||[{}];this.samplers=r.map((r=>e.device.createSampler({magFilter:t(r.minFilter)||"linear",minFilter:t(r.magFilter)||"linear",addressModeU:t(r.wrapS)||"repeat",addressModeV:t(r.wrapT)||"repeat",addressModeW:t(r.wrapS)||"repeat"})))}createTexturesWebGPU(e){this.createTextures(this.handleTextureLoadedWebGPU.bind(this,e))}createTexturesWebGL(){this.createTextures(this.handleTextureLoaded.bind(this))}createTextures(e){this.scene.meshes.forEach((t=>{const r=[t.material,...t.variants.map((e=>e.m))],n=["baseColorTexture","metallicRoughnessTexture","emissiveTexture","normalTexture","occlusionTexture","clearcoatTexture","clearcoatRoughnessTexture","clearcoatNormalTexture","sheenColorTexture","sheenRoughnessTexture","transmissionTexture","specularTexture","specularColorTexture","thicknessTexture","iridescenceThicknessTexture"],i=["baseColorTexture","sheenColorTexture","emissiveTexture",t.defines.find((e=>"SPECULARGLOSSINESSMAP"===e.name))&&"metallicRoughnessTexture"];for(let t=0;t<n.length;t++)for(const s of r){const r=n[t],o=s[r];o&&(i.find((e=>e===r))&&(o.srgb=!0),s[r]=e(o))}}))}async initTextures(e){if(!this.json.textures)return!0;const t={};let n=!1;this.json.textures.forEach((e=>{e.extensions&&e.extensions.KHR_texture_basisu&&(n=!0);const r=e.extensions&&e.extensions.KHR_texture_basisu?e.extensions.KHR_texture_basisu.source:e.source,i=String(e.sampler)+String(r);t[i]=e,t[i].name=i,e.name=i})),n&&((await r.e(164).then(r.t.bind(r,308,23))).default({preinitializedWebGLContext:Ee}).then((e=>{const t={astcSupported:Ee.getExtension("WEBGL_compressed_texture_astc"),etc1Supported:Ee.getExtension("WEBGL_compressed_texture_etc1"),etc2Supported:Ee.getExtension("WEBGL_compressed_texture_etc"),dxtSupported:Ee.getExtension("WEBGL_compressed_texture_s3tc"),bptcSupported:Ee.getExtension("EXT_texture_compression_bptc"),pvrtcSupported:Ee.getExtension("WEBGL_compressed_texture_pvrtc")||Ee.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc")};window.LIBKTX=e,window.LIBKTX.transcoderConfig=t,window.LIBKTX.GL.makeContextCurrent(window.LIBKTX.GL.registerContext(Ee,{majorVersion:2}))})),await new Promise((e=>setTimeout(e,1e3))));const i=Object.values(t).map((t=>{const r=t.extensions&&t.extensions.KHR_texture_basisu?t.extensions.KHR_texture_basisu.source:t.source,n=this.json.images[r];return function(e,t,{bufferView:r,mimeType:n,uri:i},{url:s,name:o},a){return"undefined"!=typeof window?new Promise(((c,l)=>{if("image/ktx2"===n)window.fetch(s).then((e=>e.arrayBuffer())).then((e=>{c({sampler:a,mimeType:n,name:o,image:ae(e)})}));else{const h=new Image;if(h.onload=()=>{e?createImageBitmap(h).then((e=>{c({sampler:a,name:o,bitmap:e})})):c({sampler:a,name:o,image:h})},h.onerror=e=>{l(new Error("Cant load texture"))},h.crossOrigin="anonymous",void 0!==r){const e=t.json.bufferViews[r],i=new Uint8Array(t.arrayBuffer[e.buffer],e.byteOffset,e.byteLength),s=new Blob([i],{type:n});h.src=URL.createObjectURL(s)}else/base64/.test(i)?h.src=i:h.src=s}})):new Promise((e=>{oe.readFile(s,((t,r)=>{if(t)throw t;e({sampler:a,url:s,name:o,image:new Uint8Array(r).buffer})}))}))}(e,this,n,{url:`${this.host}${n.uri}`,name:t.name},t.sampler)}));return Promise.all(i).then((e=>(this.textures=this.json.textures.map((t=>e.find((e=>e.name===t.name)))),!0)))}handleTextureLoadedWebGPU(e,{bitmap:t,sampler:r}){const{device:n}=e,i=this.samplers[void 0!==r?r:0],s=n.createTexture({size:[t.width,t.height,1],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return n.queue.copyExternalImageToTexture({source:t},{texture:s,mipLevel:0,origin:{x:0,y:0,z:0}},{width:t.width,height:t.height,depthOrArrayLayers:1}),s.sampler=i,s}handleTextureLoaded({image:e,name:t,mimeType:r,sampler:n,srgb:i}){const s=this.samplers[void 0!==n?n:0];if(r)return e.sampler=s,e;const o=Ee.createTexture();return o.name=t,o.image=e.src.substr(e.src.lastIndexOf("/")),o.sampler=s,Ee.activeTexture(Ee.TEXTURE31),Ee.bindTexture(Ee.TEXTURE_2D,o),Ee.pixelStorei(Ee.UNPACK_COLORSPACE_CONVERSION_WEBGL,Ee.NONE),Ee.texImage2D(Ee.TEXTURE_2D,0,i?Ee.SRGB8_ALPHA8:Ee.RGBA,Ee.RGBA,Ee.UNSIGNED_BYTE,e),Ee.generateMipmap(Ee.TEXTURE_2D),o}async getEnv(){if(this.json.extensions&&this.json.extensions.EXT_lights_image_based){const[e]=this.json.extensions.EXT_lights_image_based.lights;return e.specularImages=e.specularImages.map((e=>e.map((e=>{const t=this.json.images[e],r=this.json.bufferViews[t.bufferView],{buffer:n,byteLength:i,byteOffset:s}=r,o=new Uint8Array(this.arrayBuffer[n],s,i),a=new Blob([o],{type:t.mimeType}),c=window.URL.createObjectURL(a),l=new Image;return l.src=c,l})))),await new Promise((e=>setTimeout(e,200))),e}}}const pe="#version 300 es\r\nprecision highp float;\r\n\r\nin vec2 uv;\r\nout vec4 color;\r\n\r\nuniform vec2 denom;\r\nuniform sampler2D uTexture;\r\n\r\nconst float weight[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);\r\n\r\nvoid main() {             \r\n    vec2 offset = 1.0 / vec2(textureSize(uTexture, 0));\r\n    vec3 result = texture(uTexture, uv).rgb * weight[0];\r\n\r\n    for (int i = 1; i < 5; ++i) {\r\n        result += texture(uTexture, uv + denom * (offset * float(i))).rgb * weight[i];\r\n        result += texture(uTexture, uv - denom * (offset * float(i))).rgb * weight[i];\r\n    }\r\n\r\n    color = vec4(result, 1.0);\r\n}\r\n";let _e,Ae,ge,xe,Fe;class ve extends H{setGL(e){xe=e}preProcessing(e){xe.clear(xe.COLOR_BUFFER_BIT|xe.DEPTH_BUFFER_BIT),e.renderScene({isprerefraction:!0}),xe.bindFramebuffer(xe.FRAMEBUFFER,null),xe.activeTexture(xe[`TEXTURE${this.texture.index}`]),xe.bindTexture(xe.TEXTURE_2D,this.texture),xe.generateMipmap(xe.TEXTURE_2D)}buildScreenBuffer(e){return this.texture=e.createDefaultTexture(),xe.generateMipmap(xe.TEXTURE_2D),xe.bindFramebuffer(xe.FRAMEBUFFER,e.preframebuffer),xe.framebufferTexture2D(xe.FRAMEBUFFER,xe.COLOR_ATTACHMENT0,xe.TEXTURE_2D,this.texture,0),xe.bindFramebuffer(xe.FRAMEBUFFER,null),{name:"REFRACTION"}}attachUniform(){}postProcessing(){}}const Ue={bloom:class extends H{setGL(e){Ae=e}attachUniform(e){Ae.uniform1i(Ae.getUniformLocation(e,"bloom"),this.blurTexture.index)}postProcessing(e){Ae.bindFramebuffer(Ae.FRAMEBUFFER,this.framebuffer),Ae.useProgram(this.bloorProgram),Ae.framebufferTexture2D(Ae.FRAMEBUFFER,Ae.COLOR_ATTACHMENT0,Ae.TEXTURE_2D,this.hdrTexture,0),Ae.uniform1i(Ae.getUniformLocation(this.bloorProgram,"diff"),e.screenTexture.index),Ae.drawArrays(Ae.TRIANGLE_STRIP,0,4),Ae.useProgram(this.program),Ae.viewport(0,0,this.width/2,this.height/2),this.renderBlur(this.hdrTexture,this.program),this.renderBlur(this.blurTexture,this.program),this.renderBlur(this.blurTexture,this.program),this.renderBlur(this.blurTexture,this.program),this.renderBlur(this.blurTexture,this.program),Ae.bindFramebuffer(Ae.FRAMEBUFFER,null),Ae.viewport(0,0,this.width,this.height)}buildScreenBuffer(e){return this.framebuffer=Ae.createFramebuffer(),Ae.bindFramebuffer(Ae.FRAMEBUFFER,this.framebuffer),this.tempBlurTexture=e.createDefaultTexture(2),this.blurTexture=e.createDefaultTexture(2),this.hdrTexture=e.createByteTexture(),Ae.bindFramebuffer(Ae.FRAMEBUFFER,null),this.program=U(Q,pe),this.bloorProgram=U(Q,"#version 300 es\r\nprecision highp float;\r\n\r\nin vec2 uv;\r\nout vec4 color;\r\n\r\nuniform sampler2D diff;\r\n\r\nconst vec3 hdrColor = vec3(0.2126, 0.7152, 0.0722);\r\nconst float brightnessThreshold = 0.8;\r\n\r\nvoid main() {\r\n    vec3 c = texture(diff, uv).rgb;\r\n    float brightness = dot(c, hdrColor);\r\n    if (brightness > brightnessThreshold) {\r\n        color = vec4(c, 1.0);\r\n    } else {\r\n        color = vec4(0.0, 0.0, 0.0, 1.0);\r\n    }\r\n}\r\n"),{name:"BLOOM"}}renderBlur(e,t){Ae.framebufferTexture2D(Ae.FRAMEBUFFER,Ae.COLOR_ATTACHMENT0,Ae.TEXTURE_2D,this.tempBlurTexture,0),Ae.clearColor(...d),Ae.clear(Ae.COLOR_BUFFER_BIT|Ae.DEPTH_BUFFER_BIT|Ae.STENSIL_BUFFER_BIT),Ae.uniform1i(Ae.getUniformLocation(t,"uTexture"),e.index),Ae.uniform2f(Ae.getUniformLocation(t,"denom"),1,0),Ae.drawArrays(Ae.TRIANGLE_STRIP,0,4),Ae.framebufferTexture2D(Ae.FRAMEBUFFER,Ae.COLOR_ATTACHMENT0,Ae.TEXTURE_2D,this.blurTexture,0),Ae.uniform1i(Ae.getUniformLocation(t,"uTexture"),this.tempBlurTexture.index),Ae.uniform2f(Ae.getUniformLocation(t,"denom"),0,1),Ae.drawArrays(Ae.TRIANGLE_STRIP,0,4)}preProcessing(){}},ssao:class extends H{constructor(){super(),this.scale=2}setGL(e){_e=e}attachUniform(e){_e.uniform1i(_e.getUniformLocation(e,"ssao"),this.ssaoTexture.index)}postProcessing(e){_e.bindFramebuffer(_e.FRAMEBUFFER,this.framebuffer),_e.framebufferTexture2D(_e.FRAMEBUFFER,_e.COLOR_ATTACHMENT0,_e.TEXTURE_2D,this.ssaoTexture,0),_e.clearColor(...d),_e.clear(_e.COLOR_BUFFER_BIT|_e.DEPTH_BUFFER_BIT),_e.useProgram(this.ssaoProgram);const t=this.camera.props.perspective||this.camera.props.orthographic;_e.uniform1i(_e.getUniformLocation(this.ssaoProgram,"normBuff"),e.normalTexture.index),_e.uniform1i(_e.getUniformLocation(this.ssaoProgram,"depthBuff"),e.depthTexture.index),_e.uniform1i(_e.getUniformLocation(this.ssaoProgram,"noice"),this.noice.index),_e.uniform2f(_e.getUniformLocation(this.ssaoProgram,"noiseScale"),this.width/this.scale/4,this.height/this.scale/4),_e.uniform1f(_e.getUniformLocation(this.ssaoProgram,"zFar"),t.zfar),_e.uniform1f(_e.getUniformLocation(this.ssaoProgram,"zNear"),t.znear),_e.uniform1f(_e.getUniformLocation(this.ssaoProgram,"bias"),.03*Math.sqrt(this.camera.modelSize)),_e.uniformMatrix4fv(_e.getUniformLocation(this.ssaoProgram,"proj"),!1,this.camera.projection.elements),_e.uniformMatrix4fv(_e.getUniformLocation(this.ssaoProgram,"view"),!1,this.camera.matrixWorldInvert.elements),_e.uniformMatrix4fv(_e.getUniformLocation(this.ssaoProgram,"projI"),!1,(new i).setInverseOf(this.camera.projection).elements),_e.uniform3fv(_e.getUniformLocation(this.ssaoProgram,"kernels"),this.kernels),_e.viewport(0,0,this.width/this.scale,this.height/this.scale),_e.drawArrays(_e.TRIANGLE_STRIP,0,4),_e.framebufferTexture2D(_e.FRAMEBUFFER,_e.COLOR_ATTACHMENT0,_e.TEXTURE_2D,this.ssaoBlurTexture,0),_e.clear(_e.COLOR_BUFFER_BIT|_e.DEPTH_BUFFER_BIT),_e.useProgram(this.ssaoBlurProgram),_e.uniform1i(_e.getUniformLocation(this.ssaoBlurProgram,"uTexture"),this.ssaoTexture.index),_e.uniform2f(_e.getUniformLocation(this.ssaoBlurProgram,"denom"),1,0),_e.drawArrays(_e.TRIANGLE_STRIP,0,4),_e.framebufferTexture2D(_e.FRAMEBUFFER,_e.COLOR_ATTACHMENT0,_e.TEXTURE_2D,this.ssaoTexture,0),_e.uniform1i(_e.getUniformLocation(this.ssaoBlurProgram,"uTexture"),this.ssaoBlurTexture.index),_e.uniform2f(_e.getUniformLocation(this.ssaoBlurProgram,"denom"),0,1),_e.drawArrays(_e.TRIANGLE_STRIP,0,4),_e.bindFramebuffer(_e.FRAMEBUFFER,null),_e.viewport(0,0,this.width,this.height)}buildScreenBuffer(e){return this.framebuffer=_e.createFramebuffer(),_e.bindFramebuffer(_e.FRAMEBUFFER,this.framebuffer),this.ssaoTexture=e.createOneChannelTexture(this.scale),this.ssaoBlurTexture=e.createOneChannelTexture(this.scale),_e.framebufferTexture2D(_e.FRAMEBUFFER,_e.COLOR_ATTACHMENT0,_e.TEXTURE_2D,this.ssaoTexture,0),this.ssaoProgram=U(Q,"#version 300 es\nprecision highp float;\n\nin vec2 uv;\nout float color;\n\nconst int kernelSize = 32;\nconst float power = 5.0;\n\nuniform sampler2D normBuff;\nuniform sampler2D depthBuff;\nuniform sampler2D noice;\nuniform vec2 noiseScale;\nuniform vec3 kernels[kernelSize];\nuniform mat4 proj;\nuniform mat4 projI;\nuniform mat4 view;\nuniform float zFar;\nuniform float zNear;\nuniform float bias;\n\nvec3 getPositionFromDepth(float depth) {\n\tvec4 clipSpaceLocation = vec4(0.0);\n\tclipSpaceLocation.xy = uv * 2.0 - 1.0;\n\tclipSpaceLocation.z = depth * 2.0 - 1.0;;\n\tclipSpaceLocation.w = 1.0;\n\tvec4 homogenousLocation = projI * clipSpaceLocation;\n\thomogenousLocation.xyz = homogenousLocation.xyz / homogenousLocation.w;\n\treturn homogenousLocation.xyz;\n}\n\nvoid main() {\n\tfloat depth = texture(depthBuff, uv).x;\n\tif ((2.0 * zNear) / (zFar + zNear - depth * (zFar - zNear)) > 0.99) {\n\t\tdiscard;\n\t}\n\n\tfloat radius = bias * 2.0;\n\tvec3 pos = getPositionFromDepth(depth);\n\tvec3 normal = normalize(vec3(view * texture(normBuff, uv)));\n\tvec3 rvec = normalize(texture(noice, uv * noiseScale).xyz);\n\n\tvec3 tangent = normalize(rvec - normal * dot(rvec, normal));\n\tvec3 bitangent = cross(tangent, normal);\n\tmat3 rotate = mat3(tangent, bitangent, normal);\n\n\tfloat occlusion  = 0.0;\n\tfor (int i = 0; i < kernelSize; i++) {\n\t\tvec3 samplePos = rotate * kernels[i];\n\t\tsamplePos = pos + samplePos * radius;\n\n\t\tvec4 shift = proj * vec4(samplePos, 1.0);\n\t\tshift.xy /= shift.w;\n\t\tshift.xy = shift.xy * 0.5 + 0.5;\n\n\t\tfloat sampleDepth = getPositionFromDepth(texture(depthBuff, shift.xy).r).z;\n\n\t\tfloat distanceCheck = smoothstep(0.0, 1.0, radius / abs(pos.z - sampleDepth));\n\t\tocclusion  += (sampleDepth >= samplePos.z + bias ? 1.0 : 0.0) * distanceCheck;\n\t}\n\n\tocclusion = 1.0 - (occlusion / float(kernelSize));\n\tcolor = pow(occlusion, power);\n}\n"),this.ssaoBlurProgram=U(Q,pe),this.buildNoice(e),this.buildKernels(),_e.bindFramebuffer(_e.FRAMEBUFFER,null),{name:"SSAO"}}buildNoice(e){const t=new Float32Array(48);for(let e=0;e<16;e++){const r=new o([2*R(0,1)-1,2*R(0,1)-1,.1]);t[3*e]=r.elements[0],t[3*e+1]=r.elements[1],t[3*e+2]=r.elements[2]}this.noice=e.createNoiceTexture(4,t)}buildKernels(){const e=new Array(32);for(let t=0;t<e.length;t++){e[t]=new o([2*R(0,1)-1,2*R(0,1)-1,R(0,1)]),e[t].normalize(),e[t].scale(R(0,1));let r=t/e.length;r=.1+r*r*.9,e[t].scale(r)}this.kernels=new Float32Array(3*e.length);let t=0;for(const r of e)this.kernels.set(r.elements,3*t),t++}preProcessing(){}},shadow:class extends H{setGL(e){ge=e}preProcessing(e){ge.clear(ge.COLOR_BUFFER_BIT|ge.DEPTH_BUFFER_BIT),e.renderScene({isprepender:!0})}buildScreenBuffer(){return{name:"SHADOW"}}attachUniform(){}postProcessing(){}},light:Y,refraction:ve};class be{constructor(e,t){this.renderScene=t,this.postprocessors=e.map((e=>new Ue[e]))}add(e){const t=new Ue[e];t.setGL(Fe),this.postprocessors.push(t)}setCamera(e){this.camera=e,this.postprocessors.forEach((t=>{t.setCamera(e)}))}setLight(e){this.postprocessors.forEach((t=>{t.light=e}))}setGl(e){e&&(Fe=e,this.MSAA=Fe.getParameter(Fe.MAX_SAMPLES),this.postprocessors.forEach((e=>{e.setGL(Fe)})),this.fakeDepth=this.createNoiceTexture(1,new Float32Array([1,1,0])))}setCanvas(e){this.canvas=e,this.postprocessors.forEach((t=>{t.setCanvas(e)}))}get width(){return this.canvas.offsetWidth*devicePixelRatio}get height(){return this.canvas.offsetHeight*devicePixelRatio}bindPrePass(){Fe.bindFramebuffer(Fe.FRAMEBUFFER,this.preframebuffer)}bindPostPass(){Fe.bindFramebuffer(Fe.FRAMEBUFFER,this.renderframebuffer)}preProcessing(){this.postprocessors.forEach((e=>e.preProcessing(this)))}postProcessing(){Fe.bindFramebuffer(Fe.READ_FRAMEBUFFER,this.renderframebuffer),Fe.bindFramebuffer(Fe.DRAW_FRAMEBUFFER,this.framebuffer),Fe.readBuffer(Fe.COLOR_ATTACHMENT0),Fe.drawBuffers([Fe.COLOR_ATTACHMENT0]),Fe.blitFramebuffer(0,0,this.width,this.height,0,0,this.width,this.height,Fe.COLOR_BUFFER_BIT,Fe.NEAREST),Fe.readBuffer(Fe.COLOR_ATTACHMENT1),Fe.drawBuffers([Fe.NONE,Fe.COLOR_ATTACHMENT1]),Fe.blitFramebuffer(0,0,this.width,this.height,0,0,this.width,this.height,Fe.COLOR_BUFFER_BIT,Fe.NEAREST),Fe.blitFramebuffer(0,0,this.width,this.height,0,0,this.width,this.height,Fe.DEPTH_BUFFER_BIT,Fe.NEAREST),Fe.bindVertexArray(this.VAO),this.postprocessors.forEach((e=>e.postProcessing(this))),Fe.bindFramebuffer(Fe.FRAMEBUFFER,null),Fe.useProgram(this.program),this.postprocessors.forEach((e=>{e.attachUniform(this.program)})),Fe.uniform1i(Fe.getUniformLocation(this.program,"original"),this.screenTexture.index),Fe.uniform1i(Fe.getUniformLocation(this.program,"normal"),this.normalTexture.index),Fe.uniform1i(Fe.getUniformLocation(this.program,"depth"),this.depthTexture.index),Fe.uniform1i(Fe.getUniformLocation(this.program,"preDepth"),this.preDepthTexture.index),Fe.drawArrays(Fe.TRIANGLE_STRIP,0,4)}createByteTexture(){const e=b();return Fe.texParameteri(Fe.TEXTURE_2D,Fe.TEXTURE_MAG_FILTER,Fe.NEAREST),Fe.texParameteri(Fe.TEXTURE_2D,Fe.TEXTURE_MIN_FILTER,Fe.NEAREST),Fe.texImage2D(Fe.TEXTURE_2D,0,Fe.RGBA,this.width,this.height,0,Fe.RGBA,Fe.UNSIGNED_BYTE,null),e}createDefaultTexture(e=1){const t=b();return Fe.texParameteri(Fe.TEXTURE_2D,Fe.TEXTURE_MAG_FILTER,Fe.LINEAR),Fe.texParameteri(Fe.TEXTURE_2D,Fe.TEXTURE_MIN_FILTER,Fe.LINEAR_MIPMAP_LINEAR),Fe.texImage2D(Fe.TEXTURE_2D,0,Fe.RGBA16F,this.width/e,this.height/e,0,Fe.RGBA,Fe.FLOAT,null),t}createOneChannelTexture(e=1){const t=b();return Fe.texParameteri(Fe.TEXTURE_2D,Fe.TEXTURE_MAG_FILTER,Fe.LINEAR),Fe.texParameteri(Fe.TEXTURE_2D,Fe.TEXTURE_MIN_FILTER,Fe.LINEAR),Fe.texImage2D(Fe.TEXTURE_2D,0,Fe.R8,this.width/e,this.height/e,0,Fe.RED,Fe.UNSIGNED_BYTE,null),t}createDepthTexture(){const e=b();return Fe.texParameteri(Fe.TEXTURE_2D,Fe.TEXTURE_MAG_FILTER,Fe.NEAREST),Fe.texParameteri(Fe.TEXTURE_2D,Fe.TEXTURE_MIN_FILTER,Fe.NEAREST),Fe.texImage2D(Fe.TEXTURE_2D,0,Fe.DEPTH_COMPONENT24,this.width,this.height,0,Fe.DEPTH_COMPONENT,Fe.UNSIGNED_INT,null),e}createNoiceTexture(e,t){const r=b();return Fe.texParameteri(Fe.TEXTURE_2D,Fe.TEXTURE_MAG_FILTER,Fe.NEAREST),Fe.texParameteri(Fe.TEXTURE_2D,Fe.TEXTURE_MIN_FILTER,Fe.NEAREST),Fe.texParameteri(Fe.TEXTURE_2D,Fe.TEXTURE_WRAP_S,Fe.REPEAT),Fe.texParameteri(Fe.TEXTURE_2D,Fe.TEXTURE_WRAP_T,Fe.REPEAT),Fe.texImage2D(Fe.TEXTURE_2D,0,Fe.RGB16F,e,e,0,Fe.RGB,Fe.FLOAT,t),r}buildScreenBuffer(){if(0===this.postprocessors.length)return!0;this.VAO=Fe.createVertexArray(),Fe.bindVertexArray(this.VAO);const e=Fe.createBuffer();Fe.bindBuffer(Fe.ARRAY_BUFFER,e),Fe.bufferData(Fe.ARRAY_BUFFER,new Float32Array(z),Fe.STATIC_DRAW),Fe.enableVertexAttribArray(0),Fe.vertexAttribPointer(0,2,Fe.FLOAT,!1,0,0),Fe.bindVertexArray(null);const t=Fe.createRenderbuffer();Fe.bindRenderbuffer(Fe.RENDERBUFFER,t),Fe.renderbufferStorageMultisample(Fe.RENDERBUFFER,this.MSAA,Fe.RGBA16F,this.width,this.height);const r=Fe.createRenderbuffer();Fe.bindRenderbuffer(Fe.RENDERBUFFER,r),Fe.renderbufferStorageMultisample(Fe.RENDERBUFFER,this.MSAA,Fe.RGBA16F,this.width,this.height);const n=Fe.createRenderbuffer();Fe.bindRenderbuffer(Fe.RENDERBUFFER,n),Fe.renderbufferStorageMultisample(Fe.RENDERBUFFER,this.MSAA,Fe.DEPTH_COMPONENT24,this.width,this.height),this.renderframebuffer=Fe.createFramebuffer(),Fe.bindFramebuffer(Fe.FRAMEBUFFER,this.renderframebuffer),Fe.framebufferRenderbuffer(Fe.FRAMEBUFFER,Fe.COLOR_ATTACHMENT0,Fe.RENDERBUFFER,t),Fe.framebufferRenderbuffer(Fe.FRAMEBUFFER,Fe.COLOR_ATTACHMENT1,Fe.RENDERBUFFER,r),Fe.framebufferRenderbuffer(Fe.FRAMEBUFFER,Fe.DEPTH_ATTACHMENT,Fe.RENDERBUFFER,n),Fe.drawBuffers([Fe.COLOR_ATTACHMENT0,Fe.COLOR_ATTACHMENT1]),this.framebuffer=Fe.createFramebuffer(),Fe.bindFramebuffer(Fe.FRAMEBUFFER,this.framebuffer),this.screenTexture=this.createDefaultTexture(),this.normalTexture=this.createDefaultTexture(),this.depthTexture=this.createDepthTexture(),Fe.framebufferTexture2D(Fe.FRAMEBUFFER,Fe.COLOR_ATTACHMENT0,Fe.TEXTURE_2D,this.screenTexture,0),Fe.framebufferTexture2D(Fe.FRAMEBUFFER,Fe.COLOR_ATTACHMENT1,Fe.TEXTURE_2D,this.normalTexture,0),Fe.framebufferTexture2D(Fe.FRAMEBUFFER,Fe.DEPTH_ATTACHMENT,Fe.TEXTURE_2D,this.depthTexture,0),Fe.drawBuffers([Fe.COLOR_ATTACHMENT0,Fe.COLOR_ATTACHMENT1]),Fe.bindFramebuffer(Fe.FRAMEBUFFER,null),this.preframebuffer=Fe.createFramebuffer(),Fe.bindFramebuffer(Fe.FRAMEBUFFER,this.preframebuffer),this.preDepthTexture=this.createDepthTexture(),Fe.framebufferTexture2D(Fe.FRAMEBUFFER,Fe.DEPTH_ATTACHMENT,Fe.TEXTURE_2D,this.preDepthTexture,0),Fe.bindFramebuffer(Fe.FRAMEBUFFER,null);const i=this.postprocessors.map((e=>e.buildScreenBuffer(this))).map((e=>`#define ${e.name} ${e.value||1}\n`)).join("");this.program=U(Q.replace(/\n/,`\n${i}`),"#version 300 es\r\nprecision highp float;\r\n\r\nin vec2 uv;\r\nout vec4 color;\r\n\r\nuniform sampler2D original;\r\nuniform sampler2D position;\r\nuniform sampler2D normal;\r\nuniform sampler2D ssao;\r\nuniform sampler2D bloom;\r\nuniform sampler2D depth;\r\nuniform sampler2D preDepth;\r\nuniform sampler2D light;\r\n\r\nconst float gamma = 2.2;\r\n\r\nvoid main() {\r\n    vec3 c = texture(original, uv).rgb;\r\n    #ifdef BLOOM\r\n        c += texture(bloom, uv).rgb;\r\n    #endif\r\n    #ifdef SSAO\r\n        c *= texture(ssao, uv).r;\r\n    #endif\r\n    #ifdef LIGHT\r\n        c += texture(light, uv).r;\r\n    #endif\r\n\r\n    c.rgb = c.rgb / (c.rgb + vec3(1.0));\r\n    c.rgb = pow(c.rgb, vec3(1.0 / gamma));\r\n\r\n    color = vec4(c, 1.0);\r\n}\r\n".replace(/\n/,`\n${i}`))}clear(){console.error("implement")}}function Ne(e,t,r){this.x=e,this.y=t,this.z=r}Ne.prototype.dot2=function(e,t){return this.x*e+this.y*t},Ne.prototype.dot3=function(e,t,r){return this.x*e+this.y*t+this.z*r};var Ie=[new Ne(1,1,0),new Ne(-1,1,0),new Ne(1,-1,0),new Ne(-1,-1,0),new Ne(1,0,1),new Ne(-1,0,1),new Ne(1,0,-1),new Ne(-1,0,-1),new Ne(0,1,1),new Ne(0,-1,1),new Ne(0,1,-1),new Ne(0,-1,-1)],Se=[151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180],Me=new Array(512),Oe=new Array(512);function Ce(e){return e*e*e*(e*(6*e-15)+10)}function Be(e,t,r){return(1-r)*e+r*t}function Le(e,t,r){var n=Math.floor(e),i=Math.floor(t),s=Math.floor(r);e-=n,t-=i,r-=s;var o=Oe[(n&=255)+Me[(i&=255)+Me[s&=255]]].dot3(e,t,r),a=Oe[n+Me[i+Me[s+1]]].dot3(e,t,r-1),c=Oe[n+Me[i+1+Me[s]]].dot3(e,t-1,r),l=Oe[n+Me[i+1+Me[s+1]]].dot3(e,t-1,r-1),h=Oe[n+1+Me[i+Me[s]]].dot3(e-1,t,r),u=Oe[n+1+Me[i+Me[s+1]]].dot3(e-1,t,r-1),f=Oe[n+1+Me[i+1+Me[s]]].dot3(e-1,t-1,r),m=Oe[n+1+Me[i+1+Me[s+1]]].dot3(e-1,t-1,r-1),T=Ce(e),E=Ce(t),d=Ce(r);return Be(Be(Be(o,h,T),Be(a,u,T),d),Be(Be(c,f,T),Be(l,m,T),d),E)}let Pe;!function(e){e>0&&e<1&&(e*=65536),(e=Math.floor(e))<256&&(e|=e<<8);for(var t=0;t<256;t++){var r;r=1&t?Se[t]^255&e:Se[t]^e>>8&255,Me[t]=Me[t+256]=r,Oe[t]=Oe[t+256]=Ie[r%12]}}(0),Math.sqrt(3),Math.sqrt(3);const De=1e3;class ye{constructor(e){this.getLight=e}setGl(e){Pe=e}setCamera(e){this.camera=e}build(){this.currentSourceIdx=0;const e=Pe.createProgram();v(Pe.VERTEX_SHADER,"#version 300 es\r\nprecision highp float;\r\nprecision highp sampler3D;\r\n\r\nlayout(location = 0) in vec3 a_position;\r\nlayout(location = 1) in vec3 a_velocity;\r\nlayout(location = 2) in float a_spawntime;\r\nlayout(location = 3) in float a_lifetime;\r\n\r\nout vec3 v_position;\r\nout vec3 v_velocity;\r\nout float v_spawntime;\r\nout float v_lifetime;\r\n\r\nuniform float u_time;\r\nuniform sampler3D noize;\r\nuniform float count;\r\n\r\nfloat rand(vec3 co) {\r\n    return texture(noize, co).r;\r\n}\r\n\r\nvec3 snoiseVec3( vec3 x ) {\r\n  float s  = rand(vec3( x ));\r\n  float s1 = rand(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));\r\n  float s2 = rand(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));\r\n  vec3 c = vec3( s , s1 , s2 );\r\n  return c;\r\n}\r\n\r\nvec3 curlNoise( vec3 p ) {\r\n  const float e = .1;\r\n  vec3 dx = vec3( e   , 0.0 , 0.0 );\r\n  vec3 dy = vec3( 0.0 , e   , 0.0 );\r\n  vec3 dz = vec3( 0.0 , 0.0 , e   );\r\n\r\n  vec3 p_x0 = snoiseVec3( p - dx );\r\n  vec3 p_x1 = snoiseVec3( p + dx );\r\n  vec3 p_y0 = snoiseVec3( p - dy );\r\n  vec3 p_y1 = snoiseVec3( p + dy );\r\n  vec3 p_z0 = snoiseVec3( p - dz );\r\n  vec3 p_z1 = snoiseVec3( p + dz );\r\n\r\n  float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;\r\n  float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;\r\n  float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;\r\n\r\n  const float divisor = 1.0 / ( 2.0 * e );\r\n  return normalize( vec3( x , y , z ) * divisor );\r\n}\r\n\r\nconst float lifetime = 15000.0;\r\nconst vec3 center = vec3(0.5, 0.5, 0.5);\r\nfloat acceleration = 2.0;\r\n\r\nvoid main() {\r\n    if (a_spawntime == 0.0 || (u_time - a_spawntime) > a_lifetime) {\r\n        float x = float(gl_InstanceID) / count;\r\n        float t = u_time/1000.0 * x;\r\n        v_position = center - vec3(\r\n            rand(vec3(x, x, t)),\r\n            rand(vec3(1.0 - x, 1.0 - x, t)),\r\n            rand(vec3(x, 0.5, t))\r\n        );\r\n        v_velocity = center- vec3(\r\n            rand(vec3(x, x, t)),\r\n            rand(vec3(1.0 - x, 1.0 - x, t)),\r\n            rand(vec3(x, 0.5, t))\r\n        );\r\n        v_spawntime = u_time;\r\n        v_lifetime = rand(vec3(x, 0.5, t)) * lifetime;\r\n    } else {\r\n        vec3 curlVelocity = curlNoise(a_position) - a_velocity;\r\n        v_velocity = a_velocity + 0.01 * curlVelocity;\r\n        v_position = a_position + 0.01 * v_velocity * acceleration;\r\n        v_spawntime = a_spawntime;\r\n        v_lifetime = a_lifetime;\r\n    }\r\n}\r\n",e),v(Pe.FRAGMENT_SHADER,"#version 300 es\r\nprecision highp float;\r\n\r\nlayout (location = 0) out vec4 color;\r\n\r\nvoid main() {\r\n    color = vec4(1.0, 1.0, 1.0, 1.0);\r\n}\r\n",e),Pe.transformFeedbackVaryings(e,["v_position","v_velocity","v_spawntime","v_lifetime"],Pe.SEPARATE_ATTRIBS),Pe.linkProgram(e),this.program=e;const t=U("#version 300 es\r\nprecision highp float;\r\nprecision highp sampler3D;\r\n\r\nlayout(location = 0) in vec3 a_position;\r\nlayout(location = 1) in vec3 a_velocity;\r\nlayout(location = 2) in float a_spawntime;\r\nlayout(location = 3) in float a_lifetime;\r\nout float depth;\r\n\r\nuniform sampler2D light;\r\nuniform mat4 MVPMatrix;\r\nuniform float u_time;\r\n\r\nout float alpha;\r\n\r\nvoid main() {\r\n    gl_PointSize = 2.0;\r\n    vec4 point = vec4(a_position, 1.0);\r\n    vec2 uv = (point.xy / point.w) * 0.5 + 0.5;\r\n    float life = a_lifetime - (u_time - a_spawntime);\r\n    alpha = 1.0;\r\n    if (life < 1000.0) {\r\n        alpha = life / 1000.0;\r\n    }\r\n    depth = texture(light, uv).r;\r\n    gl_Position = point;\r\n}\r\n","#version 300 es\r\nprecision highp float;\r\n\r\nlayout (location = 0) out vec4 color;\r\nin float depth;\r\nin float alpha;\r\n\r\nvoid main() {\r\n    //color = vec4(0.0, 0.0, 0.8, 1.0) * texture( image, gl_PointCoord );\r\n    if (depth < 0.05) {\r\n        discard;\r\n    }\r\n    color = vec4(1.0, 1.0, 1.0, alpha);\r\n}\r\n");this.program2=t;const r=[Pe.createVertexArray(),Pe.createVertexArray()],n=[Pe.createTransformFeedback(),Pe.createTransformFeedback()];this.VAO=r,this.TFO=n;for(const e of[0,1]){Pe.bindVertexArray(r[e]);const t=[];{const e=new Float32Array(3e3);for(let t=0;t<De;t++)e[3*t]=0,e[3*t+1]=0,e[3*t+2]=0;const r=Pe.createBuffer();Pe.bindBuffer(Pe.ARRAY_BUFFER,r),Pe.bufferData(Pe.ARRAY_BUFFER,e,Pe.STREAM_COPY),Pe.enableVertexAttribArray(0),Pe.vertexAttribPointer(0,3,Pe.FLOAT,!1,0,0),Pe.vertexAttribDivisor(0,1),t.push(r)}{const e=new Float32Array(3e3);for(let t=0;t<De;t++)e[3*t]=0,e[3*t+1]=0,e[3*t+2]=0;const r=Pe.createBuffer();Pe.bindBuffer(Pe.ARRAY_BUFFER,r),Pe.bufferData(Pe.ARRAY_BUFFER,e,Pe.STREAM_COPY),Pe.enableVertexAttribArray(1),Pe.vertexAttribPointer(1,3,Pe.FLOAT,!1,0,0),Pe.vertexAttribDivisor(1,1),t.push(r)}{const e=new Float32Array(1e3);for(let t=0;t<De;t++)e[2*t]=0;const r=Pe.createBuffer();Pe.bindBuffer(Pe.ARRAY_BUFFER,r),Pe.bufferData(Pe.ARRAY_BUFFER,e,Pe.STREAM_COPY),Pe.enableVertexAttribArray(2),Pe.vertexAttribPointer(2,1,Pe.FLOAT,!1,0,0),Pe.vertexAttribDivisor(2,1),t.push(r)}{const e=new Float32Array(1e3);for(let t=0;t<De;t++)e[2*t]=0;const r=Pe.createBuffer();Pe.bindBuffer(Pe.ARRAY_BUFFER,r),Pe.bufferData(Pe.ARRAY_BUFFER,e,Pe.STREAM_COPY),Pe.enableVertexAttribArray(3),Pe.vertexAttribPointer(3,1,Pe.FLOAT,!1,0,0),Pe.vertexAttribDivisor(3,1),t.push(r)}Pe.bindBuffer(Pe.ARRAY_BUFFER,null),Pe.bindTransformFeedback(Pe.TRANSFORM_FEEDBACK,n[e]);let i=0;for(const e of t)Pe.bindBufferBase(Pe.TRANSFORM_FEEDBACK_BUFFER,i,e),i++}const i=128,s=new Uint8Array(2097152);for(let e=0;e<i;++e)for(let t=0;t<i;++t)for(let r=0;r<i;++r){let n=Le(r/8,t/8,e/8);n=128*(1+n),s[r+t*i+e*i*i]=n}this.texture3d=b(Pe.TEXTURE_3D),Pe.texParameteri(Pe.TEXTURE_3D,Pe.TEXTURE_BASE_LEVEL,0),Pe.texParameteri(Pe.TEXTURE_3D,Pe.TEXTURE_MAX_LEVEL,Math.log2(i)),Pe.texParameteri(Pe.TEXTURE_3D,Pe.TEXTURE_MIN_FILTER,Pe.LINEAR_MIPMAP_LINEAR),Pe.texParameteri(Pe.TEXTURE_3D,Pe.TEXTURE_MAG_FILTER,Pe.LINEAR),Pe.texImage3D(Pe.TEXTURE_3D,0,Pe.R8,i,i,i,0,Pe.RED,Pe.UNSIGNED_BYTE,s),Pe.generateMipmap(Pe.TEXTURE_3D)}draw(e){Pe.enable(Pe.BLEND),Pe.blendFunc(Pe.SRC_ALPHA,Pe.ONE_MINUS_SRC_ALPHA);const t=(this.currentSourceIdx+1)%2;Pe.useProgram(this.program),Pe.bindVertexArray(this.VAO[this.currentSourceIdx]),Pe.bindTransformFeedback(Pe.TRANSFORM_FEEDBACK,this.TFO[t]);const r=new i;r.multiply(this.camera.projection),r.multiply(this.camera.matrixWorldInvert),Pe.uniform1f(Pe.getUniformLocation(this.program,"u_time"),e+5e3),Pe.uniform1f(Pe.getUniformLocation(this.program,"count"),De),Pe.uniform1i(Pe.getUniformLocation(this.program,"noize"),this.texture3d.index),Pe.enable(Pe.RASTERIZER_DISCARD),Pe.beginTransformFeedback(Pe.POINTS),Pe.drawArraysInstanced(Pe.POINTS,0,1,De),Pe.endTransformFeedback(),Pe.disable(Pe.RASTERIZER_DISCARD),Pe.bindTransformFeedback(Pe.TRANSFORM_FEEDBACK,null),Pe.bindBuffer(Pe.TRANSFORM_FEEDBACK_BUFFER,null);const n=Pe.fenceSync(Pe.SYNC_GPU_COMMANDS_COMPLETE,0);Pe.waitSync(n,0,Pe.TIMEOUT_IGNORED),Pe.deleteSync(n),Pe.useProgram(this.program2),Pe.bindVertexArray(this.VAO[t]),Pe.uniform1f(Pe.getUniformLocation(this.program2,"u_time"),e+5e3),Pe.uniformMatrix4fv(Pe.getUniformLocation(this.program2,"MVPMatrix"),!1,r.elements),Pe.uniform1i(Pe.getUniformLocation(this.program2,"light"),this.getLight()),Pe.drawArraysInstanced(Pe.POINTS,0,1,De),Pe.disable(Pe.BLEND),this.currentSourceIdx=(this.currentSourceIdx+1)%2}}let we;class Ge{constructor(e,t,r=[],i="env",s="pbr"){if(this.renderState={},this.isIBL=!0,this.isDefaultLight=!0,!e||!t)throw new Error("Url or Canvas not found");this.canvas=t,this.processors=r;const o=[];0===this.processors.length&&o.push({name:"TONE"}),this.processors.some((e=>"shadow"===e))&&o.push({name:"SHADOWMAP"}),"pbr"===s&&o.push({name:"USE_PBR"}),this.ioc=new n,this.ioc.register("env",se,["camera","canvas","gl"],i),this.ioc.register("camera",P,[],{type:"perspective",isInitial:!0,zoom:1,aspect:this.canvas.offsetWidth/this.canvas.offsetHeight,perspective:{yfov:60*Math.PI/180}},"perspective"),this.ioc.register("canvas",t),this.ioc.register("scene",u),this.ioc.register("light",D,[],{type:"directional",intensity:5,color:[1,1,1],isInitial:!0,spot:{}}),this.ioc.register("pp",be,["light","camera","canvas","gl"],this.processors,this.renderScene.bind(this)),this.ioc.register("parser",Re,["scene","light","camera","canvas","gl"],e,o,this.resize.bind(this)),this.ioc.register("particles",ye,["camera","gl"],(()=>this.PP.postprocessors.find((e=>e instanceof Y)).texture.index)),this.ioc.register("renderer",K,["gl","parser","pp","scene","camera","particles","env"],this.getState.bind(this)),this.events=new q(t,this.redraw.bind(this))}get renderer(){return this.ioc.get("renderer")}get scene(){return this.ioc.get("scene")}get camera(){return this.ioc.get("camera")}get light(){return this.ioc.get("light")}get env(){return this.ioc.get("env")}get PP(){return this.ioc.get("pp")}get Particles(){return this.ioc.get("particles")}get parse(){return this.ioc.get("parser")}setVariant(e){this.scene.meshes.forEach((t=>{e&&t.variants.length&&(t.material=t.variants.find((t=>t.variants.includes(Number(e)))).m)})),this.renderer.reflow=!0,this.renderer.needUpdateView=!0,this.renderer.needUpdateProjection=!0}async init(e){await this.parse.getJson(),this.glInit(),await this.parse.getBuffer(),await this.parse.initTextures(!1),this.parse.buildSkin(),await this.parse.buildMesh(),this.parse.createSamplers(),this.parse.createTexturesWebGL(),0===this.parse.cameras.length&&this.parse.cameras.push(this.camera),this.parse.calculateFov(this.parse.cameras[0].props.isInitial);const t=h(this.camera.getViewProjMatrix()),r=await this.parse.getEnv();await this.env.createEnvironmentBuffer(r);const n=this.parse.json.extensionsUsed&&this.parse.json.extensionsUsed.includes("KHR_materials_transmission");this.scene.meshes.forEach((e=>{e.geometry.createGeometryForWebGl(we);const r=this.parse.createProgram(e.defines);if([e.material,...e.variants.map((e=>e.m))].forEach((e=>e.createUniforms(this.camera,this.parse.lights))),[e.material,...e.variants.map((e=>e.m))].forEach((e=>e.updateUniformsWebgl(we,r))),e.material.setHarmonics(this.env.updateUniform(we,r)),e.setProgram(r),e.geometry.createUniforms(e.matrixWorld,this.camera,this.light),e.geometry.updateUniformsWebGl(we,e.program),e.visible=e.isVisible(t),e instanceof B){for(const t of this.parse.skins[e.skin].jointNames)N(this.scene,this.buildBones.bind(this,t,this.parse.skins[e.skin]));e.setSkin(we,this.parse.skins[e.skin])}})),n&&this.PP.add("refraction"),this.PP.postprocessors.some((e=>e instanceof Y))&&this.Particles.build(),this.PP.postprocessors.length>0&&this.PP.buildScreenBuffer(),this.resize(null),this.parse.buildAnimation(),this.initialDraw(),e()}buildBones(e,t,r){r.name===e&&t.bones.push(r)}renderScene(e){this.renderState=e,this.renderer.renderScene(),this.renderState={}}redraw(e,t,r){"zoom"===e&&(this.camera.zoom(t),this.renderer.needUpdateView=!0,this.renderer.needUpdateProjection=!0),"rotate"===e&&(this.camera.rotate(t,r),this.renderer.needUpdateView=!0),"pan"===e&&(this.camera.pan(t,r,this.canvas.offsetWidth,this.canvas.offsetHeight),this.renderer.needUpdateView=!0),"resize"===e&&(this.resize(e),this.renderer.needUpdateProjection=!0),this.renderer.reflow=!0}resize(e){this.camera.props.aspect=this.canvas.offsetWidth/this.canvas.offsetHeight,this.canvas.width=this.canvas.offsetWidth*devicePixelRatio,this.canvas.height=this.canvas.offsetHeight*devicePixelRatio,we.viewport(0,0,this.canvas.offsetWidth*devicePixelRatio,this.canvas.offsetHeight*devicePixelRatio);const t=this.camera.modelSize;this.camera.props.isInitial&&this.camera.setZ(t),(this.light.isInitial||"directional"===this.light.type)&&this.light.setZ(t),this.renderer.needUpdateView=!0,this.camera.updateNF(),e&&(this.PP.clear(),this.PP.buildScreenBuffer())}glInit(){if(we=this.canvas.getContext("webgl2",{antialias:0===this.processors.length}),this.gl=we,!we)throw new Error("Webgl 2 doesnt support");T=we,this.ioc.register("gl",we),we.getExtension("EXT_color_buffer_float"),we.getExtension("OES_texture_float_linear")}draw(){this.renderer.reflow=!0}initialDraw(){we.clearColor(...d),we.enable(we.DEPTH_TEST),we.enable(we.CULL_FACE),this.renderer.reflow=!0,this.renderer.render()}getState(){const e=this.PP.postprocessors.find((e=>e instanceof ve));return{isIBL:this.isIBL,isDefaultLight:this.isDefaultLight,renderState:this.renderState,lights:this.parse.lights,camera:this.camera,light:this.light,preDepthTexture:this.PP.preDepthTexture,colorTexture:e?e.texture:this.PP.fakeDepth,fakeDepth:this.PP.fakeDepth,needUpdateView:this.renderer.needUpdateView,needUpdateProjection:this.renderer.needUpdateProjection,irradiancemap:this.env.irradiancemap,Sheen_E:this.env.Sheen_E,prefilterMap:this.env.prefilterMap,charlieMap:this.env.charlieMap,brdfLUT:this.env.brdfLUTTexture}}}},870:e=>{e.exports=function(e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));var t=0,r=e.length;function n(){var n="";do{var i=e[t];if(10==i){++t;break}n+=String.fromCharCode(i)}while(++t<r);return n}for(var i=0,s=0,o=1,a=!1,c=0;c<20;c++){var l,h=n();if(l=h.match("#\\?RADIANCE"));else if(l=h.match("FORMAT=32-bit_rle_rgbe"))a=!0;else if(l=h.match("EXPOSURE=\\s*([0-9]*[.][0-9]*)"))o=Number(l[1]);else if(l=h.match("#.*"));else if(l=h.match("-Y ([0-9]+) \\+X ([0-9]+)")){s=Number(l[1]),i=Number(l[2]);break}}if(!a)throw new Error("File is not run length encoded!");var u=new Uint8Array(i*s*4);!function(e,t,r,n,i,s){var o,a,c,l=new Array(4),h=null,u=new Array(2),f=e.length;function m(t){var r=0;do{t[r++]=e[n]}while(++n<f&&r<t.length);return r}function T(t,r,i){var s=0;do{t[r+s++]=e[n]}while(++n<f&&s<i);return s}function E(e,t,r,n){var i=4*n,s=T(t,r,i);if(s<i)throw new Error("Error reading raw pixels: got "+s+" bytes, expected "+i)}for(;s>0;){if(m(l)<l.length)throw new Error("Error reading bytes: expected "+l.length);if(2!=l[0]||2!=l[1]||0!=(128&l[2]))return t[r++]=l[0],t[r++]=l[1],t[r++]=l[2],t[r++]=l[3],void E(0,t,r,i*s-1);if(((255&l[2])<<8|255&l[3])!=i)throw new Error("Wrong scanline width "+((255&l[2])<<8|255&l[3])+", expected "+i);null==h&&(h=new Array(4*i)),o=0;for(var d=0;d<4;d++)for(a=(d+1)*i;o<a;){if(m(u)<u.length)throw new Error("Error reading 2-byte buffer");if((255&u[0])>128){if(0==(c=(255&u[0])-128)||c>a-o)throw new Error("Bad scanline data");for(;c-- >0;)h[o++]=u[1]}else{if(0==(c=255&u[0])||c>a-o)throw new Error("Bad scanline data");if(h[o++]=u[1],--c>0){if(T(h,o,c)<c)throw new Error("Error reading non-run data");o+=c}}}for(d=0;d<i;d++)t[r+0]=h[d],t[r+1]=h[d+i],t[r+2]=h[d+2*i],t[r+3]=h[d+3*i],r+=4;s--}}(e,u,0,t,i,s);for(var f=new Float32Array(i*s*4),m=0;m<u.length;m+=4){var T=u[m+0]/255,E=u[m+1]/255,d=u[m+2]/255,R=u[m+3],p=Math.pow(2,R-128);T*=p,E*=p,d*=p;var _=m;f[_+0]=T,f[_+1]=E,f[_+2]=d,f[_+3]=1}return{shape:[i,s],exposure:o,gamma:1,data:f}}},358:(e,t,r)=>{"use strict";e.exports=r.p+"assets/Sheen_E.hdr"},993:()=>{}},s={};function o(e){if(s[e])return s[e].exports;var t=s[e]={exports:{}};return i[e].call(t.exports,t,t.exports,o),t.exports}return o.m=i,o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(r,n){if(1&n&&(r=this(r)),8&n)return r;if("object"==typeof r&&r){if(4&n&&r.__esModule)return r;if(16&n&&"function"==typeof r.then)return r}var i=Object.create(null);o.r(i);var s={};e=e||[null,t({}),t([]),t(t)];for(var a=2&n&&r;"object"==typeof a&&!~e.indexOf(a);a=t(a))Object.getOwnPropertyNames(a).forEach((e=>s[e]=()=>r[e]));return s.default=()=>r,o.d(i,s),i},o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.f={},o.e=e=>Promise.all(Object.keys(o.f).reduce(((t,r)=>(o.f[r](e,t),t)),[])),o.u=e=>"libs/"+{164:"libktx",681:"draco3d"}[e]+".js",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r={},n="redcube:",o.l=(e,t,i)=>{if(r[e])r[e].push(t);else{var s,a;if(void 0!==i)for(var c=document.getElementsByTagName("script"),l=0;l<c.length;l++){var h=c[l];if(h.getAttribute("src")==e||h.getAttribute("data-webpack")==n+i){s=h;break}}s||(a=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,o.nc&&s.setAttribute("nonce",o.nc),s.setAttribute("data-webpack",n+i),s.src=e),r[e]=[t];var u=(t,n)=>{s.onerror=s.onload=null,clearTimeout(f);var i=r[e];if(delete r[e],s.parentNode&&s.parentNode.removeChild(s),i&&i.forEach((e=>e(n))),t)return t(n)},f=setTimeout(u.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=u.bind(null,s.onerror),s.onload=u.bind(null,s.onload),a&&document.head.appendChild(s)}},o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e={179:0};o.f.j=(t,r)=>{var n=o.o(e,t)?e[t]:void 0;if(0!==n)if(n)r.push(n[2]);else{var i=new Promise(((r,i)=>{n=e[t]=[r,i]}));r.push(n[2]=i);var s=o.p+o.u(t),a=new Error;o.l(s,(r=>{if(o.o(e,t)&&(0!==(n=e[t])&&(e[t]=void 0),n)){var i=r&&("load"===r.type?"missing":r.type),s=r&&r.target&&r.target.src;a.message="Loading chunk "+t+" failed.\n("+i+": "+s+")",a.name="ChunkLoadError",a.type=i,a.request=s,n[1](a)}}),"chunk-"+t)}};var t=(t,r)=>{for(var n,i,[s,a,c]=r,l=0,h=[];l<s.length;l++)i=s[l],o.o(e,i)&&e[i]&&h.push(e[i][0]),e[i]=0;for(n in a)o.o(a,n)&&(o.m[n]=a[n]);for(c&&c(o),t&&t(r);h.length;)h.shift()()},r=self.webpackChunkredcube=self.webpackChunkredcube||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})(),o(934)})()}));