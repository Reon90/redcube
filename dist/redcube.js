!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("redcube",[],t):"object"==typeof exports?exports.redcube=t():e.redcube=t()}(window,function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=19)}([function(e,t){e.exports="#version 300 es\r\nlayout (location = 0) in vec2 pos;\r\n\r\nout vec2 uv;\r\n\r\nvoid main() {\r\n    uv = pos * 0.5 + 0.5;\r\n    gl_Position = vec4(pos, 0.0, 1.0); \r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nin vec2 uv;\r\nout vec4 color;\r\n\r\nuniform vec2 denom;\r\nuniform sampler2D uTexture;\r\n\r\nconst float weight[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);\r\n\r\nvoid main() {             \r\n    vec2 offset = 1.0 / vec2(textureSize(uTexture, 0));\r\n    vec3 result = texture(uTexture, uv).rgb * weight[0];\r\n\r\n    for (int i = 1; i < 5; ++i) {\r\n        result += texture(uTexture, uv + denom * (offset * float(i))).rgb * weight[i];\r\n        result += texture(uTexture, uv - denom * (offset * float(i))).rgb * weight[i];\r\n    }\r\n\r\n    color = vec4(result, 1.0);\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nlayout (location = 0) in vec3 inPosition;\r\n\r\nuniform mat4 projection;\r\nuniform mat4 view;\r\n\r\nout vec3 outUV;\r\n\r\nvoid main() {\r\n\toutUV = inPosition;\r\n    mat4 rotView = mat4(mat3(view));\r\n    gl_Position = projection * rotView * vec4(inPosition, 1.0);\r\n}\r\n"},function(e,t){var r="#\\?RADIANCE",n="#.*",i="EXPOSURE=\\s*([0-9]*[.][0-9]*)",s="FORMAT=32-bit_rle_rgbe",o="-Y ([0-9]+) \\+X ([0-9]+)";e.exports=function(e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));var t=0,a=e.length,l=10;function c(){var r="";do{var n=e[t];if(n==l){++t;break}r+=String.fromCharCode(n)}while(++t<a);return r}for(var h=0,m=0,u=1,f=!1,d=0;d<20;d++){var p,T=c();if(p=T.match(r));else if(p=T.match(s))f=!0;else if(p=T.match(i))u=Number(p[1]);else if(p=T.match(n));else if(p=T.match(o)){m=Number(p[1]),h=Number(p[2]);break}}if(!f)throw new Error("File is not run length encoded!");var E=new Uint8Array(h*m*4);!function(e,t,r,n,i,s){var o,a,l,c=new Array(4),h=null,m=new Array(2),u=e.length;function f(t){var r=0;do{t[r++]=e[n]}while(++n<u&&r<t.length);return r}function d(t,r,i){var s=0;do{t[r+s++]=e[n]}while(++n<u&&s<i);return s}function p(e,t,r,n){var i=4*n,s=d(t,r,i);if(s<i)throw new Error("Error reading raw pixels: got "+s+" bytes, expected "+i)}for(;s>0;){if(f(c)<c.length)throw new Error("Error reading bytes: expected "+c.length);if(2!=c[0]||2!=c[1]||0!=(128&c[2]))return t[r++]=c[0],t[r++]=c[1],t[r++]=c[2],t[r++]=c[3],void p(0,t,r,i*s-1);if(((255&c[2])<<8|255&c[3])!=i)throw new Error("Wrong scanline width "+((255&c[2])<<8|255&c[3])+", expected "+i);null==h&&(h=new Array(4*i)),o=0;for(var T=0;T<4;T++)for(a=(T+1)*i;o<a;){if(f(m)<m.length)throw new Error("Error reading 2-byte buffer");if((255&m[0])>128){if(0==(l=(255&m[0])-128)||l>a-o)throw new Error("Bad scanline data");for(;l-- >0;)h[o++]=m[1]}else{if(0==(l=255&m[0])||l>a-o)throw new Error("Bad scanline data");if(h[o++]=m[1],--l>0){if(d(h,o,l)<l)throw new Error("Error reading non-run data");o+=l}}}for(T=0;T<i;T++)t[r+0]=h[T],t[r+1]=h[T+i],t[r+2]=h[T+2*i],t[r+3]=h[T+3*i],r+=4;s--}}(e,E,0,t,h,m);for(var g=new Float32Array(h*m*4),R=0;R<E.length;R+=4){var v=E[R+0]/255,b=E[R+1]/255,x=E[R+2]/255,A=E[R+3],F=Math.pow(2,A-128);v*=F,b*=F,x*=F;var _=R;g[_+0]=v,g[_+1]=b,g[_+2]=x,g[_+3]=1}return{shape:[h,m],exposure:u,gamma:1,data:g}}},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nin vec3 outUV;\r\nlayout (location = 0) out vec4 color;\r\n\r\nuniform sampler2D diffuse;\r\n\r\nconst vec2 invAtan = vec2(0.1591, 0.3183);\r\nvec2 SampleSphericalMap(vec3 v) {\r\n    vec2 uv = vec2(atan(v.z, v.x), asin(v.y));\r\n    uv *= invAtan;\r\n    uv += 0.5;\r\n    return uv;\r\n}\r\n\r\nvoid main() {\t\t\r\n    vec2 uv = SampleSphericalMap(normalize(outUV));\r\n    vec3 c = texture(diffuse, uv).rgb;\r\n    \r\n    color = vec4(c, 1.0);\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nin vec3 outUV;\r\nlayout (location = 0) out vec4 color;\r\n\r\nuniform samplerCube environmentMap;\r\n\r\nconst float PI = 3.14159265359;\r\n\r\nvoid main() {\r\n    vec3 N = normalize(outUV);\r\n    vec3 irradiance = vec3(0.0);\r\n\r\n    vec3 up    = vec3(0.0, 1.0, 0.0);\r\n    vec3 right = cross(up, N);\r\n    up         = cross(N, right);\r\n\r\n    float sampleDelta = 0.025;\r\n    float nrSamples = 0.0; \r\n    for(float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta)\r\n    {\r\n        for(float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta)\r\n        {\r\n            // spherical to cartesian (in tangent space)\r\n            vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));\r\n            // tangent space to world\r\n            vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N; \r\n\r\n            irradiance += texture(environmentMap, sampleVec).rgb * cos(theta) * sin(theta);\r\n            nrSamples++;\r\n        }\r\n    }\r\n    irradiance = PI * irradiance * (1.0 / float(nrSamples));\r\n    \r\n    color = vec4(irradiance, 1.0);\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nin vec3 outUV;\r\nlayout (location = 0) out vec4 color;\r\n\r\nuniform samplerCube environmentMap;\r\nuniform float roughness;\r\n\r\nconst float PI = 3.14159265359;\r\n\r\nfloat RadicalInverse_VdC(uint bits) {\r\n    bits = (bits << 16u) | (bits >> 16u);\r\n    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\r\n    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\r\n    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\r\n    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\r\n    return float(bits) * 2.3283064365386963e-10; // / 0x100000000\r\n}\r\n// ----------------------------------------------------------------------------\r\nvec2 Hammersley(uint i, uint N) {\r\n    return vec2(float(i)/float(N), RadicalInverse_VdC(i));\r\n}  \r\nvec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness) {\r\n    float a = roughness*roughness;\r\n\t\r\n    float phi = 2.0 * PI * Xi.x;\r\n    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));\r\n    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);\r\n\t\r\n    // from spherical coordinates to cartesian coordinates\r\n    vec3 H;\r\n    H.x = cos(phi) * sinTheta;\r\n    H.y = sin(phi) * sinTheta;\r\n    H.z = cosTheta;\r\n\t\r\n    // from tangent-space vector to world-space sample vector\r\n    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\r\n    vec3 tangent   = normalize(cross(up, N));\r\n    vec3 bitangent = cross(N, tangent);\r\n\t\r\n    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\r\n    return normalize(sampleVec);\r\n} \r\n\r\nvoid main() {\t\t\r\n    vec3 N = normalize(outUV);    \r\n    vec3 R = N;\r\n    vec3 V = R;\r\n\r\n    const uint SAMPLE_COUNT = 1024u;\r\n    float totalWeight = 0.0;   \r\n    vec3 prefilteredColor = vec3(0.0);     \r\n    for(uint i = 0u; i < SAMPLE_COUNT; ++i) {\r\n        vec2 Xi = Hammersley(i, SAMPLE_COUNT);\r\n        vec3 H  = ImportanceSampleGGX(Xi, N, roughness);\r\n        vec3 L  = normalize(2.0 * dot(V, H) * H - V);\r\n\r\n        float NdotL = max(dot(N, L), 0.0);\r\n        if(NdotL > 0.0) {\r\n            prefilteredColor += texture(environmentMap, L).rgb * NdotL;\r\n            totalWeight      += NdotL;\r\n        }\r\n    }\r\n    prefilteredColor = prefilteredColor / totalWeight;\r\n    \r\n    color = vec4(prefilteredColor, 1.0);\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nin vec2 uv;\r\nlayout (location = 0) out vec2 color;\r\n\r\nconst float PI = 3.14159265359;\r\n\r\nfloat GeometrySchlickGGX(float NdotV, float roughness) {\r\n    float a = roughness;\r\n    float k = (a * a) / 2.0;\r\n\r\n    float nom   = NdotV;\r\n    float denom = NdotV * (1.0 - k) + k;\r\n\r\n    return nom / denom;\r\n}\r\n\r\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {\r\n    float NdotV = max(dot(N, V), 0.0);\r\n    float NdotL = max(dot(N, L), 0.0);\r\n    float ggx2 = GeometrySchlickGGX(NdotV, roughness);\r\n    float ggx1 = GeometrySchlickGGX(NdotL, roughness);\r\n\r\n    return ggx1 * ggx2;\r\n} \r\n\r\nfloat RadicalInverse_VdC(uint bits) {\r\n    bits = (bits << 16u) | (bits >> 16u);\r\n    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\r\n    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\r\n    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\r\n    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\r\n    return float(bits) * 2.3283064365386963e-10; // / 0x100000000\r\n}\r\n\r\nvec2 Hammersley(uint i, uint N) {\r\n    return vec2(float(i)/float(N), RadicalInverse_VdC(i));\r\n}  \r\n\r\nvec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness) {\r\n    float a = roughness*roughness;\r\n\t\r\n    float phi = 2.0 * PI * Xi.x;\r\n    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));\r\n    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);\r\n\t\r\n    // from spherical coordinates to cartesian coordinates\r\n    vec3 H;\r\n    H.x = cos(phi) * sinTheta;\r\n    H.y = sin(phi) * sinTheta;\r\n    H.z = cosTheta;\r\n\t\r\n    // from tangent-space vector to world-space sample vector\r\n    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\r\n    vec3 tangent   = normalize(cross(up, N));\r\n    vec3 bitangent = cross(N, tangent);\r\n\t\r\n    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\r\n    return normalize(sampleVec);\r\n} \r\n\r\nvec2 IntegrateBRDF(float NdotV, float roughness) {\r\n    vec3 V;\r\n    V.x = sqrt(1.0 - NdotV*NdotV);\r\n    V.y = 0.0;\r\n    V.z = NdotV;\r\n\r\n    float A = 0.0;\r\n    float B = 0.0;\r\n\r\n    vec3 N = vec3(0.0, 0.0, 1.0);\r\n\r\n    const uint SAMPLE_COUNT = 1024u;\r\n    for(uint i = 0u; i < SAMPLE_COUNT; ++i) {\r\n        vec2 Xi = Hammersley(i, SAMPLE_COUNT);\r\n        vec3 H  = ImportanceSampleGGX(Xi, N, roughness);\r\n        vec3 L  = normalize(2.0 * dot(V, H) * H - V);\r\n\r\n        float NdotL = max(L.z, 0.0);\r\n        float NdotH = max(H.z, 0.0);\r\n        float VdotH = max(dot(V, H), 0.0);\r\n\r\n        if(NdotL > 0.0) {\r\n            float G = GeometrySmith(N, V, L, roughness);\r\n            float G_Vis = (G * VdotH) / (NdotH * NdotV);\r\n            float Fc = pow(1.0 - VdotH, 5.0);\r\n\r\n            A += (1.0 - Fc) * G_Vis;\r\n            B += Fc * G_Vis;\r\n        }\r\n    }\r\n    A /= float(SAMPLE_COUNT);\r\n    B /= float(SAMPLE_COUNT);\r\n    return vec2(A, B);\r\n}\r\n\r\nvoid main() {\t\t\r\n    vec2 integratedBRDF = IntegrateBRDF(uv.x, uv.y);\r\n    color = integratedBRDF;\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nlayout (location = 0) in vec3 inPosition;\r\nlayout (location = 1) in vec3 inNormal;\r\nlayout (location = 2) in vec2 inUV;\r\nlayout (location = 3) in vec4 inJoint;\r\nlayout (location = 4) in vec4 inWeight;\r\nlayout (location = 5) in vec4 inTangent;\r\n\r\nout vec2 outUV;\r\nout vec3 outPosition;\r\nout vec4 outPositionView;\r\n#ifdef TANGENT\r\n    out mat3 outTBN;\r\n#else\r\n    out vec3 outNormal;\r\n#endif\r\n\r\nuniform Matrices {\r\n    mat4 model;\r\n    mat4 normalMatrix;\r\n    mat4 view;\r\n    mat4 projection;\r\n    mat4 light;\r\n    float isShadow;\r\n};\r\n\r\n#ifdef JOINTNUMBER\r\nuniform Skin {\r\n    mat4 joint[JOINTNUMBER];\r\n};\r\n#endif\r\n\r\nvoid main() {\r\n    #ifdef JOINTNUMBER\r\n        mat4 skin = inWeight.x * joint[int(inJoint.x)];\r\n        skin += inWeight.y * joint[int(inJoint.y)];\r\n        skin += inWeight.z * joint[int(inJoint.z)];\r\n        skin += inWeight.w * joint[int(inJoint.w)];\r\n    #else\r\n        mat4 skin = mat4(1.0);\r\n    #endif\r\n\r\n    outUV = inUV;\r\n    #ifdef TANGENT\r\n        vec3 normalW = normalize(vec3(model * vec4(inNormal.xyz, 0.0)));\r\n        vec3 tangentW = normalize(vec3(model * vec4(inTangent.xyz, 0.0)));\r\n        vec3 bitangentW = cross(normalW, tangentW) * inTangent.w;\r\n        outTBN = mat3(tangentW, bitangentW, normalW);\r\n    #else\r\n        outNormal = normalize(mat3(normalMatrix) * mat3(skin) * inNormal);\r\n    #endif\r\n    outPosition = vec3(model * skin * vec4(inPosition, 1.0));\r\n    outPositionView = projection * light * model * skin * vec4(inPosition, 1.0);\r\n    if (isShadow == 1.0) {\r\n        gl_Position = projection * light * model * skin * vec4(inPosition, 1.0);\r\n    } else {\r\n        gl_Position = projection * view * model * skin * vec4(inPosition, 1.0);\r\n    }\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nin vec2 outUV;\r\nin vec3 outPosition;\r\nin vec4 outPositionView;\r\n#ifdef TANGENT\r\n    in mat3 outTBN;\r\n#else\r\n    in vec3 outNormal;\r\n#endif\r\n\r\nlayout (location = 0) out vec4 color;\r\nlayout (location = 1) out vec3 normalColor;\r\n\r\nuniform Material {\r\n    vec4 baseColorFactor;\r\n    vec3 lightPos;\r\n    vec3 viewPos;\r\n};\r\nuniform sampler2D baseColorTexture;\r\nuniform sampler2D metallicRoughnessTexture;\r\nuniform sampler2D normalTexture;\r\nuniform sampler2D emissiveTexture;\r\nuniform sampler2D occlusionTexture;\r\n\r\nuniform samplerCube prefilterMap;\r\nuniform sampler2D   brdfLUT;  \r\nuniform samplerCube irradianceMap;\r\nuniform sampler2D depthTexture;\r\n\r\nconst float PI = 3.14159265359;\r\nconst float ambientStrength = 0.1;\r\nconst float specularStrength = 2.5;\r\nconst float specularPower = 32.0;\r\nconst vec3 lightColor = vec3(1.0, 1.0, 1.0);\r\nconst vec3 emissiveFactor = vec3(1.0, 1.0, 1.0);\r\nconst float gamma = 2.2;\r\n\r\nfloat ShadowCalculation(vec4 fragPosLightSpace, float bias) {\r\n    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;\r\n    projCoords = projCoords * 0.5 + 0.5;\r\n    float closestDepth = texture(depthTexture, projCoords.xy).r; \r\n    float currentDepth = projCoords.z;\r\n    float shadow = currentDepth - bias > closestDepth ? 0.5 : 0.0;\r\n\r\n    return shadow;\r\n}\r\n\r\nvec3 srgbToLinear(vec4 srgbIn) {\r\n    return pow(srgbIn.rgb, vec3(2.2));\r\n}\r\n\r\nfloat DistributionGGX(vec3 N, vec3 H, float roughness) {\r\n    float a = roughness*roughness;\r\n    float a2 = max(a*a, 0.0001);\r\n    float NdotH = max(dot(N, H), 0.0);\r\n    float NdotH2 = NdotH*NdotH;\r\n\r\n    float nom   = a2;\r\n    float denom = (NdotH2 * (a2 - 1.0) + 1.0);\r\n    denom = PI * denom * denom;\r\n\r\n    return nom / max(denom, 0.0001);\r\n}\r\n\r\nfloat GeometrySchlickGGX(float NdotV, float roughness) {\r\n    float r = (roughness + 1.0);\r\n    float k = (r*r) / 8.0;\r\n\r\n    float nom   = NdotV;\r\n    float denom = NdotV * (1.0 - k) + k;\r\n\r\n    return nom / denom;\r\n}\r\n\r\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {\r\n    float NdotV = max(dot(N, V), 0.0);\r\n    float NdotL = max(dot(N, L), 0.0);\r\n    float ggx2 = GeometrySchlickGGX(NdotV, roughness);\r\n    float ggx1 = GeometrySchlickGGX(NdotL, roughness);\r\n\r\n    return ggx1 * ggx2;\r\n}\r\n\r\nvec3 fresnelSchlick(float cosTheta, vec3 F0) {\r\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\r\n}\r\n\r\nvoid main() {\r\n    #ifdef BASECOLORTEXTURE\r\n        vec3 baseColor = srgbToLinear(texture(baseColorTexture, outUV));\r\n        float alpha = texture(baseColorTexture, outUV).a;\r\n    #else\r\n        vec3 baseColor = baseColorFactor.rgb;\r\n        float alpha = baseColorFactor.a;\r\n    #endif\r\n\r\n    #ifdef OCCLUSIONMAP\r\n        float ao = texture(occlusionTexture, outUV).r;\r\n    #endif\r\n\r\n    #ifdef METALROUGHNESSMAP\r\n        float roughness = texture(metallicRoughnessTexture, outUV).g;\r\n        float metallic = texture(metallicRoughnessTexture, outUV).b;\r\n    #endif\r\n\r\n    #ifdef TANGENT\r\n        #ifdef NORMALMAP\r\n            vec3 n = texture(normalTexture, outUV).rgb;\r\n            n = normalize(outTBN * (2.0 * n - 1.0));\r\n        #else\r\n            vec3 n = outTBN[2].xyz;\r\n        #endif\r\n    #else\r\n        vec3 n = outNormal;\r\n    #endif\r\n\r\n    vec3 viewDir = normalize(viewPos - outPosition);\r\n    vec3 lightDir = normalize(lightPos - outPosition);\r\n    vec3 H = normalize(viewDir + lightDir);\r\n    float distance = length(lightPos - outPosition);\r\n    float attenuation = 1.0 / (distance * distance);\r\n    vec3 radiance = lightColor * 10.0; // lightColor * attenuation\r\n    float shadowBias = max(0.05 * (1.0 - dot(n, lightDir)), 0.005);\r\n    float shadow = 1.0 - ShadowCalculation(outPositionView, shadowBias);\r\n\r\n    #ifdef USE_PBR\r\n        vec3 R = reflect(-viewDir, n);   \r\n        const float MAX_REFLECTION_LOD = 4.0;\r\n        vec3 prefilteredColor = textureLod(prefilterMap, R,  roughness * MAX_REFLECTION_LOD).rgb; \r\n        vec2 envBRDF  = texture(brdfLUT, vec2(max(dot(n, viewDir), 0.0), roughness)).rg;\r\n\r\n        vec3 F0 = vec3(0.04); \r\n        F0 = mix(F0, baseColor, metallic);\r\n\r\n        vec3 light = vec3(0.0);\r\n\r\n        float NDF = DistributionGGX(n, H, roughness);        \r\n        float G = GeometrySmith(n, viewDir, lightDir, roughness);      \r\n        vec3 F = fresnelSchlick(max(dot(H, viewDir), 0.0), F0);       \r\n        \r\n        vec3 kS = F;\r\n        vec3 kD = vec3(1.0) - kS;\r\n        kD *= 1.0 - metallic;     \r\n        \r\n        vec3 nominator = NDF * G * F;\r\n        float denominator = 4.0 * max(dot(n, viewDir), 0.0) * max(dot(n, lightDir), 0.0);\r\n        vec3 specular = nominator / max(denominator, 0.001);  \r\n        specular = prefilteredColor * (specular * envBRDF.x + envBRDF.y);\r\n\r\n        float NdotL = max(dot(n, lightDir), 0.0);\r\n        light += (kD * baseColor / PI + specular) * radiance * NdotL;\r\n\r\n        vec3 irradiance = texture(irradianceMap, n).rgb;\r\n        baseColor = irradiance * baseColor;\r\n\r\n        #ifdef OCCLUSIONMAP\r\n            vec3 ambient = vec3(0.03) * baseColor * ao;\r\n        #else\r\n            vec3 ambient = baseColor;\r\n        #endif\r\n        \r\n        baseColor = ambient + light;\r\n\r\n        #ifdef EMISSIVEMAP\r\n            vec3 emissive = srgbToLinear(texture(emissiveTexture, outUV)) * emissiveFactor;\r\n            baseColor.rgb += emissive;\r\n        #endif\r\n\r\n        baseColor.rgb *= shadow;\r\n   \r\n        color = vec4(baseColor, 1.0);\r\n    #else\r\n        vec3 ambient = ambientStrength * lightColor;\r\n\r\n        float diff = max(dot(n, lightDir), 0.0);\r\n        vec3 diffuse = diff * lightColor;\r\n\r\n        vec3 reflectDir = reflect(-lightDir, n);\r\n        float spec = pow(max(dot(viewDir, reflectDir), 0.0), specularPower);\r\n        vec3 specular = specularStrength * spec * lightColor;\r\n\r\n        color = vec4(baseColor.rgb * (ambient + diffuse + specular) * shadow, alpha);\r\n    #endif\r\n\r\n    #ifdef TONE\r\n        color.rgb = color.rgb / (color.rgb + vec3(1.0));\r\n        color.rgb = pow(color.rgb, vec3(1.0 / gamma));\r\n    #endif\r\n\r\n    normalColor = n;\r\n}\r\n"},function(e,t){e.exports="#version 300 es\nprecision highp float;\n\nin vec2 uv;\nout float color;\n\nconst int kernelSize = 32;\nconst float radius = 2.5;\nconst float bias = 1.0;\nconst float power = 8.0;\n\nuniform sampler2D normBuff;\nuniform sampler2D depthBuff;\nuniform sampler2D noice;\nuniform vec2 noiseScale;\nuniform vec3 kernels[kernelSize];\nuniform mat4 proj;\nuniform mat4 projI;\nuniform float zFar;\nuniform float zNear;\n\nvec3 getPositionFromDepth(float depth) {\n\tvec4 clipSpaceLocation = vec4(0.0);\n\tclipSpaceLocation.xy = uv * 2.0 - 1.0;\n\tclipSpaceLocation.z = depth * 2.0 - 1.0;;\n\tclipSpaceLocation.w = 1.0;\n\tvec4 homogenousLocation = projI * clipSpaceLocation;\n\thomogenousLocation.xyz = homogenousLocation.xyz / homogenousLocation.w;\n\treturn homogenousLocation.xyz;\n}\n\nvoid main() {\n\tfloat depth = texture(depthBuff, uv).x;\n\tif ((2.0 * zNear) / (zFar + zNear - depth * (zFar - zNear)) > 0.99) {\n\t\tdiscard;\n\t}\n\n\tvec3 pos = getPositionFromDepth(depth);\n\tvec3 normal = normalize(texture(normBuff, uv).xyz);\n\tvec3 rvec = normalize(texture(noice, uv * noiseScale).xyz);\n\n\tvec3 tangent = normalize(rvec - normal * dot(rvec, normal));\n\tvec3 bitangent = cross(tangent, normal);\n\tmat3 rotate = mat3(tangent, bitangent, normal);\n\n\tfloat occlusion  = 0.0;\n\tfor (int i = 0; i < kernelSize; i++) {\n\t\tvec3 samplePos = rotate * kernels[i];\n\t\tsamplePos = pos + samplePos * radius;\n\n\t\tvec4 shift = proj * vec4(samplePos, 1.0);\n\t\tshift.xy /= shift.w;\n\t\tshift.xy = shift.xy * 0.5 + 0.5;\n\n\t\tfloat sampleDepth = getPositionFromDepth(texture(depthBuff, shift.xy).r).z;\n\n\t\tfloat distanceCheck = smoothstep(0.0, 1.0, radius / abs(pos.z - sampleDepth));\n\t\tocclusion  += (sampleDepth >= samplePos.z + bias ? 1.0 : 0.0) * distanceCheck;\n\t}\n\n\tocclusion = 1.0 - (occlusion / float(kernelSize));\n\tcolor = pow(occlusion, power);\n}\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nin vec2 uv;\r\nout vec4 color;\r\n\r\nuniform sampler2D diff;\r\n\r\nconst vec3 hdrColor = vec3(0.2126, 0.7152, 0.0722);\r\nconst float brightnessThreshold = 0.8;\r\n\r\nvoid main() {\r\n    vec3 c = texture(diff, uv).rgb;\r\n    float brightness = dot(c, hdrColor);\r\n    if (brightness > brightnessThreshold) {\r\n        color = vec4(c, 1.0);\r\n    } else {\r\n        color = vec4(0.0, 0.0, 0.0, 1.0);\r\n    }\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nin vec2 uv;\r\n// in vec4 tPos1;\r\n// in vec4 tPos2;\r\nin vec4 vPosLight1;\r\nin vec4 vPosLight2;\r\nout float color;\r\n\r\nuniform sampler2D lightTexture;\r\nuniform sampler2D cameraTexture;\r\n\r\nuniform mat4 proj;\r\nuniform mat4 light;\r\nuniform mat4 view;\r\n\r\nconst int samples = 80;\r\n\r\nvoid main() {\r\n    float stp = 1.0/float(samples);\r\n\tfloat k = 0.0;\r\n    float d = 0.0;\r\n\r\n    for (int i = 0; i < samples; i++) {\r\n\r\n        //vec4 vPos = mix(tPos1,tPos2,k);\r\n        vec4 vPosLight = mix(vPosLight1,vPosLight2,k);\r\n        k += stp;\r\n\r\n        vec3 ShadowTexC = (vPosLight.xyz/vPosLight.w) * 0.5 + 0.5;\r\n\r\n        float add = step(texture(lightTexture, ShadowTexC.xy).x, ShadowTexC.z);\r\n        d += add*stp;\r\n\t}\r\n\r\n    color = min((1.0 - d), 0.2);\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nlayout (location = 0) in vec2 pos;\r\n\r\nout vec2 uv;\r\nout vec4 vPosLight1;\r\nout vec4 vPosLight2;\r\n\r\nuniform mat4 proj;\r\nuniform mat4 light;\r\nuniform mat4 Iproj;\r\nuniform mat4 Iview;\r\n\r\nvoid main() {\r\n    vec4 p1 = Iview * Iproj * vec4(pos, -1.0/4.0, 1.0);\r\n    vec4 p2 = Iview * Iproj * vec4(pos, 1.0/4.0, 1.0);\r\n\r\n\tvPosLight1 = proj * light * p1;\r\n    vPosLight2 = proj * light * p2;\r\n\r\n\tuv = pos * 0.5 + 0.5;\r\n\tgl_Position = vec4(pos, 0.0, 1.0);\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nin vec2 uv;\r\nout vec4 color;\r\n\r\nuniform sampler2D original;\r\nuniform sampler2D position;\r\nuniform sampler2D normal;\r\nuniform sampler2D ssao;\r\nuniform sampler2D bloom;\r\nuniform sampler2D depth;\r\nuniform sampler2D preDepth;\r\nuniform sampler2D light;\r\n\r\nconst float gamma = 2.2;\r\n\r\nvoid main() {\r\n    vec3 c = texture(original, uv).rgb;\r\n    #ifdef BLOOM\r\n        c += texture(bloom, uv).rgb;\r\n    #endif\r\n    #ifdef SSAO\r\n        c *= texture(ssao, uv).r;\r\n    #endif\r\n    #ifdef LIGHT\r\n        c += texture(light, uv).r;\r\n    #endif\r\n\r\n    c.rgb = c.rgb / (c.rgb + vec3(1.0));\r\n    c.rgb = pow(c.rgb, vec3(1.0 / gamma));\r\n\r\n    color = vec4(c, 1.0);\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\nprecision highp sampler3D;\r\n\r\nlayout (location = 0) in vec3 inPosition;\r\nout float depth;\r\n\r\nuniform sampler2D light;\r\nuniform mat4 MVPMatrix;\r\n\r\nvoid main() {\r\n    gl_PointSize = 1.0;\r\n    vec4 point = MVPMatrix * vec4(inPosition, 1.0);\r\n    vec2 uv = (point.xy / point.w) * 0.5 + 0.5;\r\n    depth = texture(light, uv).r;\r\n    gl_Position = point;\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nlayout (location = 0) out vec4 color;\r\nin float depth;\r\n\r\nvoid main() {\r\n    //color = vec4(0.0, 0.0, 0.8, 1.0) * texture( image, gl_PointCoord );\r\n    if (depth < 0.05) {\r\n        discard;\r\n    }\r\n    color = vec4(1.0, 1.0, 1.0, 1.0);\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nlayout (location = 0) out vec4 color;\r\n\r\nvoid main() {\r\n    color = vec4(1.0, 1.0, 1.0, 1.0);\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\nprecision highp sampler3D;\r\n\r\nlayout(location = 0) in vec3 a_position;\r\nlayout(location = 1) in vec3 a_velocity;\r\nlayout(location = 2) in float a_spawntime;\r\nlayout(location = 3) in float a_lifetime;\r\n\r\nout vec3 v_position;\r\nout vec3 v_velocity;\r\nout float v_spawntime;\r\nout float v_lifetime;\r\n\r\nuniform float u_time;\r\nuniform sampler3D noize;\r\nuniform float count;\r\n\r\nfloat rand(vec3 co) {\r\n    return texture(noize, co).r;\r\n}\r\n\r\nconst float lifetime = 15000.0;\r\nconst vec3 center = vec3(0.5, 0.5, 0.5);\r\nconst vec3 acceleration = vec3(0.0, 0.0, 0.0);\r\n\r\nvoid main() {\r\n    if (a_spawntime == 0.0 || (u_time - a_spawntime) > a_lifetime) {\r\n        float x = float(gl_InstanceID) / count;\r\n        float t = u_time/1000.0 * x;\r\n        v_position = vec3(\r\n            rand(vec3(x, x, t)),\r\n            rand(vec3(1.0 - x, 1.0 - x, t)),\r\n            rand(vec3(x, 0.5, t))\r\n        ) - center;\r\n        v_velocity = vec3(\r\n            rand(vec3(x, x, t)),\r\n            rand(vec3(1.0 - x, 1.0 - x, t)),\r\n            rand(vec3(x, 0.5, t))\r\n        ) - center;\r\n        v_spawntime = u_time;\r\n        v_lifetime = rand(vec3(x, 0.5, t)) * lifetime;\r\n    } else {\r\n        v_velocity = a_velocity + 0.01 * acceleration;\r\n        v_position = a_position + 0.01 * v_velocity;\r\n        v_spawntime = a_spawntime;\r\n        v_lifetime = a_lifetime;\r\n    }\r\n}\r\n"},function(e,t,r){"use strict";r.r(t);class n{constructor(e){let t,r,n;if(e&&"object"==typeof e&&e.hasOwnProperty("elements")){for(r=e.elements,n=new Float32Array(16),t=0;t<16;++t)n[t]=r[t];this.elements=n}else this.elements=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])}getScaleZ(){const e=this.elements,t=e[8],r=e[9],n=e[10];return Math.sqrt(t*t+r*r+n*n)}set(e){let t,r,n;if((r=e)!==(n=this.elements)){for(t=0;t<16;++t)n[t]=r[t];return this}}multiply(e){return this.concat(e),this}concat({elements:e}){let t,r,n,i,s,o,a,l;if(r=this.elements,n=this.elements,r===(i=e))for(i=new Float32Array(16),t=0;t<16;++t)i[t]=r[t];for(t=0;t<4;t++)s=n[t],o=n[t+4],a=n[t+8],l=n[t+12],r[t]=s*i[0]+o*i[1]+a*i[2]+l*i[3],r[t+4]=s*i[4]+o*i[5]+a*i[6]+l*i[7],r[t+8]=s*i[8]+o*i[9]+a*i[10]+l*i[11],r[t+12]=s*i[12]+o*i[13]+a*i[14]+l*i[15];return this}setInverseOf({elements:e}){let t,r,n,i,s;if(r=e,n=this.elements,(i=new Float32Array(16))[0]=r[5]*r[10]*r[15]-r[5]*r[11]*r[14]-r[9]*r[6]*r[15]+r[9]*r[7]*r[14]+r[13]*r[6]*r[11]-r[13]*r[7]*r[10],i[4]=-r[4]*r[10]*r[15]+r[4]*r[11]*r[14]+r[8]*r[6]*r[15]-r[8]*r[7]*r[14]-r[12]*r[6]*r[11]+r[12]*r[7]*r[10],i[8]=r[4]*r[9]*r[15]-r[4]*r[11]*r[13]-r[8]*r[5]*r[15]+r[8]*r[7]*r[13]+r[12]*r[5]*r[11]-r[12]*r[7]*r[9],i[12]=-r[4]*r[9]*r[14]+r[4]*r[10]*r[13]+r[8]*r[5]*r[14]-r[8]*r[6]*r[13]-r[12]*r[5]*r[10]+r[12]*r[6]*r[9],i[1]=-r[1]*r[10]*r[15]+r[1]*r[11]*r[14]+r[9]*r[2]*r[15]-r[9]*r[3]*r[14]-r[13]*r[2]*r[11]+r[13]*r[3]*r[10],i[5]=r[0]*r[10]*r[15]-r[0]*r[11]*r[14]-r[8]*r[2]*r[15]+r[8]*r[3]*r[14]+r[12]*r[2]*r[11]-r[12]*r[3]*r[10],i[9]=-r[0]*r[9]*r[15]+r[0]*r[11]*r[13]+r[8]*r[1]*r[15]-r[8]*r[3]*r[13]-r[12]*r[1]*r[11]+r[12]*r[3]*r[9],i[13]=r[0]*r[9]*r[14]-r[0]*r[10]*r[13]-r[8]*r[1]*r[14]+r[8]*r[2]*r[13]+r[12]*r[1]*r[10]-r[12]*r[2]*r[9],i[2]=r[1]*r[6]*r[15]-r[1]*r[7]*r[14]-r[5]*r[2]*r[15]+r[5]*r[3]*r[14]+r[13]*r[2]*r[7]-r[13]*r[3]*r[6],i[6]=-r[0]*r[6]*r[15]+r[0]*r[7]*r[14]+r[4]*r[2]*r[15]-r[4]*r[3]*r[14]-r[12]*r[2]*r[7]+r[12]*r[3]*r[6],i[10]=r[0]*r[5]*r[15]-r[0]*r[7]*r[13]-r[4]*r[1]*r[15]+r[4]*r[3]*r[13]+r[12]*r[1]*r[7]-r[12]*r[3]*r[5],i[14]=-r[0]*r[5]*r[14]+r[0]*r[6]*r[13]+r[4]*r[1]*r[14]-r[4]*r[2]*r[13]-r[12]*r[1]*r[6]+r[12]*r[2]*r[5],i[3]=-r[1]*r[6]*r[11]+r[1]*r[7]*r[10]+r[5]*r[2]*r[11]-r[5]*r[3]*r[10]-r[9]*r[2]*r[7]+r[9]*r[3]*r[6],i[7]=r[0]*r[6]*r[11]-r[0]*r[7]*r[10]-r[4]*r[2]*r[11]+r[4]*r[3]*r[10]+r[8]*r[2]*r[7]-r[8]*r[3]*r[6],i[11]=-r[0]*r[5]*r[11]+r[0]*r[7]*r[9]+r[4]*r[1]*r[11]-r[4]*r[3]*r[9]-r[8]*r[1]*r[7]+r[8]*r[3]*r[5],i[15]=r[0]*r[5]*r[10]-r[0]*r[6]*r[9]-r[4]*r[1]*r[10]+r[4]*r[2]*r[9]+r[8]*r[1]*r[6]-r[8]*r[2]*r[5],0===(s=r[0]*i[0]+r[1]*i[4]+r[2]*i[8]+r[3]*i[12]))return this;for(s=1/s,t=0;t<16;t++)n[t]=i[t]*s;return this}invert(){return this.setInverseOf(this)}makeOrthographic(e,t,r,n,i,s){var o=this.elements,a=1/(t-e),l=1/(r-n),c=1/(s-i),h=(t+e)*a,m=(r+n)*l,u=(s+i)*c;return o[0]=2*a,o[4]=0,o[8]=0,o[12]=-h,o[1]=0,o[5]=2*l,o[9]=0,o[13]=-m,o[2]=0,o[6]=0,o[10]=-2*c,o[14]=-u,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this}setOrtho(e,t,r,n){let i,s,o,a;return s=1/e,o=1/t,a=2/(r-n),(i=this.elements)[0]=s,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=o,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=a,i[11]=(n+r)/(r-n),i[12]=0,i[13]=0,i[14]=0,i[15]=1,this}setPerspective(e,t,r,n){let i,s,o,a;if(r===n||0===t)throw"null frustum";if(r<=0)throw"near <= 0";if(n<=0)throw"far <= 0";if(e=Math.PI*e/180/2,0===(o=Math.sin(e)))throw"null frustum";return s=1/(n-r),a=Math.cos(e)/o,(i=this.elements)[0]=a/t,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=a,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=-(n+r)*s,i[11]=-1,i[12]=0,i[13]=0,i[14]=-2*r*n*s,i[15]=0,this}perspective(e,t,r,i){return this.concat((new n).setPerspective(e,t,r,i))}multiplyVector4({elements:e}){const t=this.elements,r=e,n=new s,i=n.elements;return i[0]=r[0]*t[0]+r[1]*t[4]+r[2]*t[8]+r[3]*t[12],i[1]=r[0]*t[1]+r[1]*t[5]+r[2]*t[9]+r[3]*t[13],i[2]=r[0]*t[2]+r[1]*t[6]+r[2]*t[10]+r[3]*t[14],i[3]=r[0]*t[3]+r[1]*t[7]+r[2]*t[11]+r[3]*t[15],n}scale(e){const t=e.elements[0],r=e.elements[1],n=e.elements[2],i=this.elements;return i[0]*=t,i[4]*=r,i[8]*=n,i[1]*=t,i[5]*=r,i[9]*=n,i[2]*=t,i[6]*=r,i[10]*=n,i[3]*=t,i[7]*=r,i[11]*=n,this}setTranslate(e){const t=this.elements,r=e.elements[0],n=e.elements[1],i=e.elements[2];return t[12]=r,t[13]=n,t[14]=i,t[15]=1,this}translate(e,t,r){const n=this.elements;return n[12]+=n[0]*e+n[4]*t+n[8]*r,n[13]+=n[1]*e+n[5]*t+n[9]*r,n[14]+=n[2]*e+n[6]*t+n[10]*r,n[15]+=n[3]*e+n[7]*t+n[11]*r,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],r=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],n=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,r,n))}makeRotationAxis(e,t){const r=this.elements,n=Math.cos(t),i=Math.sin(t),s=1-n,o=e.elements[0],a=e.elements[1],l=e.elements[2],c=s*o,h=s*a;return r[0]=c*o+n,r[1]=c*a-i*l,r[2]=c*l+i*a,r[3]=0,r[4]=c*a+i*l,r[5]=h*a+n,r[6]=h*l-i*o,r[7]=0,r[8]=c*l-i*a,r[9]=h*l+i*o,r[10]=s*l*l+n,r[11]=0,r[15]=1,this}makeRotationFromQuaternion(e){const t=this.elements,r=e[0],n=e[1],i=e[2],s=e[3],o=r+r,a=n+n,l=i+i,c=r*o,h=r*a,m=r*l,u=n*a,f=n*l,d=i*l,p=s*o,T=s*a,E=s*l;return t[0]=1-(u+d),t[4]=h-E,t[8]=m+T,t[1]=h+E,t[5]=1-(c+d),t[9]=f-p,t[2]=m-T,t[6]=f+p,t[10]=1-(c+u),this}transpose(){let e,t;return t=(e=this.elements)[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}}class i{constructor(e){const t=new Float32Array(3);e&&"object"==typeof e&&(t[0]=e[0],t[1]=e[1],t[2]=e[2]),this.elements=t}applyQuaternion({elements:e}){const t=this.elements[0],r=this.elements[1],n=this.elements[2],i=e[0],s=e[1],o=e[2],a=e[3],l=a*t+s*n-o*r,c=a*r+o*t-i*n,h=a*n+i*r-s*t,m=-i*t-s*r-o*n;return this.elements[0]=l*a+m*-i+c*-o-h*-s,this.elements[1]=c*a+m*-s+h*-i-l*-o,this.elements[2]=h*a+m*-o+l*-s-c*-i,this}normalize(){const e=this.elements,t=e[0],r=e[1],n=e[2];let i=Math.sqrt(t*t+r*r+n*n);return i?1==i?this:(i=1/i,e[0]=t*i,e[1]=r*i,e[2]=n*i,this):(e[0]=0,e[1]=0,e[2]=0,this)}add(e){const t=this.elements;return e=e.elements,t[0]=t[0]+e[0],t[1]=t[1]+e[1],t[2]=t[2]+e[2],this}addS(e){const t=this.elements;return t[0]=t[0]+e,t[1]=t[1]+e,t[2]=t[2]+e,this}scale(e){const t=this.elements;return t[0]=t[0]*e,t[1]=t[1]*e,t[2]=t[2]*e,this}distanceToSquared(e,t,r){const n=this.elements[0]-e,i=this.elements[1]-t,s=this.elements[2]-r;return n*n+i*i+s*s}subtract(e){const t=this.elements;return e=e.elements,t[0]=t[0]-e[0],t[1]=t[1]-e[1],t[2]=t[2]-e[2],this}divideScalar(e){return this.scale(1/e)}applyMatrix4({elements:e}){const t=this.elements[0],r=this.elements[1],n=this.elements[2],i=e;this.elements[0]=i[0]*t+i[4]*r+i[8]*n+i[12],this.elements[1]=i[1]*t+i[5]*r+i[9]*n+i[13],this.elements[2]=i[2]*t+i[6]*r+i[10]*n+i[14];const s=i[3]*t+i[7]*r+i[11]*n+i[15];return this.divideScalar(s)}lerp(e,t,r){const n=this.elements,i=e[0],s=e[1],o=e[2];return n[0]=i+r*(t[0]-i),n[1]=s+r*(t[1]-s),n[2]=o+r*(t[2]-o),this}lengthSq(){return this.elements[0]*this.elements[0]+this.elements[1]*this.elements[1]+this.elements[2]*this.elements[2]}multiply({elements:e}){return this.elements[0]*=e[0],this.elements[1]*=e[1],this.elements[2]*=e[2],this}static angle(e,t){const r=new i(e.elements),n=new i(t.elements);r.normalize(),n.normalize();const s=i.dot(r,n);return s>1?0:Math.acos(s)}static cross(e,t){e=e.elements,t=t.elements;const r=e[0],n=e[1],s=e[2],o=t[0],a=t[1],l=t[2],c=new i;return c.elements[0]=n*l-s*a,c.elements[1]=s*o-r*l,c.elements[2]=r*a-n*o,c}static dot(e,t){return e=e.elements,t=t.elements,e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}}class s{constructor(e){const t=new Float32Array(4);e&&"object"==typeof e&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3]),this.elements=t}set(e){const t=this.elements;return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],this}add(e){const t=this.elements;return e=e.elements,t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=t[3]+e[3],this}normalize(){const e=this.elements[0],t=this.elements[1],r=this.elements[2],n=this.elements[3];let i=e*e+t*t+r*r+n*n;return i>0&&(i=1/Math.sqrt(i),this.elements[0]=e*i,this.elements[1]=t*i,this.elements[2]=r*i,this.elements[3]=n*i),this}setFromRotationMatrix({elements:e}){const t=e,r=t[0],n=t[4],i=t[8],s=t[1],o=t[5],a=t[9],l=t[2],c=t[6],h=t[10],m=r+o+h;let u;return m>0?(u=.5/Math.sqrt(m+1),this.elements[3]=.25/u,this.elements[0]=(c-a)*u,this.elements[1]=(i-l)*u,this.elements[2]=(s-n)*u):r>o&&r>h?(u=2*Math.sqrt(1+r-o-h),this.elements[3]=(c-a)/u,this.elements[0]=.25*u,this.elements[1]=(n+s)/u,this.elements[2]=(i+l)/u):o>h?(u=2*Math.sqrt(1+o-r-h),this.elements[3]=(i-l)/u,this.elements[0]=(n+s)/u,this.elements[1]=.25*u,this.elements[2]=(a+c)/u):(u=2*Math.sqrt(1+h-r-o),this.elements[3]=(s-n)/u,this.elements[0]=(i+l)/u,this.elements[1]=(a+c)/u,this.elements[2]=.25*u),this}lerp(e,t,r){const n=this.elements,i=e[0],s=e[1],o=e[2],a=e[3];return n[0]=i+r*(t[0]-i),n[1]=s+r*(t[1]-s),n[2]=o+r*(t[2]-o),n[3]=a+r*(t[3]-a),this}}class o{constructor(e){const t=new Float32Array(2);e&&"object"==typeof e&&(t[0]=e[0],t[1]=e[1]),this.elements=t}subtract(e){const t=this.elements;return e=e.elements,t[0]=t[0]-e[0],t[1]=t[1]-e[1],this}lerp(e,t,r){const n=this.elements,i=e[0],s=e[1];return n[0]=i+r*(t[0]-i),n[1]=s+r*(t[1]-s),this}}function a(e){const t=[new s,new s,new s,new s,new s,new s],r=e.elements;let n=r[0],i=r[1],o=r[2],a=r[3],l=r[4],c=r[5],h=r[6],m=r[7],u=r[8],f=r[9],d=r[10],p=r[11],T=r[12],E=r[13],g=r[14],R=r[15];return t[0].set([a-n,m-l,p-u,R-T]).normalize(),t[1].set([a+n,m+l,p+u,R+T]).normalize(),t[2].set([a+i,m+c,p+f,R+E]).normalize(),t[3].set([a-i,m-c,p-f,R-E]).normalize(),t[4].set([a-o,m-h,p-d,R-g]).normalize(),t[5].set([a+o,m+h,p+d,R+g]).normalize(),t}class l{constructor(e,t){this.uuid=Math.floor(Date.now()*Math.random()),this.name=e,this.children=[],this.matrix=new n,this.matrixWorld=new n,this.parent=t}getPosition(){return new Float32Array([this.matrixWorld.elements[12],this.matrixWorld.elements[13],this.matrixWorld.elements[14]])}setPosition(e,t,r){t&&this.matrix.makeRotationFromQuaternion(t),r&&this.matrix.scale(new i(r)),e&&this.matrix.setTranslate(new i(e))}setMatrix(e){this.matrix.set(e)}setMatrixWorld(e){this.matrixWorld.set(e)}updateMatrix(){const e=new n;e.multiply(this.parent.matrixWorld),e.multiply(this.matrix),this.setMatrixWorld(e.elements)}}class c extends l{constructor(e,t){super(e,t),this.geometry={boundingSphere:{center:new i,radius:null,min:null,max:null},uniformBuffer:null,UBO:null,VAO:null,indicesBuffer:null,attributes:null,targets:null,blend:null,uniforms:null,SKIN:null},this.material={blend:null,uniforms:null,alphaMode:null,UBO:null,pbrMetallicRoughness:null},this.program=null,this.defines=null,this.mode=4}setBlend(e){this.material.blend=e}setMaterial(e){this.material=e,this.material.uniforms={baseColorTexture:null,metallicRoughnessTexture:null,normalTexture:null,occlusionTexture:null,emissiveTexture:null}}draw(e,{camera:t,light:r,preDepthTexture:i,fakeDepth:s,needUpdateView:o,needUpdateProjection:a,irradiancemap:l,prefilterMap:c,brdfLUT:m},u,f){if(e.useProgram(this.program),e.bindVertexArray(this.geometry.VAO),e.bindBufferBase(e.UNIFORM_BUFFER,0,this.geometry.UBO),this.reflow){const t=new n(this.matrixWorld);t.invert().transpose(),this.geometry.uniformBuffer.update(e,"model",this.matrixWorld.elements),this.geometry.uniformBuffer.update(e,"normalMatrix",t.elements)}if(o&&(this.geometry.uniformBuffer.update(e,"view",t.matrixWorldInvert.elements),this.geometry.uniformBuffer.update(e,"light",r.matrixWorldInvert.elements)),a&&this.geometry.uniformBuffer.update(e,"projection",t.projection.elements),this.geometry.uniformBuffer.update(e,"isShadow",new Float32Array([f?1:0])),this instanceof h&&(e.bindBufferBase(e.UNIFORM_BUFFER,2,this.geometry.SKIN),this.bones.some(e=>e.reflow))){const t=this.getJointMatrix(),r=new Float32Array(16*t.length);let n=0;for(const e of t)r.set(e.elements,0+16*n),n++;e.bufferSubData(e.UNIFORM_BUFFER,0,r)}this.material.UBO&&(e.bindBufferBase(e.UNIFORM_BUFFER,1,this.material.UBO),o&&(this.material.uniformBuffer.update(e,"lightPos",r.getPosition()),this.material.uniformBuffer.update(e,"viewPos",t.getPosition()))),e.uniform1i(e.getUniformLocation(this.program,"prefilterMap"),c.index),e.uniform1i(e.getUniformLocation(this.program,"brdfLUT"),m.index),e.uniform1i(e.getUniformLocation(this.program,"irradianceMap"),l.index),e.uniform1i(e.getUniformLocation(this.program,"depthTexture"),u?s.index:i.index),this.material.pbrMetallicRoughness.baseColorTexture&&e.uniform1i(this.material.uniforms.baseColorTexture,this.material.pbrMetallicRoughness.baseColorTexture.index),this.material.pbrMetallicRoughness.metallicRoughnessTexture&&e.uniform1i(this.material.uniforms.metallicRoughnessTexture,this.material.pbrMetallicRoughness.metallicRoughnessTexture.index),this.material.normalTexture&&e.uniform1i(this.material.uniforms.normalTexture,this.material.normalTexture.index),this.material.occlusionTexture&&e.uniform1i(this.material.uniforms.occlusionTexture,this.material.occlusionTexture.index),this.material.emissiveTexture&&e.uniform1i(this.material.uniforms.emissiveTexture,this.material.emissiveTexture.index),this.material.doubleSided&&e.disable(e.CULL_FACE),this.geometry.indicesBuffer?e.drawElements(this.mode||e.TRIANGLES,this.geometry.indicesBuffer.length,4===this.geometry.indicesBuffer.BYTES_PER_ELEMENT?e.UNSIGNED_INT:e.UNSIGNED_SHORT,0):e.drawArrays(this.mode||e.TRIANGLES,0,this.geometry.attributes.POSITION.length/3),this.material.doubleSided&&e.enable(e.CULL_FACE)}calculateBounding(){const e=this.geometry.attributes.POSITION;let t=0;this.geometry.boundingSphere.center.add(this.geometry.boundingSphere.min).add(this.geometry.boundingSphere.max).scale(.5);for(let r=0;r<e.length;r+=3)t=Math.max(t,this.geometry.boundingSphere.center.distanceToSquared(e[r],e[r+1],e[r+2]));this.geometry.boundingSphere.radius=Math.sqrt(t)}setBoundingBox({min:e,max:t}){this.geometry.boundingSphere.min=new i(e),this.geometry.boundingSphere.max=new i(t),this.calculateBounding()}setIndicesBuffer(e){this.geometry.indicesBuffer=e}setAttributes(e){this.geometry.attributes=e}setTargets(e){this.geometry.targets=e}setProgram(e){this.program=e}setMode(e){this.mode=e}isVisible(e){const t=new i(this.geometry.boundingSphere.center.elements).applyMatrix4(this.matrixWorld),r=this.geometry.boundingSphere.radius*this.matrixWorld.getMaxScaleOnAxis();let n,s=!0;for(const i of e)if((n=i.elements[0]*t.elements[0]+i.elements[1]*t.elements[1]+i.elements[2]*t.elements[2]+i.elements[3])<-r){s=!1;break}return this.distance=n+r,s}}class h extends c{constructor(e,t){super(e,t)}setSkin(e){return this.skin=e,this}getJointMatrix(){const e=new n(this.matrixWorld).invert(),t=[];for(let r=0;r<this.boneInverses.length;r++){const i=(new n).multiply(e).multiply(this.bones[r].matrixWorld).multiply(this.boneInverses[r]);t.push(i)}return t}}class m extends l{}class u extends l{constructor(e,t){super(e,t),this.matrixWorldInvert=new n,this.projection=new n}setProps(e){this.props=e}setProjection(e){this.projection.set(e.elements)}setMatrixWorld(e){super.setMatrixWorld(e),this.matrixWorldInvert.setInverseOf(this.matrixWorld)}setZ(e){this.matrix.elements[14]=e,this.setMatrixWorld(this.matrix.elements)}getViewProjMatrix(){const e=new n;return e.multiply(this.projection),e.multiply(this.matrixWorldInvert),e}}class f{constructor(){this.opaqueChildren=[],this.transparentChildren=[],this.meshes=[],this.children=[],this.bin=[],this.matrixWorld=new n}}class d extends l{constructor(e,t){super(e,t),this.matrixWorldInvert=new n}setMatrixWorld(e){super.setMatrixWorld(e),this.matrixWorldInvert.setInverseOf(this.matrixWorld)}setZ(e){this.matrix.elements[14]=e,this.setMatrixWorld(this.matrix.elements)}update(e){const t=new n;t.makeRotationAxis(new i([0,1,0]),e),t.multiply(this.matrix),this.setMatrixWorld(t.elements)}}class p{constructor(){this.map=new Map,this.tempStore={},this.offset=0}add(e,t){this.map.set(e,this.offset),this.tempStore[e]=t,this.offset+=Math.max(t.length,4)}update(e,t,r){const n=this.map.get(t);this.store.set(r,n),e.bufferSubData(e.UNIFORM_BUFFER,n*Float32Array.BYTES_PER_ELEMENT,r)}done(){this.store=new Float32Array(this.offset);for(const[e,t]of this.map)this.store.set(this.tempStore[e],t);this.tempStore=null}}class T{constructor(e){const t=document.querySelector("#canvas");this.redraw=e,this.zoomValue=0,document.addEventListener("wheel",this),t.addEventListener("mousedown",this),t.addEventListener("mousemove",this),t.addEventListener("mouseup",this),document.addEventListener("keyup",this),document.addEventListener("keydown",this),addEventListener("resize",this)}handleEvent(e){switch(e.type){case"wheel":this.zoom(e);break;case"mousedown":this.onStart(e);break;case"mousemove":this.onMove(e);break;case"mouseup":this.onEnd();break;case"keyup":this.onKeyUp();break;case"keydown":this.onKeyDown(e);break;case"resize":this.onResize()}}onResize(){this.redraw("resize")}onKeyDown(e){(e.shiftKey||e.ctrlKey)&&(this.isPan=!0)}onKeyUp(){this.isPan=!1}onStart(e){this.x=e.clientX,this.y=e.clientY,this.isDrag=!0}onMove(e){this.isDrag&&(this.isPan?this.redraw("pan",[this.x,this.y],[e.clientX,e.clientY]):this.redraw("rotate",[this.x,this.y],[e.clientX,e.clientY]),this.x=e.clientX,this.y=e.clientY)}onEnd(){this.isDrag=!1}zoom(e){this.zoomValue=Math.min(this.zoomValue+e.deltaY,1250),this.redraw("zoom",Math.pow(1.001,this.zoomValue))}}const E={};let g,R=-1;function v(e,t){return Math.random()*(t-e)+e}function b(e,t,r){return e+r*(t-e)}function x(e){let t;switch(e){case"MAT2":t=4;break;case"MAT3":t=9;break;case"MAT4":t=16;break;case"VEC4":t=4;break;case"VEC3":t=3;break;case"VEC2":t=2;break;case"SCALAR":t=1}return t}function A(e){return"rotation"===e?4:"weights"===e?2:3}function F(e,t){if(0===t.length)return[-1,-1,0];let r=-1;for(let n=t.length-1;n>=0;n--)if(e>=t[n].time){r=n;break}if(-1===r||r===t.length-1)return r<0&&(r=0),[r,r,0];{const n=t[r],i=t[r+1];return e=Math.max(n.time,Math.min(e,i.time)),[r,r+1,function(e,t,r){return(r-e)/(t-e)}(n.time,i.time,e)]}}function _(e){let t;switch(E[e]){case"BYTE":case"UNSIGNED_BYTE":t=1;break;case"SHORT":case"UNSIGNED_SHORT":t=2;break;case"UNSIGNED_INT":case"FLOAT":t=4}return t}function U(e,t,r,n,i,s){const o=n,a=n/s;let l;switch(i&&i!==_(t)*a&&(n=i*s/_(t)-r/_(t)),E[t]){case"BYTE":l=new Int8Array(e,r,n);break;case"UNSIGNED_BYTE":l=new Uint8Array(e,r,n);break;case"SHORT":l=new Int16Array(e,r,n);break;case"UNSIGNED_SHORT":l=new Uint16Array(e,r,n);break;case"UNSIGNED_INT":l=new Uint32Array(e,r,n);break;case"FLOAT":l=new Float32Array(e,r,n)}if(i&&i!==_(t)*a){const e=new Float32Array(o);let r=0;for(let n=0;n<e.length;n+=a)e[n]=l[r],e[n+1]=l[r+1],e[n+2]=l[r+2],r+=a*(i/_(t)/a);return e}return l}function P(e,t,r){const n=g.createShader(e);g.shaderSource(n,t),g.compileShader(n),g.attachShader(r,n);const i=g.getShaderInfoLog(n);if(i)throw new Error(i)}function w(e,t){const r=g.createProgram();if(P(g.VERTEX_SHADER,e,r),P(g.FRAGMENT_SHADER,t,r),g.linkProgram(r),g.validateProgram(r),!g.getProgramParameter(r,g.LINK_STATUS)){const e=g.getProgramInfoLog(r);throw new Error(`Could not compile WebGL program. ${e}`)}return r}function M(e=g.TEXTURE_2D){const t=++R,r=g.createTexture();return g.activeTexture(g[`TEXTURE${t}`]),g.bindTexture(e,r),r.index=t,r}function B(e,t){!function e(r){t(r),r.children&&r.children.forEach(e)}(e)}function y(e){let t=e[0]*e[0]+e[1]*e[1];const r=.0016-t;return r>0?[e[0],e[1],Math.sqrt(r)]:(t=Math.sqrt(t),[.04*e[0]/t,.04*e[1]/t,0])}function N(e,t,r,o){const[a,l]=e,c=new n;c.setTranslate(new i([0,0,.05]));const h=new n(t);h.multiply(c);const m=h.multiplyVector4(new s([0,0,0,1]));m.elements[0]=(2*a/r-1)*m.elements[3],m.elements[1]=(-2*l/o+1)*m.elements[3];const u=h.invert().multiplyVector4(m);return[u.elements[0],u.elements[1]]}function L(e){const{aspect:t,zoom:r}=e;let i;if("perspective"===e.type&&e.perspective){const{yfov:s}=e.perspective,o=s*t;i=(new n).setPerspective(o*r*(180/Math.PI),t,e.perspective.znear||1,e.perspective.zfar||2e6)}else"orthographic"===e.type&&e.orthographic&&(i=(new n).setOrtho(e.orthographic.xmag*r,e.orthographic.ymag*r,e.orthographic.znear,e.orthographic.zfar));return i}function O(e=0,t=0){return e+t}function C(e){let t;switch(e){case"POSITION":t=[0,3,g.FLOAT];break;case"NORMAL":t=[1,3,g.FLOAT];break;case"TEXCOORD_0":t=[2,2,g.FLOAT];break;case"JOINTS_0":t=[3,4,g.UNSIGNED_SHORT];break;case"WEIGHTS_0":t=[4,4,g.FLOAT];break;case"TANGENT":t=[5,4,g.FLOAT];break;case"COLOR_0":t=[6,4,g.FLOAT]}return t}var S=r(3),I=r.n(S),D=r(2),V=r.n(D),X=r(4),G=r.n(X),k=r(5),z=r.n(k),j=r(6),H=r.n(j),W=r(7),Y=r.n(W),q=r(0),K=r.n(q);let J;class ${constructor(){this.envMatrix=new n}setCamera(e){this._camera=e}setGl(e){J=e}setCanvas(e){this.canvas=e}get width(){return this.canvas.offsetWidth*devicePixelRatio}get height(){return this.canvas.offsetHeight*devicePixelRatio}draw(){const e=new n,t=Object.assign({},this._camera.props,{perspective:{yfov:Math.PI/2,znear:.01,zfar:1e4}});e.multiply(L(t)),J.enable(J.CULL_FACE);const r=J.createProgram();P(J.VERTEX_SHADER,"#version 300 es\n        precision highp float;\n        \n        layout (location = 0) in vec3 inPosition;\n        \n        out vec3 outUV;\n\n        uniform mat4 projection;\n        uniform mat4 view;\n        \n        void main() {\n            outUV = inPosition;\n            gl_Position = projection * view * vec4(inPosition, 1.0);\n        }\n        ",r),P(J.FRAGMENT_SHADER,"#version 300 es\n        precision highp float;\n        \n        in vec3 outUV;\n        layout (location = 0) out vec4 color;\n\n        uniform samplerCube environmentMap;\n        \n        void main() {\n            vec3 c = texture(environmentMap, outUV).rgb;\n            \n            color = vec4(c, 1.0);\n        }\n        ",r),J.linkProgram(r),J.useProgram(r),J.bindVertexArray(this.VAO),J.uniformMatrix4fv(J.getUniformLocation(r,"projection"),!1,e.elements),J.uniform1i(J.getUniformLocation(r,"environmentMap"),this.prefilterMap.index),J.uniformMatrix4fv(J.getUniformLocation(r,"view"),!1,this._camera.matrixWorldInvert.elements),J.drawArrays(J.TRIANGLES,0,36)}createEnvironment(){J.enable(J.CULL_FACE);const e=new n,t=Object.assign({},this._camera.props,{perspective:{yfov:Math.PI/2,znear:.01,zfar:1e4}});e.multiply(L(t)),J.bindFramebuffer(J.FRAMEBUFFER,this.framebuffer),J.useProgram(this.cubeprogram),J.bindVertexArray(this.VAO),J.viewport(0,0,this.framebuffer.size,this.framebuffer.size),J.uniformMatrix4fv(J.getUniformLocation(this.cubeprogram,"projection"),!1,e.elements),J.uniform1i(J.getUniformLocation(this.cubeprogram,"diffuse"),this.texture.index);for(let e=0;e<6;e++)J.framebufferTexture2D(J.FRAMEBUFFER,J.COLOR_ATTACHMENT0,J.TEXTURE_CUBE_MAP_POSITIVE_X+e,this.map,0),J.uniformMatrix4fv(J.getUniformLocation(this.cubeprogram,"view"),!1,this.views[e].elements),J.clear(J.COLOR_BUFFER_BIT|J.DEPTH_BUFFER_BIT),J.drawArrays(J.TRIANGLES,0,36);J.bindVertexArray(null),J.bindFramebuffer(J.FRAMEBUFFER,null),J.bindFramebuffer(J.FRAMEBUFFER,this.irradiancebuffer),J.useProgram(this.irradianceprogram),J.bindVertexArray(this.VAO),J.viewport(0,0,this.irradiancebuffer.size,this.irradiancebuffer.size),J.uniformMatrix4fv(J.getUniformLocation(this.irradianceprogram,"projection"),!1,e.elements),J.uniform1i(J.getUniformLocation(this.irradianceprogram,"environmentMap"),this.map.index);for(let e=0;e<6;e++)J.framebufferTexture2D(J.FRAMEBUFFER,J.COLOR_ATTACHMENT0,J.TEXTURE_CUBE_MAP_POSITIVE_X+e,this.irradiancemap,0),J.uniformMatrix4fv(J.getUniformLocation(this.irradianceprogram,"view"),!1,this.views[e].elements),J.clear(J.COLOR_BUFFER_BIT|J.DEPTH_BUFFER_BIT),J.drawArrays(J.TRIANGLES,0,36);J.bindVertexArray(null),J.bindFramebuffer(J.FRAMEBUFFER,null);{J.bindFramebuffer(J.FRAMEBUFFER,this.prefilterbuffer),J.useProgram(this.mipmapcubeprogram),J.bindVertexArray(this.VAO),J.uniformMatrix4fv(J.getUniformLocation(this.mipmapcubeprogram,"projection"),!1,e.elements),J.uniform1i(J.getUniformLocation(this.mipmapcubeprogram,"environmentMap"),this.map.index);const t=5;for(let e=0;e<t;++e){const r=this.prefilterbuffer.size*Math.pow(.5,e),n=this.prefilterbuffer.size*Math.pow(.5,e);J.viewport(0,0,r,n);const i=e/(t-1);J.uniform1f(J.getUniformLocation(this.mipmapcubeprogram,"roughness"),i);for(let t=0;t<6;t++)J.framebufferTexture2D(J.FRAMEBUFFER,J.COLOR_ATTACHMENT0,J.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.prefilterMap,e),J.uniformMatrix4fv(J.getUniformLocation(this.mipmapcubeprogram,"view"),!1,this.views[t].elements),J.clear(J.COLOR_BUFFER_BIT|J.DEPTH_BUFFER_BIT),J.drawArrays(J.TRIANGLES,0,36)}J.bindVertexArray(null),J.bindFramebuffer(J.FRAMEBUFFER,null)}J.bindFramebuffer(J.FRAMEBUFFER,this.brdfbuffer),J.useProgram(this.bdrfprogram),J.bindVertexArray(this.quadVAO),J.viewport(0,0,this.brdfbuffer.size,this.brdfbuffer.size),J.framebufferTexture2D(J.FRAMEBUFFER,J.COLOR_ATTACHMENT0,J.TEXTURE_2D,this.brdfLUTTexture,0),J.clear(J.COLOR_BUFFER_BIT|J.DEPTH_BUFFER_BIT),J.drawArrays(J.TRIANGLE_STRIP,0,4),J.bindVertexArray(null),J.bindFramebuffer(J.FRAMEBUFFER,null),J.disable(J.CULL_FACE),J.viewport(0,0,this.width,this.height)}createEnvironmentBuffer(){{const e=32,t=J.createFramebuffer();this.irradiancebuffer=t,this.irradiancebuffer.size=e,J.bindFramebuffer(J.FRAMEBUFFER,t);const r=M(J.TEXTURE_CUBE_MAP);for(let t=0;t<6;t++)J.texImage2D(J.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,J.RGBA16F,e,e,0,J.RGBA,J.FLOAT,null),J.framebufferTexture2D(J.FRAMEBUFFER,J.COLOR_ATTACHMENT0,J.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,0);J.texParameteri(J.TEXTURE_CUBE_MAP,J.TEXTURE_WRAP_S,J.CLAMP_TO_EDGE),J.texParameteri(J.TEXTURE_CUBE_MAP,J.TEXTURE_WRAP_T,J.CLAMP_TO_EDGE),J.texParameteri(J.TEXTURE_CUBE_MAP,J.TEXTURE_WRAP_R,J.CLAMP_TO_EDGE),J.texParameteri(J.TEXTURE_CUBE_MAP,J.TEXTURE_MIN_FILTER,J.LINEAR),J.texParameteri(J.TEXTURE_CUBE_MAP,J.TEXTURE_MAG_FILTER,J.LINEAR),this.irradiancemap=r}{const e=512,t=J.createFramebuffer();this.framebuffer=t,this.framebuffer.size=e,J.bindFramebuffer(J.FRAMEBUFFER,t);const r=M(J.TEXTURE_CUBE_MAP);for(let t=0;t<6;t++)J.texImage2D(J.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,J.RGBA16F,e,e,0,J.RGBA,J.FLOAT,null),J.framebufferTexture2D(J.FRAMEBUFFER,J.COLOR_ATTACHMENT0,J.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,0);J.texParameteri(J.TEXTURE_CUBE_MAP,J.TEXTURE_WRAP_S,J.CLAMP_TO_EDGE),J.texParameteri(J.TEXTURE_CUBE_MAP,J.TEXTURE_WRAP_T,J.CLAMP_TO_EDGE),J.texParameteri(J.TEXTURE_CUBE_MAP,J.TEXTURE_WRAP_R,J.CLAMP_TO_EDGE),J.texParameteri(J.TEXTURE_CUBE_MAP,J.TEXTURE_MIN_FILTER,J.LINEAR),J.texParameteri(J.TEXTURE_CUBE_MAP,J.TEXTURE_MAG_FILTER,J.LINEAR),this.map=r}{const e=128,t=J.createFramebuffer();this.prefilterbuffer=t,this.prefilterbuffer.size=e,J.bindFramebuffer(J.FRAMEBUFFER,t);const r=M(J.TEXTURE_CUBE_MAP);for(let t=0;t<6;t++)J.texImage2D(J.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,J.RGBA16F,e,e,0,J.RGBA,J.FLOAT,null),J.framebufferTexture2D(J.FRAMEBUFFER,J.COLOR_ATTACHMENT0,J.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,t);J.texParameteri(J.TEXTURE_CUBE_MAP,J.TEXTURE_WRAP_S,J.CLAMP_TO_EDGE),J.texParameteri(J.TEXTURE_CUBE_MAP,J.TEXTURE_WRAP_T,J.CLAMP_TO_EDGE),J.texParameteri(J.TEXTURE_CUBE_MAP,J.TEXTURE_WRAP_R,J.CLAMP_TO_EDGE),J.texParameteri(J.TEXTURE_CUBE_MAP,J.TEXTURE_MIN_FILTER,J.LINEAR_MIPMAP_LINEAR),J.texParameteri(J.TEXTURE_CUBE_MAP,J.TEXTURE_MAG_FILTER,J.LINEAR),J.generateMipmap(J.TEXTURE_CUBE_MAP),this.prefilterMap=r}{const e=512,t=J.createFramebuffer();this.brdfbuffer=t,this.brdfbuffer.size=e,J.bindFramebuffer(J.FRAMEBUFFER,t);const r=M();J.texImage2D(J.TEXTURE_2D,0,J.RG16F,e,e,0,J.RG,J.FLOAT,null),J.texParameteri(J.TEXTURE_2D,J.TEXTURE_WRAP_S,J.CLAMP_TO_EDGE),J.texParameteri(J.TEXTURE_2D,J.TEXTURE_WRAP_T,J.CLAMP_TO_EDGE),J.texParameteri(J.TEXTURE_2D,J.TEXTURE_MIN_FILTER,J.LINEAR),J.texParameteri(J.TEXTURE_2D,J.TEXTURE_MAG_FILTER,J.LINEAR),this.brdfLUTTexture=r;const n=[-1,1,-1,-1,1,1,1,-1];this.quadVAO=J.createVertexArray(),J.bindVertexArray(this.quadVAO);const i=J.createBuffer();J.bindBuffer(J.ARRAY_BUFFER,i),J.bufferData(J.ARRAY_BUFFER,new Float32Array(n),J.STATIC_DRAW),J.enableVertexAttribArray(0),J.vertexAttribPointer(0,2,J.FLOAT,!1,0,0),J.bindVertexArray(null)}const e=[[new i([0,1,0]),Math.PI/2],[new i([0,1,0]),-Math.PI/2],[new i([1,0,0]),-Math.PI/2],[new i([1,0,0]),Math.PI/2],[new i([0,1,0]),Math.PI],[new i([0,1,0]),0]];this.views=e.map((e,t)=>{const r=new n;if(r.makeRotationAxis(e[0],e[1]),2!==t&&3!==t){const e=new n;e.makeRotationAxis(new i([0,0,1]),Math.PI),r.multiply(e)}return r.multiply(this._camera.matrix),(new n).setInverseOf(r)});const t=[-1,1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,1,1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,-1,1,1,1,1,1,1,1,1,1,-1,1,-1,-1,-1,-1,1,-1,1,1,1,1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,-1,1,1,-1,1,1,1,1,1,1,-1,1,1,-1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,1,-1,-1,-1,-1,1,1,-1,1];this.VAO=J.createVertexArray(),J.bindVertexArray(this.VAO);{const e=J.createBuffer();J.bindBuffer(J.ARRAY_BUFFER,e),J.bufferData(J.ARRAY_BUFFER,new Float32Array(t),J.STATIC_DRAW),J.enableVertexAttribArray(0),J.vertexAttribPointer(0,3,J.FLOAT,!1,0,0)}return J.bindVertexArray(null),this.cubeprogram=w(V.a,G.a),this.irradianceprogram=w(V.a,z.a),this.mipmapcubeprogram=w(V.a,H.a),this.bdrfprogram=w(K.a,Y.a),fetch("src/images/env.hdr").then(e=>e.arrayBuffer()).then(e=>{const t=I()(e).data;return this.texture=M(),J.pixelStorei(J.UNPACK_FLIP_Y_WEBGL,!0),J.texParameteri(J.TEXTURE_2D,J.TEXTURE_MAG_FILTER,J.LINEAR),J.texParameteri(J.TEXTURE_2D,J.TEXTURE_MIN_FILTER,J.LINEAR),J.texParameteri(J.TEXTURE_2D,J.TEXTURE_WRAP_S,J.CLAMP_TO_EDGE),J.texParameteri(J.TEXTURE_2D,J.TEXTURE_WRAP_T,J.CLAMP_TO_EDGE),J.texImage2D(J.TEXTURE_2D,0,J.RGBA16F,1024,512,0,J.RGBA,J.FLOAT,t),this.createEnvironment(),!0})}}class Z{constructor(){this.counterEl=document.createElement("div"),this.counterEl.setAttribute("style","position: absolute; top: 0; right: 0; color: #fff; font-size: 30px; background: #000;"),document.body.appendChild(this.counterEl),this.fps=0,this.elapsedTime=0,this.lastTime=0}tick(e){this.fps++,this.elapsedTime+=e-this.lastTime,this.lastTime=e,this.elapsedTime>=1e3&&(this.counterEl.innerHTML=String(this.fps),this.fps=0,this.elapsedTime-=1e3)}}var Q=r(8),ee=r.n(Q),te=r(9),re=r.n(te);let ne;class ie{constructor(e){this.url=e,this.host=e.substr(0,e.lastIndexOf("/")+1),this.tracks=[],this.duration=0,this.skins=[],this.textures=null,this.samplers=null,this.arrayBuffer=null,this.cameras=[],this.programs={}}setScene(e){this.scene=e}setGl(e){ne=e}setCamera(e){this._camera=e}setLight(e){this.light=e}setCanvas(e){this.canvas=e}setResize(e){this.resize=e}setUpdateCamera(e){this.updateCamera=e}setDefines(e){this.defines=e}getBuffer(){return Promise.all(this.scene.bin.map(e=>fetch(`${this.host}${e}`).then(e=>e.arrayBuffer()))).then(e=>{this.arrayBuffer=e})}buildPrim(e,t,r,n,s){const a=this.json.accessors[s.indices],l=new Map;for(const e in s.attributes)l.set(e,this.json.accessors[s.attributes[e]]);const m=[];if(s.targets)for(const e of s.targets){const t={};for(const r in e){t[r]=this.json.accessors[e[r]];const n=t[r],i=this.json.bufferViews[n.bufferView];t[r]=U(this.arrayBuffer[i.buffer],n.componentType,O(i.byteOffset,n.byteOffset),x(n.type)*n.count)}m.push(t)}const u=void 0!==s.material?JSON.parse(JSON.stringify(this.json.materials[s.material])):{pbrMetallicRoughness:{baseColorFactor:[.8,.8,.8,1]}},f=[...this.defines];let d,p;if(u.pbrMetallicRoughness.metallicRoughnessTexture&&(u.pbrMetallicRoughness.metallicRoughnessTexture=Object.assign({},this.textures[u.pbrMetallicRoughness.metallicRoughnessTexture.index]),f.push({name:"USE_PBR"}),f.push({name:"METALROUGHNESSMAP"})),u.normalTexture&&(u.normalTexture=Object.assign({},this.textures[u.normalTexture.index]),f.push({name:"NORMALMAP"})),u.occlusionTexture&&(u.occlusionTexture=Object.assign({},this.textures[u.occlusionTexture.index]),f.push({name:"OCCLUSIONMAP"})),u.pbrMetallicRoughness.baseColorTexture&&(u.pbrMetallicRoughness.baseColorTexture=Object.assign({},this.textures[u.pbrMetallicRoughness.baseColorTexture.index]),f.push({name:"BASECOLORTEXTURE"})),u.emissiveTexture&&(u.emissiveTexture=Object.assign({},this.textures[u.emissiveTexture.index]),f.push({name:"EMISSIVEMAP"})),void 0!==r&&f.push({name:"JOINTNUMBER",value:this.skins[r].jointNames.length}),(s.attributes.TANGENT||u.normalTexture)&&f.push({name:"TANGENT"}),this.programs[f.map(e=>e.name).join("")])d=this.programs[f.map(e=>e.name).join("")];else{const e=f.map(e=>`#define ${e.name} ${e.value||1}`+"\n").join("");d=w(ee.a.replace(/\n/,`\n${e}`),re.a.replace(/\n/,`\n${e}`)),this.programs[f.map(e=>e.name).join("")]=d}if(a){const e=this.json.bufferViews[a.bufferView];p=U(this.arrayBuffer[e.buffer],a.componentType,O(e.byteOffset,a.byteOffset),x(a.type)*a.count)}const T={min:l.get("POSITION").min,max:l.get("POSITION").max},E={};for(const e of l.keys()){const t=l.get(e),r=this.json.bufferViews[t.bufferView];if(E[e]=U(this.arrayBuffer[r.buffer],t.componentType,O(r.byteOffset,t.byteOffset),x(t.type)*t.count,r.byteStride,t.count),s.targets&&e in s.targets[0]){let t=0;const r=E[e];E[e]=new Float32Array(r.length);for(let i=0;i<E[e].length;i++)"TANGENT"!==e||(i+1)%4!=0?E[e][i]=r[i]+n[0]*m[0][e][i-t]+n[1]*m[1][e][i-t]:t++}}u.normalTexture&&void 0===s.attributes.TANGENT&&(E.TANGENT=function(e,t,r,n){const s=new Float32Array(r.length/3*4);for(let r=0;r<e.length;r+=3){const o=[e[r],e[r+1],e[r+2]],c=o.map(e=>a(t,e)),h=o.map(e=>a(n,e,2)),m=c[1].subtract(c[0]),u=c[2].subtract(c[0]),f=h[1].subtract(h[0]),d=h[2].subtract(h[0]);let p=f.elements[0]*d.elements[1]-f.elements[1]*d.elements[0];p=0!==p?1/p:1;const T=new i([(d.elements[1]*m.elements[0]-f.elements[1]*u.elements[0])*p,(d.elements[1]*m.elements[1]-f.elements[1]*u.elements[1])*p,(d.elements[1]*m.elements[2]-f.elements[1]*u.elements[2])*p]);T.normalize(),o.forEach(e=>{l(s,e,T)})}return s;function a(e,t,r=3){return t*=r,3===r?new i([e[t],e[t+1],e[t+2]]):2===r?new o([e[t],e[t+1]]):void 0}function l(e,t,r,n=4,i=((e,t)=>e+t)){t*=n;for(let s=0;s<n;++s)e[t+s]=3===s?-1:i(e[t+s],r.elements[s])}}(p,E.POSITION,E.NORMAL,E.TEXCOORD_0));const g=void 0!==r?new h(t,e).setSkin(r):new c(t,e);g.setProgram(d),g.setMode(s.mode),g.setMaterial(u),g.setAttributes(E),g.setIndicesBuffer(p),g.setBoundingBox(T),g.setTargets(m),g.updateMatrix();const R=ne.createVertexArray();ne.bindVertexArray(R);for(const e in E){const t=ne.createBuffer();ne.bindBuffer(ne.ARRAY_BUFFER,t),ne.bufferData(ne.ARRAY_BUFFER,E[e],ne.STATIC_DRAW);const r=C(e);ne.enableVertexAttribArray(r[0]),ne.vertexAttribPointer(r[0],r[1],r[2],!1,0,0)}if(p){const e=ne.createBuffer();ne.bindBuffer(ne.ELEMENT_ARRAY_BUFFER,e),ne.bufferData(ne.ELEMENT_ARRAY_BUFFER,p,ne.STATIC_DRAW)}return g.geometry.VAO=R,ne.bindVertexArray(null),u.pbrMetallicRoughness.baseColorTexture&&(g.material.uniforms.baseColorTexture=ne.getUniformLocation(g.program,"baseColorTexture")),u.pbrMetallicRoughness.metallicRoughnessTexture&&(g.material.uniforms.metallicRoughnessTexture=ne.getUniformLocation(g.program,"metallicRoughnessTexture")),u.normalTexture&&(g.material.uniforms.normalTexture=ne.getUniformLocation(g.program,"normalTexture")),u.occlusionTexture&&(g.material.uniforms.occlusionTexture=ne.getUniformLocation(g.program,"occlusionTexture")),u.emissiveTexture&&(g.material.uniforms.emissiveTexture=ne.getUniformLocation(g.program,"emissiveTexture")),g}walkByMesh(e,t){const r=this.json.nodes[t];let n;if(void 0!==r.camera){(n=new u(t,e)).setProps(Object.assign({zoom:1,aspect:this.canvas.offsetWidth/this.canvas.offsetHeight},this.json.cameras[r.camera]));const i=L(n.props);n.setProjection(i),this._camera=n,this.updateCamera(this._camera),this.cameras.push(n)}else n=void 0!==r.isBone?new m(t,e):new l(t,e);if(r.translation||r.rotation||r.scale?n.setPosition(r.translation,r.rotation,r.scale):r.matrix&&n.setMatrix(r.matrix),n.updateMatrix(),e.children.push(n),e=n,void 0!==r.mesh){if(void 0!==r.skin)for(const e of this.skins[r.skin].jointNames)B(this.scene,this.buildBones.bind(this,e,this.skins[r.skin]));e.children.push(...this.json.meshes[r.mesh].primitives.map(this.buildPrim.bind(this,e,this.json.meshes[r.mesh].name,r.skin,this.json.meshes[r.mesh].weights)))}r.children&&r.children.length&&r.children.forEach(this.walkByMesh.bind(this,e))}calculateFov(){let e;B(this.scene,t=>{t instanceof c&&(e||(e=t),t.geometry.boundingSphere.radius>e.geometry.boundingSphere.radius&&(e=t))});const t=Math.max(e.matrixWorld.getScaleZ(),1),r=Math.hypot(...e.getPosition());this._camera.modelSize=e.geometry.boundingSphere.radius*t+r+Math.hypot(...e.geometry.boundingSphere.center.elements),this.resize()}buildMesh(){this.json.scenes[void 0!==this.json.scene?this.json.scene:0].nodes.forEach(e=>{this.json.nodes[e].children&&this.json.nodes[e].children.length&&this.walkByMesh(this.scene,e),void 0!==this.json.nodes[e].mesh&&this.walkByMesh(this.scene,e),void 0!==this.json.nodes[e].camera&&this.walkByMesh(this.scene,e)}),this.calculateFov();const e=a(this._camera.getViewProjMatrix());return B(this.scene,t=>{if(t instanceof h){t.bones=this.skins[t.skin].bones,t.boneInverses=this.skins[t.skin].boneInverses;const e=t.getJointMatrix(),r=new Float32Array(16*e.length);let n=0;for(const t of e)r.set(t.elements,0+16*n),n++;const i=ne.getUniformBlockIndex(t.program,"Skin");ne.uniformBlockBinding(t.program,i,2);const s=ne.createBuffer();ne.bindBuffer(ne.UNIFORM_BUFFER,s),ne.bufferData(ne.UNIFORM_BUFFER,r,ne.DYNAMIC_DRAW),t.geometry.SKIN=s,ne.bindBuffer(ne.UNIFORM_BUFFER,null)}if(t instanceof c){const r=new p;r.add("baseColorFactor",t.material.pbrMetallicRoughness.baseColorFactor||[.8,.8,.8,1]),r.add("lightPos",this.light.getPosition()),r.add("viewPos",this._camera.getPosition()),r.done();const i=ne.getUniformBlockIndex(t.program,"Material");ne.uniformBlockBinding(t.program,i,1);const s=ne.createBuffer();ne.bindBuffer(ne.UNIFORM_BUFFER,s),ne.bufferData(ne.UNIFORM_BUFFER,r.store,ne.STATIC_DRAW),t.material.UBO=s,t.material.uniformBuffer=r;const o=new n(t.matrixWorld);o.invert().transpose();const a=new p;a.add("model",t.matrixWorld.elements),a.add("normalMatrix",o.elements),a.add("view",this._camera.matrixWorldInvert.elements),a.add("projection",this._camera.projection.elements),a.add("light",this.light.matrixWorldInvert.elements),a.add("isShadow",new Float32Array([0])),a.done();const l=ne.getUniformBlockIndex(t.program,"Matrices");ne.uniformBlockBinding(t.program,l,0);const c=ne.createBuffer();ne.bindBuffer(ne.UNIFORM_BUFFER,c),ne.bufferData(ne.UNIFORM_BUFFER,a.store,ne.DYNAMIC_DRAW),t.geometry.UBO=c,t.geometry.uniformBuffer=a,ne.bindBuffer(ne.UNIFORM_BUFFER,null),t.material.alphaMode?this.scene.transparentChildren.push(t):this.scene.opaqueChildren.push(t),this.scene.meshes.push(t),t.visible=t.isVisible(e)}}),this.scene.opaqueChildren.sort((e,t)=>e.distance-t.distance),this.scene.transparentChildren.sort((e,t)=>t.distance-e.distance),!0}buildAnimation(){if(!this.json.animations)return!0;for(const e of this.json.animations)for(const t of e.channels){const r=e.samplers[t.sampler];if(r){const{target:n}=t,i=n.node,s=void 0!==e.parameters?e.parameters[r.input]:r.input,o=void 0!==e.parameters?e.parameters[r.output]:r.output,a=this.json.accessors[s],c=this.json.accessors[o],h=this.json.bufferViews[a.bufferView],m=this.json.bufferViews[c.bufferView],u=U(this.arrayBuffer[h.buffer],a.componentType,O(h.byteOffset,a.byteOffset),x(a.type)*a.count),f=U(this.arrayBuffer[m.buffer],c.componentType,O(m.byteOffset,c.byteOffset),x(c.type)*c.count),d=A(n.path),p=[];for(let e=0;e<u.length;e++){const t=u[e],r=f.slice(e*d,(e+1)*d);p.push({time:t,value:r})}this.duration=Math.max(p[p.length-1].time,this.duration);const T=[];B(this.scene,e=>{e.name===i&&("weights"===n.path&&e instanceof l&&(e=e.children[0]),T.push(e))}),T.length&&this.tracks.push({stoped:!1,meshes:T,type:n.path,name:`${T[0].name}.${n.path}`,keys:p,interpolation:r.interpolation})}}return!0}buildSkin(){if(!this.json.skins)return!0;for(const e of this.json.skins){const t=this.json.accessors[e.inverseBindMatrices],r=this.json.bufferViews[t.bufferView],i=U(this.arrayBuffer[r.buffer],t.componentType,O(r.byteOffset,t.byteOffset),x(t.type)*t.count),s={jointNames:e.joints,inverseBindMatrices:i,bones:[],boneInverses:[]};let o=0;for(const e of s.jointNames){this.json.nodes[e].isBone=!0;const t=s.inverseBindMatrices,r=(new n).set(t.slice(16*o,16*(o+1)));s.boneInverses.push(r),o++}this.skins.push(s)}return!0}buildBones(e,t,r){r.name===e&&t.bones.push(r)}getJson(){return fetch(this.url).then(e=>e.json()).then(e=>{for(const t in e.buffers)this.scene.bin.push(e.buffers[t].uri);return this.json=e,!0})}initTextures(){if(!this.json.textures)return!0;const e=this.json.samplers||[{}];this.samplers=e.map(e=>{const t=ne.createSampler();return ne.samplerParameteri(t,ne.TEXTURE_MIN_FILTER,e.minFilter||9986),ne.samplerParameteri(t,ne.TEXTURE_MAG_FILTER,e.magFilter||9729),ne.samplerParameteri(t,ne.TEXTURE_WRAP_S,e.wrapS||10497),ne.samplerParameteri(t,ne.TEXTURE_WRAP_T,e.wrapT||10497),t});const t={};this.json.textures.forEach(e=>{const r=String(e.sampler)+String(e.source);t[r]=e,t[r].name=r,e.name=r});const r=Object.values(t).map(e=>new Promise((t,r)=>{const n=this.samplers[void 0!==e.sampler?e.sampler:0],i=this.json.images[e.source],s=new Image;s.onload=(()=>{t(this.handleTextureLoaded(n,s,e.name))}),s.onerror=(e=>{r(e)}),s.crossOrigin="anonymous",s.src=`${this.host}${i.uri}`}));return Promise.all(r).then(e=>(this.textures=this.json.textures.map(t=>e.find(e=>e.name===t.name)),!0))}handleTextureLoaded(e,t,r){const n=M();return n.name=r,n.image=t.src.substr(t.src.lastIndexOf("/")),ne.bindSampler(n.index,e),ne.texImage2D(ne.TEXTURE_2D,0,ne.RGBA,ne.RGBA,ne.UNSIGNED_BYTE,t),ne.generateMipmap(ne.TEXTURE_2D),n}}class se{setCanvas(e){this.canvas=e}setCamera(e){this.camera=e}setLight(e){this.light=e}get width(){return this.canvas.offsetWidth*devicePixelRatio}get height(){return this.canvas.offsetHeight*devicePixelRatio}}var oe=r(10),ae=r.n(oe),le=r(1),ce=r.n(le);let he;const me=4,ue=32;var fe=r(11),de=r.n(fe);let pe,Te;var Ee=r(12),ge=r.n(Ee),Re=r(13),ve=r.n(Re);let be;class xe extends se{constructor(){super(),this.scale=2}setGL(e){be=e}preProcessing(e){be.clear(be.COLOR_BUFFER_BIT|be.DEPTH_BUFFER_BIT),e.renderScene(!0,!0),be.bindFramebuffer(be.FRAMEBUFFER,this.framebuffer),be.framebufferTexture2D(be.FRAMEBUFFER,be.COLOR_ATTACHMENT0,be.TEXTURE_2D,this.texture,0),be.useProgram(this.program),be.viewport(0,0,this.width/this.scale,this.height/this.scale),be.bindVertexArray(this.quadVAO);const t=L(Object.assign({},this.camera.props,{zoom:1}));be.uniformMatrix4fv(be.getUniformLocation(this.program,"Iproj"),!1,(new n).setInverseOf(t).elements),be.uniformMatrix4fv(be.getUniformLocation(this.program,"proj"),!1,t.elements),be.uniformMatrix4fv(be.getUniformLocation(this.program,"Iview"),!1,this.camera.matrixWorld.elements),be.uniformMatrix4fv(be.getUniformLocation(this.program,"light"),!1,this.light.matrixWorldInvert.elements),be.uniform1i(be.getUniformLocation(this.program,"lightTexture"),e.preDepthTexture.index),be.uniform1i(be.getUniformLocation(this.program,"cameraTexture"),e.depthTexture.index),be.drawArrays(be.TRIANGLES,0,6),be.bindFramebuffer(be.FRAMEBUFFER,null),be.viewport(0,0,this.width,this.height)}buildScreenBuffer(e){this.framebuffer=be.createFramebuffer(),be.bindFramebuffer(be.FRAMEBUFFER,this.framebuffer),this.texture=e.createOneChannelTexture(this.scale),be.framebufferTexture2D(be.FRAMEBUFFER,be.COLOR_ATTACHMENT0,be.TEXTURE_2D,this.texture,0),this.program=w(ve.a,ge.a);this.quadVAO=be.createVertexArray(),be.bindVertexArray(this.quadVAO);const t=be.createBuffer();return be.bindBuffer(be.ARRAY_BUFFER,t),be.bufferData(be.ARRAY_BUFFER,new Float32Array([1,1,-1,1,-1,-1,-1,-1,1,-1,1,1]),be.STATIC_DRAW),be.enableVertexAttribArray(0),be.vertexAttribPointer(0,2,be.FLOAT,!1,0,0),be.bindVertexArray(null),be.bindFramebuffer(be.FRAMEBUFFER,null),{name:"LIGHT"}}attachUniform(e){be.uniform1i(be.getUniformLocation(e,"light"),this.texture.index)}postProcessing(){}}var Ae=r(14),Fe=r.n(Ae);let _e;const Ue={bloom:class extends se{setGL(e){pe=e}attachUniform(e){pe.uniform1i(pe.getUniformLocation(e,"bloom"),this.blurTexture.index)}postProcessing(e){pe.bindFramebuffer(pe.FRAMEBUFFER,this.framebuffer),pe.useProgram(this.bloorProgram),pe.framebufferTexture2D(pe.FRAMEBUFFER,pe.COLOR_ATTACHMENT0,pe.TEXTURE_2D,this.hdrTexture,0),pe.uniform1i(pe.getUniformLocation(this.bloorProgram,"diff"),e.screenTexture.index),pe.drawArrays(pe.TRIANGLES,0,6),pe.useProgram(this.program),pe.viewport(0,0,this.width/2,this.height/2),this.renderBlur(this.hdrTexture,this.program),this.renderBlur(this.blurTexture,this.program),this.renderBlur(this.blurTexture,this.program),this.renderBlur(this.blurTexture,this.program),this.renderBlur(this.blurTexture,this.program),pe.bindFramebuffer(pe.FRAMEBUFFER,null),pe.viewport(0,0,this.width,this.height)}buildScreenBuffer(e){return this.framebuffer=pe.createFramebuffer(),pe.bindFramebuffer(pe.FRAMEBUFFER,this.framebuffer),this.tempBlurTexture=e.createDefaultTexture(2),this.blurTexture=e.createDefaultTexture(2),this.hdrTexture=e.createByteTexture(),pe.bindFramebuffer(pe.FRAMEBUFFER,null),this.program=w(K.a,ce.a),this.bloorProgram=w(K.a,de.a),{name:"BLOOM"}}renderBlur(e,t){pe.framebufferTexture2D(pe.FRAMEBUFFER,pe.COLOR_ATTACHMENT0,pe.TEXTURE_2D,this.tempBlurTexture,0),pe.clearColor(1,1,1,0),pe.clear(pe.COLOR_BUFFER_BIT|pe.DEPTH_BUFFER_BIT|pe.STENSIL_BUFFER_BIT),pe.uniform1i(pe.getUniformLocation(t,"uTexture"),e.index),pe.uniform2f(pe.getUniformLocation(t,"denom"),1,0),pe.drawArrays(pe.TRIANGLES,0,6),pe.framebufferTexture2D(pe.FRAMEBUFFER,pe.COLOR_ATTACHMENT0,pe.TEXTURE_2D,this.blurTexture,0),pe.uniform1i(pe.getUniformLocation(t,"uTexture"),this.tempBlurTexture.index),pe.uniform2f(pe.getUniformLocation(t,"denom"),0,1),pe.drawArrays(pe.TRIANGLES,0,6)}preProcessing(){}},ssao:class extends se{constructor(){super(),this.scale=2}setGL(e){he=e}attachUniform(e){he.uniform1i(he.getUniformLocation(e,"ssao"),this.ssaoTexture.index)}postProcessing(e){he.bindFramebuffer(he.FRAMEBUFFER,this.framebuffer),he.framebufferTexture2D(he.FRAMEBUFFER,he.COLOR_ATTACHMENT0,he.TEXTURE_2D,this.ssaoTexture,0),he.clearColor(1,1,1,0),he.clear(he.COLOR_BUFFER_BIT|he.DEPTH_BUFFER_BIT),he.useProgram(this.ssaoProgram);const t=this.camera.props.perspective||this.camera.props.orthographic;he.uniform1i(he.getUniformLocation(this.ssaoProgram,"normBuff"),e.normalTexture.index),he.uniform1i(he.getUniformLocation(this.ssaoProgram,"depthBuff"),e.depthTexture.index),he.uniform1i(he.getUniformLocation(this.ssaoProgram,"noice"),this.noice.index),he.uniform2f(he.getUniformLocation(this.ssaoProgram,"noiseScale"),this.width/me,this.height/me),he.uniform1f(he.getUniformLocation(this.ssaoProgram,"zFar"),t.zfar),he.uniform1f(he.getUniformLocation(this.ssaoProgram,"zNear"),t.znear),he.uniformMatrix4fv(he.getUniformLocation(this.ssaoProgram,"proj"),!1,this.camera.projection.elements),he.uniformMatrix4fv(he.getUniformLocation(this.ssaoProgram,"projI"),!1,(new n).setInverseOf(this.camera.projection).elements),he.uniform3fv(he.getUniformLocation(this.ssaoProgram,"kernels"),this.kernels),he.viewport(0,0,this.width/this.scale,this.height/this.scale),he.drawArrays(he.TRIANGLES,0,6),he.framebufferTexture2D(he.FRAMEBUFFER,he.COLOR_ATTACHMENT0,he.TEXTURE_2D,this.ssaoBlurTexture,0),he.clear(he.COLOR_BUFFER_BIT|he.DEPTH_BUFFER_BIT),he.useProgram(this.ssaoBlurProgram),he.uniform1i(he.getUniformLocation(this.ssaoBlurProgram,"uTexture"),this.ssaoTexture.index),he.uniform2f(he.getUniformLocation(this.ssaoBlurProgram,"denom"),1,0),he.drawArrays(he.TRIANGLES,0,6),he.framebufferTexture2D(he.FRAMEBUFFER,he.COLOR_ATTACHMENT0,he.TEXTURE_2D,this.ssaoTexture,0),he.uniform1i(he.getUniformLocation(this.ssaoBlurProgram,"uTexture"),this.ssaoBlurTexture.index),he.uniform2f(he.getUniformLocation(this.ssaoBlurProgram,"denom"),0,1),he.drawArrays(he.TRIANGLES,0,6),he.bindFramebuffer(he.FRAMEBUFFER,null),he.viewport(0,0,this.width,this.height)}buildScreenBuffer(e){return this.framebuffer=he.createFramebuffer(),he.bindFramebuffer(he.FRAMEBUFFER,this.framebuffer),this.ssaoTexture=e.createOneChannelTexture(this.scale),this.ssaoBlurTexture=e.createOneChannelTexture(this.scale),he.framebufferTexture2D(he.FRAMEBUFFER,he.COLOR_ATTACHMENT0,he.TEXTURE_2D,this.ssaoTexture,0),this.ssaoProgram=w(K.a,ae.a),this.ssaoBlurProgram=w(K.a,ce.a),this.buildNoice(e),this.buildKernels(),he.bindFramebuffer(he.FRAMEBUFFER,null),{name:"SSAO"}}buildNoice(e){const t=new Float32Array(me*me*3);for(let e=0;e<me*me;e++){const r=new i([2*v(0,1)-1,2*v(0,1)-1,.1]);t[3*e]=r.elements[0],t[3*e+1]=r.elements[1],t[3*e+2]=r.elements[2]}this.noice=e.createNoiceTexture(me,t)}buildKernels(){const e=new Array(ue);for(let t=0;t<e.length;t++){e[t]=new i([2*v(0,1)-1,2*v(0,1)-1,v(0,1)]),e[t].normalize(),e[t].scale(v(0,1));let r=t/e.length;r=b(.1,1,r*r),e[t].scale(r)}this.kernels=new Float32Array(3*e.length);let t=0;for(const r of e)this.kernels.set(r.elements,3*t),t++}preProcessing(){}},shadow:class extends se{setGL(e){Te=e}preProcessing(e){Te.clear(Te.COLOR_BUFFER_BIT|Te.DEPTH_BUFFER_BIT),e.renderScene(!0,!0)}buildScreenBuffer(){return{name:"SHADOW"}}attachUniform(){}postProcessing(){}},light:xe};class Pe{constructor(e){this.postprocessors=e.map(e=>new Ue[e]),this.MSAA=4}setRender(e){this.renderScene=e}setCamera(e){this.camera=e,this.postprocessors.forEach(t=>{t.setCamera(e)})}setLight(e){this.postprocessors.forEach(t=>{t.light=e})}setGl(e){_e=e,this.postprocessors.forEach(e=>{e.setGL(_e)}),this.fakeDepth=this.createNoiceTexture(1,new Float32Array([1,1,0]))}setCanvas(e){this.canvas=e,this.postprocessors.forEach(t=>{t.setCanvas(e)})}get width(){return this.canvas.offsetWidth*devicePixelRatio}get height(){return this.canvas.offsetHeight*devicePixelRatio}bindPrePass(){_e.bindFramebuffer(_e.FRAMEBUFFER,this.preframebuffer)}bindPostPass(){_e.bindFramebuffer(_e.FRAMEBUFFER,this.renderframebuffer)}preProcessing(){this.postprocessors.forEach(e=>e.preProcessing(this))}postProcessing(){_e.bindFramebuffer(_e.READ_FRAMEBUFFER,this.renderframebuffer),_e.bindFramebuffer(_e.DRAW_FRAMEBUFFER,this.framebuffer),_e.readBuffer(_e.COLOR_ATTACHMENT0),_e.drawBuffers([_e.COLOR_ATTACHMENT0]),_e.blitFramebuffer(0,0,this.width,this.height,0,0,this.width,this.height,_e.COLOR_BUFFER_BIT,_e.NEAREST),_e.readBuffer(_e.COLOR_ATTACHMENT1),_e.drawBuffers([_e.NONE,_e.COLOR_ATTACHMENT1]),_e.blitFramebuffer(0,0,this.width,this.height,0,0,this.width,this.height,_e.COLOR_BUFFER_BIT,_e.NEAREST),_e.blitFramebuffer(0,0,this.width,this.height,0,0,this.width,this.height,_e.DEPTH_BUFFER_BIT,_e.NEAREST),_e.bindVertexArray(this.VAO),this.postprocessors.forEach(e=>e.postProcessing(this)),_e.bindFramebuffer(_e.FRAMEBUFFER,null),_e.useProgram(this.program),this.postprocessors.forEach(e=>{e.attachUniform(this.program)}),_e.uniform1i(_e.getUniformLocation(this.program,"original"),this.screenTexture.index),_e.uniform1i(_e.getUniformLocation(this.program,"normal"),this.normalTexture.index),_e.uniform1i(_e.getUniformLocation(this.program,"depth"),this.depthTexture.index),_e.uniform1i(_e.getUniformLocation(this.program,"preDepth"),this.preDepthTexture.index),_e.drawArrays(_e.TRIANGLES,0,6)}createByteTexture(){const e=M();return _e.texParameteri(_e.TEXTURE_2D,_e.TEXTURE_MAG_FILTER,_e.NEAREST),_e.texParameteri(_e.TEXTURE_2D,_e.TEXTURE_MIN_FILTER,_e.NEAREST),_e.texImage2D(_e.TEXTURE_2D,0,_e.RGBA,this.width,this.height,0,_e.RGBA,_e.UNSIGNED_BYTE,null),e}createDefaultTexture(e=1){const t=M();return _e.texParameteri(_e.TEXTURE_2D,_e.TEXTURE_MAG_FILTER,_e.NEAREST),_e.texParameteri(_e.TEXTURE_2D,_e.TEXTURE_MIN_FILTER,_e.NEAREST),_e.texImage2D(_e.TEXTURE_2D,0,_e.RGBA16F,this.width/e,this.height/e,0,_e.RGBA,_e.FLOAT,null),t}createOneChannelTexture(e=1){const t=M();return _e.texParameteri(_e.TEXTURE_2D,_e.TEXTURE_MAG_FILTER,_e.LINEAR),_e.texParameteri(_e.TEXTURE_2D,_e.TEXTURE_MIN_FILTER,_e.LINEAR),_e.texImage2D(_e.TEXTURE_2D,0,_e.R8,this.width/e,this.height/e,0,_e.RED,_e.UNSIGNED_BYTE,null),t}createDepthTexture(){const e=M();return _e.texParameteri(_e.TEXTURE_2D,_e.TEXTURE_MAG_FILTER,_e.NEAREST),_e.texParameteri(_e.TEXTURE_2D,_e.TEXTURE_MIN_FILTER,_e.NEAREST),_e.texImage2D(_e.TEXTURE_2D,0,_e.DEPTH_COMPONENT24,this.width,this.height,0,_e.DEPTH_COMPONENT,_e.UNSIGNED_INT,null),e}createNoiceTexture(e,t){const r=M();return _e.texParameteri(_e.TEXTURE_2D,_e.TEXTURE_MAG_FILTER,_e.NEAREST),_e.texParameteri(_e.TEXTURE_2D,_e.TEXTURE_MIN_FILTER,_e.NEAREST),_e.texParameteri(_e.TEXTURE_2D,_e.TEXTURE_WRAP_S,_e.REPEAT),_e.texParameteri(_e.TEXTURE_2D,_e.TEXTURE_WRAP_T,_e.REPEAT),_e.texImage2D(_e.TEXTURE_2D,0,_e.RGB16F,e,e,0,_e.RGB,_e.FLOAT,t),r}buildScreenBuffer(){if(_e.getExtension("EXT_color_buffer_float"),_e.getExtension("OES_texture_float_linear"),0===this.postprocessors.length)return!0;const e=this.postprocessors.map(e=>e.buildScreenBuffer(this)).map(e=>`#define ${e.name} ${e.value||1}`+"\n").join("");this.VAO=_e.createVertexArray(),_e.bindVertexArray(this.VAO);const t=_e.createBuffer();_e.bindBuffer(_e.ARRAY_BUFFER,t),_e.bufferData(_e.ARRAY_BUFFER,new Float32Array([1,1,-1,1,-1,-1,-1,-1,1,-1,1,1]),_e.STATIC_DRAW),_e.enableVertexAttribArray(0),_e.vertexAttribPointer(0,2,_e.FLOAT,!1,0,0),_e.bindVertexArray(null);const r=_e.createRenderbuffer();_e.bindRenderbuffer(_e.RENDERBUFFER,r),_e.renderbufferStorageMultisample(_e.RENDERBUFFER,this.MSAA,_e.RGBA8,this.width,this.height);const n=_e.createRenderbuffer();_e.bindRenderbuffer(_e.RENDERBUFFER,n),_e.renderbufferStorageMultisample(_e.RENDERBUFFER,this.MSAA,_e.RGBA16F,this.width,this.height);const i=_e.createRenderbuffer();return _e.bindRenderbuffer(_e.RENDERBUFFER,i),_e.renderbufferStorageMultisample(_e.RENDERBUFFER,this.MSAA,_e.DEPTH_COMPONENT24,this.width,this.height),this.renderframebuffer=_e.createFramebuffer(),_e.bindFramebuffer(_e.FRAMEBUFFER,this.renderframebuffer),_e.framebufferRenderbuffer(_e.FRAMEBUFFER,_e.COLOR_ATTACHMENT0,_e.RENDERBUFFER,r),_e.framebufferRenderbuffer(_e.FRAMEBUFFER,_e.COLOR_ATTACHMENT1,_e.RENDERBUFFER,n),_e.framebufferRenderbuffer(_e.FRAMEBUFFER,_e.DEPTH_ATTACHMENT,_e.RENDERBUFFER,i),_e.drawBuffers([_e.COLOR_ATTACHMENT0,_e.COLOR_ATTACHMENT1]),this.framebuffer=_e.createFramebuffer(),_e.bindFramebuffer(_e.FRAMEBUFFER,this.framebuffer),this.screenTexture=this.createByteTexture(),this.normalTexture=this.createDefaultTexture(),this.depthTexture=this.createDepthTexture(),_e.framebufferTexture2D(_e.FRAMEBUFFER,_e.COLOR_ATTACHMENT0,_e.TEXTURE_2D,this.screenTexture,0),_e.framebufferTexture2D(_e.FRAMEBUFFER,_e.COLOR_ATTACHMENT1,_e.TEXTURE_2D,this.normalTexture,0),_e.framebufferTexture2D(_e.FRAMEBUFFER,_e.DEPTH_ATTACHMENT,_e.TEXTURE_2D,this.depthTexture,0),_e.drawBuffers([_e.COLOR_ATTACHMENT0,_e.COLOR_ATTACHMENT1]),_e.bindFramebuffer(_e.FRAMEBUFFER,null),this.preframebuffer=_e.createFramebuffer(),_e.bindFramebuffer(_e.FRAMEBUFFER,this.preframebuffer),this.preDepthTexture=this.createDepthTexture(),_e.framebufferTexture2D(_e.FRAMEBUFFER,_e.DEPTH_ATTACHMENT,_e.TEXTURE_2D,this.preDepthTexture,0),_e.bindFramebuffer(_e.FRAMEBUFFER,null),this.program=w(K.a.replace(/\n/,`\n${e}`),Fe.a.replace(/\n/,`\n${e}`)),!0}clear(){console.error("implement")}}function we(e,t,r){this.x=e,this.y=t,this.z=r}we.prototype.dot2=function(e,t){return this.x*e+this.y*t},we.prototype.dot3=function(e,t,r){return this.x*e+this.y*t+this.z*r};var Me=[new we(1,1,0),new we(-1,1,0),new we(1,-1,0),new we(-1,-1,0),new we(1,0,1),new we(-1,0,1),new we(1,0,-1),new we(-1,0,-1),new we(0,1,1),new we(0,-1,1),new we(0,1,-1),new we(0,-1,-1)],Be=[151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180],ye=new Array(512),Ne=new Array(512);!function(e){e>0&&e<1&&(e*=65536),(e=Math.floor(e))<256&&(e|=e<<8);for(var t=0;t<256;t++){var r;r=1&t?Be[t]^255&e:Be[t]^e>>8&255,ye[t]=ye[t+256]=r,Ne[t]=Ne[t+256]=Me[r%12]}}(0);Math.sqrt(3),Math.sqrt(3);function Le(e){return e*e*e*(e*(6*e-15)+10)}function Oe(e,t,r){return(1-r)*e+r*t}function Ce(e,t,r){var n=Math.floor(e),i=Math.floor(t),s=Math.floor(r);e-=n,t-=i,r-=s;var o=Ne[(n&=255)+ye[(i&=255)+ye[s&=255]]].dot3(e,t,r),a=Ne[n+ye[i+ye[s+1]]].dot3(e,t,r-1),l=Ne[n+ye[i+1+ye[s]]].dot3(e,t-1,r),c=Ne[n+ye[i+1+ye[s+1]]].dot3(e,t-1,r-1),h=Ne[n+1+ye[i+ye[s]]].dot3(e-1,t,r),m=Ne[n+1+ye[i+ye[s+1]]].dot3(e-1,t,r-1),u=Ne[n+1+ye[i+1+ye[s]]].dot3(e-1,t-1,r),f=Ne[n+1+ye[i+1+ye[s+1]]].dot3(e-1,t-1,r-1),d=Le(e),p=Le(t),T=Le(r);return Oe(Oe(Oe(o,h,d),Oe(a,m,d),T),Oe(Oe(l,u,d),Oe(c,f,d),T),p)}var Se=r(15),Ie=r.n(Se),De=r(16),Ve=r.n(De),Xe=r(17),Ge=r.n(Xe),ke=r(18),ze=r.n(ke);let je;const He=1e3;class We{constructor(e){this.getLight=e}setGl(e){je=e}setCamera(e){this.camera=e}build(){this.currentSourceIdx=0;const e=je.createProgram();P(je.VERTEX_SHADER,ze.a,e),P(je.FRAGMENT_SHADER,Ge.a,e);je.transformFeedbackVaryings(e,["v_position","v_velocity","v_spawntime","v_lifetime"],je.SEPARATE_ATTRIBS),je.linkProgram(e),this.program=e;const t=w(Ie.a,Ve.a);this.program2=t;const r=[je.createVertexArray(),je.createVertexArray()],n=[je.createTransformFeedback(),je.createTransformFeedback()];this.VAO=r,this.TFO=n;for(const e of[0,1]){je.bindVertexArray(r[e]);const t=[];{const e=new Float32Array(3*He);for(let t=0;t<He;t++)e[3*t]=0,e[3*t+1]=0,e[3*t+2]=0;const r=je.createBuffer();je.bindBuffer(je.ARRAY_BUFFER,r),je.bufferData(je.ARRAY_BUFFER,e,je.STREAM_COPY),je.enableVertexAttribArray(0),je.vertexAttribPointer(0,3,je.FLOAT,!1,0,0),je.vertexAttribDivisor(0,1),t.push(r)}{const e=new Float32Array(3*He);for(let t=0;t<He;t++)e[3*t]=0,e[3*t+1]=0,e[3*t+2]=0;const r=je.createBuffer();je.bindBuffer(je.ARRAY_BUFFER,r),je.bufferData(je.ARRAY_BUFFER,e,je.STREAM_COPY),je.enableVertexAttribArray(1),je.vertexAttribPointer(1,3,je.FLOAT,!1,0,0),je.vertexAttribDivisor(1,1),t.push(r)}{const e=new Float32Array(1*He);for(let t=0;t<He;t++)e[2*t]=0;const r=je.createBuffer();je.bindBuffer(je.ARRAY_BUFFER,r),je.bufferData(je.ARRAY_BUFFER,e,je.STREAM_COPY),je.enableVertexAttribArray(2),je.vertexAttribPointer(2,1,je.FLOAT,!1,0,0),je.vertexAttribDivisor(2,1),t.push(r)}{const e=new Float32Array(1*He);for(let t=0;t<He;t++)e[2*t]=0;const r=je.createBuffer();je.bindBuffer(je.ARRAY_BUFFER,r),je.bufferData(je.ARRAY_BUFFER,e,je.STREAM_COPY),je.enableVertexAttribArray(3),je.vertexAttribPointer(3,1,je.FLOAT,!1,0,0),je.vertexAttribDivisor(3,1),t.push(r)}je.bindBuffer(je.ARRAY_BUFFER,null),je.bindTransformFeedback(je.TRANSFORM_FEEDBACK,n[e]);let i=0;for(const e of t)je.bindBufferBase(je.TRANSFORM_FEEDBACK_BUFFER,i,e),i++}const i=new Uint8Array(2097152);for(var s=0;s<128;++s)for(var o=0;o<128;++o)for(var a=0;a<128;++a){var l=Ce(a/8,o/8,s/8);l=128*(1+l),i[a+128*o+128*s*128]=l}return this.texture3d=M(je.TEXTURE_3D),je.texParameteri(je.TEXTURE_3D,je.TEXTURE_BASE_LEVEL,0),je.texParameteri(je.TEXTURE_3D,je.TEXTURE_MAX_LEVEL,Math.log2(128)),je.texParameteri(je.TEXTURE_3D,je.TEXTURE_MIN_FILTER,je.LINEAR_MIPMAP_LINEAR),je.texParameteri(je.TEXTURE_3D,je.TEXTURE_MAG_FILTER,je.LINEAR),je.texImage3D(je.TEXTURE_3D,0,je.R8,128,128,128,0,je.RED,je.UNSIGNED_BYTE,i),je.generateMipmap(je.TEXTURE_3D),!0}draw(e){const t=(this.currentSourceIdx+1)%2;je.useProgram(this.program),je.bindVertexArray(this.VAO[this.currentSourceIdx]),je.bindTransformFeedback(je.TRANSFORM_FEEDBACK,this.TFO[t]);const r=new n;r.multiply(this.camera.projection),r.multiply(this.camera.matrixWorldInvert),je.uniform1f(je.getUniformLocation(this.program,"u_time"),e+5e3),je.uniform1f(je.getUniformLocation(this.program,"count"),He),je.uniform1i(je.getUniformLocation(this.program,"noize"),this.texture3d.index),je.enable(je.RASTERIZER_DISCARD),je.beginTransformFeedback(je.POINTS),je.drawArraysInstanced(je.POINTS,0,1,He),je.endTransformFeedback(),je.disable(je.RASTERIZER_DISCARD),je.bindTransformFeedback(je.TRANSFORM_FEEDBACK,null),je.bindBuffer(je.TRANSFORM_FEEDBACK_BUFFER,null);const i=je.fenceSync(je.SYNC_GPU_COMMANDS_COMPLETE,0);je.waitSync(i,0,je.TIMEOUT_IGNORED),je.deleteSync(i),je.useProgram(this.program2),je.bindVertexArray(this.VAO[t]),je.uniformMatrix4fv(je.getUniformLocation(this.program2,"MVPMatrix"),!1,r.elements),je.uniform1i(je.getUniformLocation(this.program2,"light"),this.getLight()),je.drawArraysInstanced(je.POINTS,0,1,He),this.currentSourceIdx=(this.currentSourceIdx+1)%2}}let Ye;r.d(t,"RedCube",function(){return qe});class qe{constructor(e,t,r){this.reflow=!0,this.scene=new f,this.canvas=t,this.processors=r,this.camera=new u,this.camera.setProps({type:"perspective",isInitial:!0,zoom:1,aspect:this.canvas.offsetWidth/this.canvas.offsetHeight,perspective:{yfov:.6}}),this.light=new d,this.events=new T(this.redraw.bind(this)),this.fps=new Z,this.env=new $,this.env.setCamera(this.camera),this.env.setCanvas(this.canvas),this.PP=new Pe(r),this.PP.setLight(this.light),this.PP.setCanvas(this.canvas),this.PP.setCamera(this.camera),this.PP.setRender(this.renderScene.bind(this)),this.Particles=new We(()=>{return this.PP.postprocessors.find(e=>e instanceof xe).texture.index}),this.Particles.setCamera(this.camera);const n=[];0===r.length&&n.push({name:"TONE"}),this.parse=new ie(e),this.parse.setScene(this.scene),this.parse.setCamera(this.camera),this.parse.setLight(this.light),this.parse.setUpdateCamera(this.updateCamera.bind(this)),this.parse.setCanvas(this.canvas),this.parse.setResize(this.resize.bind(this)),this.parse.setDefines(n)}async init(e){await this.parse.getJson(),await this.glInit(),await this.Particles.build(),await this.parse.initTextures(),await this.PP.buildScreenBuffer(),await this.parse.getBuffer(),await this.parse.buildSkin(),await this.parse.buildMesh(),await this.parse.buildAnimation(),await this.env.createEnvironmentBuffer(),await this.draw(),e()}updateCamera(e){this.camera=e,this.env.setCamera(e),this.PP.setCamera(e)}redraw(e,t,r){if("zoom"===e&&(this.camera.props.zoom=Math.max(Math.min(t,3/this.camera.props.aspect),.5),this.updateNF(),this.camera.setProjection(L(this.camera.props)),this.needUpdateProjection=!0),"rotate"===e){const e=N(t,this.camera.projection,this.canvas.offsetWidth,this.canvas.offsetHeight),s=N(r,this.camera.projection,this.canvas.offsetWidth,this.canvas.offsetHeight),o=new i(y(e)),a=new i(y(s)),l=5*i.angle(a,o);if(l<1e-6||isNaN(l))return;const c=new i(o.elements).applyMatrix4(this.camera.matrixWorld),h=new i(a.elements).applyMatrix4(this.camera.matrixWorld),m=i.cross(h,c).normalize(),u=new n;u.makeRotationAxis(m,l),u.multiply(this.camera.matrixWorld),this.camera.setMatrixWorld(u.elements),this.needUpdateView=!0}if("pan"===e){const e=N(t,this.camera.projection,this.canvas.offsetWidth,this.canvas.offsetHeight),n=N(r,this.camera.projection,this.canvas.offsetWidth,this.canvas.offsetHeight),s=new i([...e,0]),o=new i([...n,0]),a=100*this.camera.modelSize,l=o.subtract(s).scale(a);this.camera.matrixWorld.translate(l.elements[0],l.elements[1],0),this.camera.setMatrixWorld(this.camera.matrixWorld.elements),this.needUpdateView=!0}"resize"===e&&(this.resize(e),this.needUpdateProjection=!0),this.reflow=!0}updateNF(){const e=Math.abs(this.camera.matrixWorldInvert.elements[14]),t=this.camera.props.perspective||this.camera.props.orthographic;e>this.camera.modelSize?(t.znear=e-this.camera.modelSize,t.zfar=e+this.camera.modelSize):(t.znear=1,t.zfar=1e4),this.camera.setProjection(L(this.camera.props))}resize(e){if(this.camera.props.aspect=this.canvas.offsetWidth/this.canvas.offsetHeight,this.canvas.width=this.canvas.offsetWidth*devicePixelRatio,this.canvas.height=this.canvas.offsetHeight*devicePixelRatio,Ye.viewport(0,0,this.canvas.offsetWidth*devicePixelRatio,this.canvas.offsetHeight*devicePixelRatio),this.camera.props.isInitial){const e=1/this.canvas.width*this.camera.modelSize*3e3*devicePixelRatio;this.camera.setZ(e),this.light.setZ(e),this.light.update(Math.PI/2),this.needUpdateView=!0}else this.light.setZ(this.camera.matrixWorld.elements[14]),this.light.update(Math.PI/2),this.needUpdateView=!0;this.updateNF(),e&&(this.PP.clear(),this.PP.buildScreenBuffer())}glInit(){if(Ye=this.canvas.getContext("webgl2",{antialias:!1}),this.gl=Ye,!Ye)throw new Error("Webgl 2 doesnt support");return function(e){g=e;for(const e in g){const t=g[e];"number"==typeof t&&(E[t]=e)}}(Ye),this.env.setGl(Ye),this.PP.setGl(Ye),this.parse.setGl(Ye),this.Particles.setGl(Ye),!0}animate(e){e-=Math.floor(e/this.parse.duration)*this.parse.duration;for(const t of this.parse.tracks){const r=F(e,t.keys);if(-1===r[0]||-1===r[1]||t.stoped)continue;r[0]===t.keys.length-1&&(t.stoped=!0);const n=t.keys[r[0]],a=t.keys[r[1]],l=r[2],h=A(t.type);let f;3===h?f=i:4===h?f=s:2===h&&(f=o);const d=new f(n.value),p=new f(a.value);if("rotation"===t.type){const e=new s;e.lerp(d.elements,p.elements,l);for(const r of t.meshes)r.matrix.makeRotationFromQuaternion(e.elements)}else if("scale"===t.type){const e=new i;e.lerp(d.elements,p.elements,l);for(const r of t.meshes)r.matrix.scale(e)}else if("weights"===t.type){const e=new o;e.lerp(d.elements,p.elements,l);for(const r of t.meshes){const t={};for(const n in r.geometry.targets[0]){let i=0;t[n]=new Float32Array(r.geometry.attributes[n].length);for(let s=0;s<t[n].length;s++)"TANGENT"!==n||(s+1)%4!=0?t[n][s]=r.geometry.attributes[n][s]+e.elements[0]*r.geometry.targets[0][n][s-i]+e.elements[1]*r.geometry.targets[1][n][s-i]:i++}Ye.bindVertexArray(r.geometry.VAO);for(const e in t){const r=Ye.createBuffer();Ye.bindBuffer(Ye.ARRAY_BUFFER,r),Ye.bufferData(Ye.ARRAY_BUFFER,t[e],Ye.STATIC_DRAW);const n=C(e);Ye.enableVertexAttribArray(n[0]),Ye.vertexAttribPointer(n[0],n[1],n[2],!1,0,0)}Ye.bindVertexArray(null)}}else if("translation"===t.type){const e=new i;e.lerp(d.elements,p.elements,l);for(const r of t.meshes)r.matrix.setTranslate(e)}else console.error("ERROR");for(const e of t.meshes)B(e,e=>{e.updateMatrix(),e instanceof m&&(e.reflow=!0),e instanceof c&&(e.reflow=!0),e instanceof u&&e===this.camera&&(this.needUpdateView=!0)});this.reflow=!0}}draw(){Ye.clearColor(0,0,0,1),this.render()}render(e=0){const t=e/1e3;this.animate(t),this.reflow&&(this.reflow=!1,this.PP.postprocessors.length>0&&(this.PP.bindPrePass(),this.PP.preProcessing(),this.PP.bindPostPass()),Ye.clear(Ye.COLOR_BUFFER_BIT|Ye.DEPTH_BUFFER_BIT),this.renderScene(!this.processors.includes("shadow"),!1),this.PP.postprocessors.find(e=>e instanceof xe)&&(this.Particles.draw(e),this.reflow=!0),B(this.scene,e=>{e.reflow=!1}),this.needUpdateView=!1,this.needUpdateProjection=!1,this.PP.postprocessors.length>0&&this.PP.postProcessing()),this.fps.tick(e),requestAnimationFrame(this.render.bind(this))}renderScene(e,t){if(Ye.enable(Ye.DEPTH_TEST),Ye.enable(Ye.CULL_FACE),this.needUpdateView){const e=a(this.camera.getViewProjMatrix());this.scene.meshes.forEach(t=>{t.visible=t.isVisible(e)})}this.scene.opaqueChildren.forEach(r=>{r.visible&&r.draw(Ye,this.getState(),e,t)}),this.scene.transparentChildren.length&&(Ye.enable(Ye.BLEND),Ye.depthMask(!1),Ye.blendFuncSeparate(Ye.SRC_COLOR,Ye.DST_COLOR,Ye.ONE,Ye.ZERO),this.scene.transparentChildren.forEach(r=>{r.visible&&r.draw(Ye,this.getState(),e,t)}),Ye.disable(Ye.BLEND),Ye.depthMask(!0),Ye.blendFuncSeparate(Ye.ONE,Ye.ZERO,Ye.ONE,Ye.ZERO))}getState(){return{camera:this.camera,light:this.light,preDepthTexture:this.PP.preDepthTexture,fakeDepth:this.PP.fakeDepth,needUpdateView:this.needUpdateView,needUpdateProjection:this.needUpdateProjection,irradiancemap:this.env.irradiancemap,prefilterMap:this.env.prefilterMap,brdfLUT:this.env.brdfLUTTexture}}}}])});
//# sourceMappingURL=redcube.js.map