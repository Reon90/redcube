!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("redcube",[],t):"object"==typeof exports?exports.redcube=t():e.redcube=t()}(window,function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=19)}([function(e,t){e.exports="#version 300 es\r\nlayout (location = 0) in vec2 pos;\r\n\r\nout vec2 uv;\r\n\r\nvoid main() {\r\n    uv = pos * 0.5 + 0.5;\r\n    gl_Position = vec4(pos, 0.0, 1.0); \r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nin vec2 uv;\r\nout vec4 color;\r\n\r\nuniform vec2 denom;\r\nuniform sampler2D uTexture;\r\n\r\nconst float weight[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);\r\n\r\nvoid main() {             \r\n    vec2 offset = 1.0 / vec2(textureSize(uTexture, 0));\r\n    vec3 result = texture(uTexture, uv).rgb * weight[0];\r\n\r\n    for (int i = 1; i < 5; ++i) {\r\n        result += texture(uTexture, uv + denom * (offset * float(i))).rgb * weight[i];\r\n        result += texture(uTexture, uv - denom * (offset * float(i))).rgb * weight[i];\r\n    }\r\n\r\n    color = vec4(result, 1.0);\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nlayout (location = 0) in vec3 inPosition;\r\n\r\nuniform mat4 projection;\r\nuniform mat4 view;\r\n\r\nout vec3 outUV;\r\n\r\nvoid main() {\r\n\toutUV = inPosition;\r\n    mat4 rotView = mat4(mat3(view));\r\n    gl_Position = projection * rotView * vec4(inPosition, 1.0);\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nin vec2 uv;\r\n// in vec4 tPos1;\r\n// in vec4 tPos2;\r\nin vec4 vPosLight1;\r\nin vec4 vPosLight2;\r\nout float color;\r\n\r\nuniform sampler2D lightTexture;\r\nuniform sampler2D cameraTexture;\r\n\r\nuniform mat4 proj;\r\nuniform mat4 light;\r\nuniform mat4 view;\r\n\r\nconst int samples = 80;\r\n\r\nvoid main() {\r\n    float stp = 1.0/float(samples);\r\n\tfloat k = 0.0;\r\n    float d = 0.0;\r\n\r\n    for (int i = 0; i < samples; i++) {\r\n\r\n        //vec4 vPos = mix(tPos1,tPos2,k);\r\n        vec4 vPosLight = mix(vPosLight1,vPosLight2,k);\r\n        k += stp;\r\n\r\n        vec3 ShadowTexC = (vPosLight.xyz/vPosLight.w) * 0.5 + 0.5;\r\n\r\n        float add = step(texture(lightTexture, ShadowTexC.xy).x, ShadowTexC.z);\r\n        d += add*stp;\r\n\t}\r\n\r\n    color = min((1.0 - d), 0.2);\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nlayout (location = 0) in vec2 pos;\r\n\r\nout vec2 uv;\r\nout vec4 vPosLight1;\r\nout vec4 vPosLight2;\r\n\r\nuniform mat4 proj;\r\nuniform mat4 light;\r\nuniform mat4 Iproj;\r\nuniform mat4 Iview;\r\n\r\nvoid main() {\r\n    vec4 p1 = Iview * Iproj * vec4(pos, -1.0/4.0, 1.0);\r\n    vec4 p2 = Iview * Iproj * vec4(pos, 1.0/4.0, 1.0);\r\n\r\n\tvPosLight1 = proj * light * p1;\r\n    vPosLight2 = proj * light * p2;\r\n\r\n\tuv = pos * 0.5 + 0.5;\r\n\tgl_Position = vec4(pos, 0.0, 1.0);\r\n}\r\n"},function(e,t){var r="#\\?RADIANCE",n="#.*",i="EXPOSURE=\\s*([0-9]*[.][0-9]*)",s="FORMAT=32-bit_rle_rgbe",o="-Y ([0-9]+) \\+X ([0-9]+)";e.exports=function(e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));var t=0,a=e.length,l=10;function c(){var r="";do{var n=e[t];if(n==l){++t;break}r+=String.fromCharCode(n)}while(++t<a);return r}for(var h=0,u=0,f=1,m=!1,d=0;d<20;d++){var p,T=c();if(p=T.match(r));else if(p=T.match(s))m=!0;else if(p=T.match(i))f=Number(p[1]);else if(p=T.match(n));else if(p=T.match(o)){u=Number(p[1]),h=Number(p[2]);break}}if(!m)throw new Error("File is not run length encoded!");var E=new Uint8Array(h*u*4);!function(e,t,r,n,i,s){var o,a,l,c=new Array(4),h=null,u=new Array(2),f=e.length;function m(t){var r=0;do{t[r++]=e[n]}while(++n<f&&r<t.length);return r}function d(t,r,i){var s=0;do{t[r+s++]=e[n]}while(++n<f&&s<i);return s}function p(e,t,r,n){var i=4*n,s=d(t,r,i);if(s<i)throw new Error("Error reading raw pixels: got "+s+" bytes, expected "+i)}for(;s>0;){if(m(c)<c.length)throw new Error("Error reading bytes: expected "+c.length);if(2!=c[0]||2!=c[1]||0!=(128&c[2]))return t[r++]=c[0],t[r++]=c[1],t[r++]=c[2],t[r++]=c[3],void p(0,t,r,i*s-1);if(((255&c[2])<<8|255&c[3])!=i)throw new Error("Wrong scanline width "+((255&c[2])<<8|255&c[3])+", expected "+i);null==h&&(h=new Array(4*i)),o=0;for(var T=0;T<4;T++)for(a=(T+1)*i;o<a;){if(m(u)<u.length)throw new Error("Error reading 2-byte buffer");if((255&u[0])>128){if(0==(l=(255&u[0])-128)||l>a-o)throw new Error("Bad scanline data");for(;l-- >0;)h[o++]=u[1]}else{if(0==(l=255&u[0])||l>a-o)throw new Error("Bad scanline data");if(h[o++]=u[1],--l>0){if(d(h,o,l)<l)throw new Error("Error reading non-run data");o+=l}}}for(T=0;T<i;T++)t[r+0]=h[T],t[r+1]=h[T+i],t[r+2]=h[T+2*i],t[r+3]=h[T+3*i],r+=4;s--}}(e,E,0,t,h,u);for(var g=new Float32Array(h*u*4),v=0;v<E.length;v+=4){var R=E[v+0]/255,b=E[v+1]/255,x=E[v+2]/255,A=E[v+3],F=Math.pow(2,A-128);R*=F,b*=F,x*=F;var _=v;g[_+0]=R,g[_+1]=b,g[_+2]=x,g[_+3]=1}return{shape:[h,u],exposure:f,gamma:1,data:g}}},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nin vec3 outUV;\r\nlayout (location = 0) out vec4 color;\r\n\r\nuniform sampler2D diffuse;\r\n\r\nconst vec2 invAtan = vec2(0.1591, 0.3183);\r\nvec2 SampleSphericalMap(vec3 v) {\r\n    vec2 uv = vec2(atan(v.z, v.x), asin(v.y));\r\n    uv *= invAtan;\r\n    uv += 0.5;\r\n    return uv;\r\n}\r\n\r\nvoid main() {\t\t\r\n    vec2 uv = SampleSphericalMap(normalize(outUV));\r\n    vec3 c = texture(diffuse, uv).rgb;\r\n    \r\n    color = vec4(c, 1.0);\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nin vec3 outUV;\r\nlayout (location = 0) out vec4 color;\r\n\r\nuniform samplerCube environmentMap;\r\n\r\nconst float PI = 3.14159265359;\r\n\r\nvoid main() {\r\n    vec3 N = normalize(outUV);\r\n    vec3 irradiance = vec3(0.0);\r\n\r\n    vec3 up    = vec3(0.0, 1.0, 0.0);\r\n    vec3 right = cross(up, N);\r\n    up         = cross(N, right);\r\n\r\n    float sampleDelta = 0.025;\r\n    float nrSamples = 0.0; \r\n    for(float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta)\r\n    {\r\n        for(float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta)\r\n        {\r\n            // spherical to cartesian (in tangent space)\r\n            vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));\r\n            // tangent space to world\r\n            vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N; \r\n\r\n            irradiance += textureLod(environmentMap, sampleVec, 3.0).rgb * cos(theta) * sin(theta);\r\n            nrSamples++;\r\n        }\r\n    }\r\n    irradiance = PI * irradiance * (1.0 / float(nrSamples));\r\n    \r\n    color = vec4(irradiance, 1.0);\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nin vec3 outUV;\r\nlayout (location = 0) out vec4 color;\r\n\r\nuniform samplerCube environmentMap;\r\nuniform float roughness;\r\n\r\nconst float PI = 3.14159265359;\r\n\r\nfloat RadicalInverse_VdC(uint bits) {\r\n    bits = (bits << 16u) | (bits >> 16u);\r\n    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\r\n    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\r\n    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\r\n    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\r\n    return float(bits) * 2.3283064365386963e-10; // / 0x100000000\r\n}\r\n// ----------------------------------------------------------------------------\r\nvec2 Hammersley(uint i, uint N) {\r\n    return vec2(float(i)/float(N), RadicalInverse_VdC(i));\r\n}  \r\nvec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness) {\r\n    float a = roughness*roughness;\r\n\t\r\n    float phi = 2.0 * PI * Xi.x;\r\n    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));\r\n    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);\r\n\t\r\n    // from spherical coordinates to cartesian coordinates\r\n    vec3 H;\r\n    H.x = cos(phi) * sinTheta;\r\n    H.y = sin(phi) * sinTheta;\r\n    H.z = cosTheta;\r\n\t\r\n    // from tangent-space vector to world-space sample vector\r\n    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\r\n    vec3 tangent   = normalize(cross(up, N));\r\n    vec3 bitangent = cross(N, tangent);\r\n\t\r\n    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\r\n    return normalize(sampleVec);\r\n} \r\n\r\nfloat DistributionGGX(vec3 N, vec3 H, float roughness) {\r\n    float a = roughness*roughness;\r\n    float a2 = max(a*a, 0.0001);\r\n    float NdotH = max(dot(N, H), 0.0);\r\n    float NdotH2 = NdotH*NdotH;\r\n\r\n    float nom   = a2;\r\n    float denom = (NdotH2 * (a2 - 1.0) + 1.0);\r\n    denom = PI * denom * denom;\r\n\r\n    return nom / max(denom, 0.0001);\r\n}\r\n\r\nvoid main() {\t\t\r\n    vec3 N = normalize(outUV);    \r\n    vec3 R = N;\r\n    vec3 V = R;\r\n\r\n    const uint SAMPLE_COUNT = 1024u;\r\n    float totalWeight = 0.0;   \r\n    vec3 prefilteredColor = vec3(0.0);     \r\n    for(uint i = 0u; i < SAMPLE_COUNT; ++i) {\r\n        vec2 Xi = Hammersley(i, SAMPLE_COUNT);\r\n        vec3 H  = ImportanceSampleGGX(Xi, N, roughness);\r\n        vec3 L  = normalize(2.0 * dot(V, H) * H - V);\r\n\r\n        float NdotL = max(dot(N, L), 0.0);\r\n        if (NdotL > 0.0) {\r\n            float D = DistributionGGX(N, H, roughness);\r\n            float pdf = (D * max(dot(N, H), 0.0) / (4.0 * max(dot(H, V), 0.0))) + 0.0001;\r\n             \r\n            float saTexel = 4.0 * PI / (6.0 * 512.0 * 512.0);\r\n            float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.00001);\r\n             \r\n            float mipLevel = roughness == 0.0 ? 0.0 :  0.5 * log2( saSample / saTexel )  ;\r\n                                 \r\n            prefilteredColor += textureLod( environmentMap, L, mipLevel ).rgb * NdotL;     \r\n            totalWeight += NdotL;\r\n        }\r\n    }\r\n    prefilteredColor = prefilteredColor / totalWeight;\r\n    \r\n    color = vec4(prefilteredColor, 1.0);\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nin vec2 uv;\r\nlayout (location = 0) out vec2 color;\r\n\r\nconst float PI = 3.14159265359;\r\n\r\nfloat GeometrySchlickGGX(float NdotV, float roughness) {\r\n    float a = roughness;\r\n    float k = (a * a) / 2.0;\r\n\r\n    float nom   = NdotV;\r\n    float denom = NdotV * (1.0 - k) + k;\r\n\r\n    return nom / denom;\r\n}\r\n\r\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {\r\n    float NdotV = max(dot(N, V), 0.0);\r\n    float NdotL = max(dot(N, L), 0.0);\r\n    float ggx2 = GeometrySchlickGGX(NdotV, roughness);\r\n    float ggx1 = GeometrySchlickGGX(NdotL, roughness);\r\n\r\n    return ggx1 * ggx2;\r\n} \r\n\r\nfloat RadicalInverse_VdC(uint bits) {\r\n    bits = (bits << 16u) | (bits >> 16u);\r\n    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\r\n    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\r\n    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\r\n    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\r\n    return float(bits) * 2.3283064365386963e-10; // / 0x100000000\r\n}\r\n\r\nvec2 Hammersley(uint i, uint N) {\r\n    return vec2(float(i)/float(N), RadicalInverse_VdC(i));\r\n}  \r\n\r\nvec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness) {\r\n    float a = roughness*roughness;\r\n\t\r\n    float phi = 2.0 * PI * Xi.x;\r\n    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));\r\n    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);\r\n\t\r\n    // from spherical coordinates to cartesian coordinates\r\n    vec3 H;\r\n    H.x = cos(phi) * sinTheta;\r\n    H.y = sin(phi) * sinTheta;\r\n    H.z = cosTheta;\r\n\t\r\n    // from tangent-space vector to world-space sample vector\r\n    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\r\n    vec3 tangent   = normalize(cross(up, N));\r\n    vec3 bitangent = cross(N, tangent);\r\n\t\r\n    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\r\n    return normalize(sampleVec);\r\n} \r\n\r\nvec2 IntegrateBRDF(float NdotV, float roughness) {\r\n    vec3 V;\r\n    V.x = sqrt(1.0 - NdotV*NdotV);\r\n    V.y = 0.0;\r\n    V.z = NdotV;\r\n\r\n    float A = 0.0;\r\n    float B = 0.0;\r\n\r\n    vec3 N = vec3(0.0, 0.0, 1.0);\r\n\r\n    const uint SAMPLE_COUNT = 1024u;\r\n    for(uint i = 0u; i < SAMPLE_COUNT; ++i) {\r\n        vec2 Xi = Hammersley(i, SAMPLE_COUNT);\r\n        vec3 H  = ImportanceSampleGGX(Xi, N, roughness);\r\n        vec3 L  = normalize(2.0 * dot(V, H) * H - V);\r\n\r\n        float NdotL = max(L.z, 0.0);\r\n        float NdotH = max(H.z, 0.0);\r\n        float VdotH = max(dot(V, H), 0.0);\r\n\r\n        if(NdotL > 0.0) {\r\n            float G = GeometrySmith(N, V, L, roughness);\r\n            float G_Vis = (G * VdotH) / (NdotH * NdotV);\r\n            float Fc = pow(1.0 - VdotH, 5.0);\r\n\r\n            A += (1.0 - Fc) * G_Vis;\r\n            B += Fc * G_Vis;\r\n        }\r\n    }\r\n    A /= float(SAMPLE_COUNT);\r\n    B /= float(SAMPLE_COUNT);\r\n    return vec2(A, B);\r\n}\r\n\r\nvoid main() {\t\t\r\n    vec2 integratedBRDF = IntegrateBRDF(uv.x, uv.y);\r\n    color = integratedBRDF;\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nlayout (location = 0) in vec3 inPosition;\r\nlayout (location = 1) in vec3 inNormal;\r\nlayout (location = 2) in vec2 inUV;\r\nlayout (location = 3) in vec4 inJoint;\r\nlayout (location = 4) in vec4 inWeight;\r\nlayout (location = 5) in vec4 inTangent;\r\nlayout (location = 6) in vec4 inColor;\r\nlayout (location = 7) in vec2 inUV2;\r\n\r\nout vec4 vColor;\r\nout vec2 outUV;\r\nout vec2 outUV2;\r\nout vec3 outPosition;\r\nout vec4 outPositionView;\r\n#ifdef TANGENT\r\n    out mat3 outTBN;\r\n#else\r\n    out vec3 outNormal;\r\n#endif\r\n\r\nuniform Matrices {\r\n    mat4 model;\r\n    mat4 normalMatrix;\r\n    mat4 view;\r\n    mat4 projection;\r\n    mat4 light;\r\n    vec4 isShadow;\r\n};\r\n\r\n#ifdef JOINTNUMBER\r\nuniform Skin {\r\n    mat4 joint[JOINTNUMBER];\r\n};\r\n#endif\r\n\r\nvoid main() {\r\n    #ifdef JOINTNUMBER\r\n        mat4 skin = inWeight.x * joint[int(inJoint.x)];\r\n        skin += inWeight.y * joint[int(inJoint.y)];\r\n        skin += inWeight.z * joint[int(inJoint.z)];\r\n        skin += inWeight.w * joint[int(inJoint.w)];\r\n    #else\r\n        mat4 skin = mat4(1.0);\r\n    #endif\r\n\r\n    vColor = inColor;\r\n    outUV = inUV;\r\n    outUV2 = inUV2;\r\n    #ifdef TANGENT\r\n        vec3 normalW = normalize(vec3(model * vec4(inNormal.xyz, 0.0)));\r\n        vec3 tangentW = normalize(vec3(model * vec4(inTangent.xyz, 0.0)));\r\n        vec3 bitangentW = cross(normalW, tangentW) * inTangent.w;\r\n        outTBN = mat3(tangentW, bitangentW, normalW);\r\n    #else\r\n        outNormal = normalize(mat3(normalMatrix) * mat3(skin) * inNormal);\r\n    #endif\r\n    outPosition = vec3(model * skin * vec4(inPosition, 1.0));\r\n    outPositionView = projection * light * model * skin * vec4(inPosition, 1.0);\r\n    if (isShadow.x == 1.0) {\r\n        gl_Position = projection * light * model * skin * vec4(inPosition, 1.0);\r\n    } else {\r\n        gl_Position = projection * view * model * skin * vec4(inPosition, 1.0);\r\n    }\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\n#define IBL 1\r\n\r\nin vec4 vColor;\r\nin vec2 outUV;\r\nin vec2 outUV2;\r\nin vec3 outPosition;\r\nin vec4 outPositionView;\r\n#ifdef TANGENT\r\n    in mat3 outTBN;\r\n#else\r\n    in vec3 outNormal;\r\n#endif\r\n\r\nlayout (location = 0) out vec4 color;\r\nlayout (location = 1) out vec3 normalColor;\r\n\r\nuniform Material {\r\n    vec4 baseColorFactor;\r\n    vec3 lightPos;\r\n    vec3 viewPos;\r\n    mat3 textureMatrix;\r\n    vec3 specularFactor;\r\n    vec3 emissiveFactor;\r\n    vec4 glossinessFactor;\r\n    vec4 metallicFactor;\r\n    vec4 roughnessFactor;\r\n};\r\nuniform sampler2D baseColorTexture;\r\nuniform sampler2D metallicRoughnessTexture;\r\nuniform sampler2D normalTexture;\r\nuniform sampler2D emissiveTexture;\r\nuniform sampler2D occlusionTexture;\r\n\r\nuniform samplerCube prefilterMap;\r\nuniform sampler2D brdfLUT;  \r\nuniform samplerCube irradianceMap;\r\nuniform sampler2D depthTexture;\r\n\r\nconst float RECIPROCAL_PI = 0.31830988618;\r\nconst float PI = 3.14159265359;\r\nconst float EPSILON = 1e-6;\r\nconst float ambientStrength = 0.1;\r\nconst float specularStrength = 2.5;\r\nconst float specularPower = 32.0;\r\n#ifdef USE_PBR\r\nconst vec3 lightColor = vec3(10.0, 10.0, 10.0);\r\n#else\r\nconst vec3 lightColor = vec3(1.0, 1.0, 1.0);\r\n#endif\r\nconst float gamma = 2.2;\r\n\r\nvec2 getUV(int index) {\r\n    if (index == 1) {\r\n        return outUV;\r\n    } else {\r\n        return outUV2;\r\n    }\r\n}\r\n\r\nfloat ShadowCalculation(vec4 fragPosLightSpace, float bias) {\r\n    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;\r\n    projCoords = projCoords * 0.5 + 0.5;\r\n    float currentDepth = projCoords.z;\r\n\r\n    float shadow = 0.0;\r\n    vec2 texelSize = 1.0 / vec2(textureSize(depthTexture, 0));\r\n    for (int x = -2; x <= 2; ++x) {\r\n        for (int y = -2; y <= 2; ++y) {\r\n            float pcfDepth = texture(depthTexture, projCoords.xy + vec2(x, y) * texelSize).r;\r\n            shadow += currentDepth - bias > pcfDepth ? 0.5 : 0.0;\r\n        }\r\n    }\r\n    shadow /= 25.0;\r\n\r\n    return shadow;\r\n}\r\n\r\nvec3 srgbToLinear(vec4 srgbIn) {\r\n    return pow(srgbIn.rgb, vec3(2.2));\r\n}\r\n\r\nfloat DistributionGGX(vec3 N, vec3 H, float roughness) {\r\n    float a = roughness*roughness;\r\n    float a2 = max(a*a, 0.0001);\r\n    float NdotH = max(dot(N, H), 0.0);\r\n    float NdotH2 = NdotH*NdotH;\r\n\r\n    float nom   = a2;\r\n    float denom = (NdotH2 * (a2 - 1.0) + 1.0);\r\n    denom = PI * denom * denom;\r\n\r\n    return nom / max(denom, 0.0001);\r\n}\r\n\r\nfloat GeometrySchlickGGX(float cosTheta, float roughness) {\r\n    float r = (roughness + 1.0);\r\n    float k = (r * r) / 8.0;\r\n\r\n    float nom   = cosTheta;\r\n    float denom = cosTheta * (1.0 - k) + k;\r\n\r\n    return nom / denom;\r\n}\r\n\r\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {\r\n    float NdotV = max(dot(N, V), 0.0);\r\n    float NdotL = max(dot(N, L), 0.0);\r\n    float ggx2 = GeometrySchlickGGX(NdotV, roughness);\r\n    float ggx1 = GeometrySchlickGGX(NdotL, roughness);\r\n\r\n    return ggx1 * ggx2;\r\n}\r\n\r\nvec3 fresnelSchlick(float cosTheta, vec3 F0) {\r\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\r\n}\r\nvec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness) {\r\n    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);\r\n} \r\n\r\nvec3 IBLAmbient(vec3 specularMap, vec3 baseColor, float metallic, vec3 n, vec3 H, float roughness, vec3 viewDir, vec3 lightDir, float ao) {\r\n    vec3 F0 = vec3(0.04);\r\n    F0 = mix(F0, baseColor, metallic);\r\n\r\n    #ifdef SPECULARGLOSSINESSMAP\r\n        F0 = specularMap;\r\n    #endif\r\n\r\n    vec3 F = fresnelSchlickRoughness(max(dot(n, viewDir), 0.0), F0, roughness);\r\n\r\n    vec3 kD = vec3(1.0) - F;\r\n    kD *= 1.0 - metallic;\r\n\r\n    vec3 R = reflect(-viewDir, n);   \r\n    const float MAX_REFLECTION_LOD = 4.0;\r\n    vec3 prefilteredColor = textureLod(prefilterMap, R,  roughness * MAX_REFLECTION_LOD).rgb;\r\n    vec2 envBRDF  = texture(brdfLUT, vec2(max(dot(n, viewDir), 0.0), roughness)).rg;\r\n    vec3 specular = prefilteredColor * (F * envBRDF.x + envBRDF.y);\r\n\r\n    vec3 irradiance = texture(irradianceMap, n).rgb;\r\n    vec3 diffuse = baseColor * irradiance;\r\n\r\n    return (kD * diffuse + specular) * ao;\r\n}\r\n\r\nvec3 CookTorranceSpecular(vec3 specularMap, vec3 baseColor, float metallic, vec3 n, vec3 H, float roughness, vec3 viewDir, vec3 lightDir) {\r\n    vec3 F0 = vec3(0.04); \r\n    F0 = mix(F0, baseColor, metallic);\r\n\r\n    #ifdef SPECULARGLOSSINESSMAP\r\n        F0 = specularMap;\r\n    #endif\r\n\r\n    float D = DistributionGGX(n, H, roughness);\r\n    float G = GeometrySmith(n, viewDir, lightDir, roughness);      \r\n    vec3 F = fresnelSchlick(max(dot(H, viewDir), 0.0), F0); \r\n\r\n    vec3 nominator = D * G * F;\r\n    float denominator = 4.0 * max(dot(n, viewDir), 0.0) * max(dot(n, lightDir), 0.0);\r\n    return nominator / max(denominator, 0.001);\r\n}\r\n\r\nvec3 LambertDiffuse(vec3 baseColor, float metallic, vec3 n, vec3 H, float roughness, vec3 viewDir, vec3 lightDir) {\r\n    float NdotL = max(dot(n, lightDir), 0.0);\r\n    vec3 F0 = vec3(0.04);\r\n    F0 = mix(F0, baseColor, metallic);\r\n\r\n    vec3 F = fresnelSchlick(max(dot(H, viewDir), 0.0), F0);    \r\n\r\n    vec3 kD = vec3(1.0) - F;\r\n    kD *= 1.0 - metallic;\r\n    return baseColor * kD / PI;\r\n}\r\n\r\nfloat saturate(float a) {\r\n\tif (a > 1.0f) return 1.0f;\r\n\tif (a < 0.0f) return 0.0f;\r\n\treturn a;\r\n}\r\nvec3 ImprovedOrenNayarDiffuse(vec3 baseColor, float metallic, vec3 N, vec3 H, float a, vec3 V, vec3 L) {\r\n    vec3 F0 = vec3(0.04);\r\n    F0 = mix(F0, baseColor, metallic);\r\n    vec3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);\r\n    vec3 kD = vec3(1.0) - F;\r\n    kD *= 1.0 - metallic;\r\n    vec3 diffuseColor = baseColor * kD;\r\n\t// calculate intermediary values\r\n\tfloat dotNL = saturate(dot(N, L));\r\n\tfloat dotNV = saturate(dot(N, V));\r\n\tfloat dotLV = saturate(dot(L, V));\r\n\tfloat dotLH = saturate(dot(L, H));\r\n\r\n\tfloat s = dotLV - dotNL * dotNV;\r\n\tfloat t = mix(1.0, max(dotNL, dotNV), step(0.0, s));\r\n\tfloat st = s * (1.0 / (t + EPSILON));\r\n\r\n\tfloat sigma2 = a;\r\n\tvec3 A = diffuseColor * (0.17 * sigma2 / (sigma2 + 0.13)) + vec3(1.0 - 0.5 * sigma2 / (sigma2 + 0.33));\r\n\tfloat B = 0.45 * sigma2 / (sigma2 + 0.09);\r\n\treturn (diffuseColor * max(0.0, dotNL)) * (A + vec3(B * s / t) / PI);\r\n}\r\n\r\nvoid main() {\r\n    #ifdef BASECOLORTEXTURE\r\n        vec2 uv = outUV;\r\n        #ifdef TEXTURE_TRANSFORM\r\n            uv = ( textureMatrix * vec3(uv.xy, 1.0) ).xy;\r\n        #endif\r\n        vec3 baseColor = srgbToLinear(texture(baseColorTexture, uv)) * baseColorFactor.rgb;\r\n        float alpha = min(texture(baseColorTexture, uv).a, baseColorFactor.a);\r\n    #else\r\n        vec3 baseColor = baseColorFactor.rgb;\r\n        float alpha = baseColorFactor.a;\r\n    #endif\r\n\r\n    #ifdef ALPHATEST\r\n    if ( alpha < ALPHATEST ) {\r\n        discard;\r\n    }\r\n    #endif\r\n\r\n    if ( length(vColor.rgb) != 0.0 ) {\r\n        baseColor.rgb *= vColor.rgb;\r\n    }\r\n\r\n    #ifdef OCCLUSIONMAP\r\n        float ao = texture(occlusionTexture, outUV).r;\r\n    #else\r\n        float ao = 0.2;\r\n    #endif\r\n\r\n    float roughness = roughnessFactor.x;\r\n    float metallic = metallicFactor.x;\r\n    vec3 specularMap = vec3(0);\r\n    #ifdef SPECULARGLOSSINESSMAP\r\n        #ifdef METALROUGHNESSMAP\r\n            roughness = 1.0 - texture(metallicRoughnessTexture, outUV).a;\r\n            specularMap = srgbToLinear(texture(metallicRoughnessTexture, outUV));\r\n        #else\r\n            roughness = glossinessFactor.x;\r\n            specularMap = specularFactor;\r\n        #endif\r\n    #else\r\n        #ifdef METALROUGHNESSMAP\r\n            roughness = texture(metallicRoughnessTexture, outUV).g;\r\n            metallic = texture(metallicRoughnessTexture, outUV).b;\r\n        #endif\r\n    #endif\r\n\r\n    #ifdef TANGENT\r\n        #ifdef NORMALMAP\r\n            vec3 n = texture(normalTexture, outUV).rgb;\r\n            n = normalize(outTBN * (2.0 * n - 1.0));\r\n        #else\r\n            vec3 n = outTBN[2].xyz;\r\n        #endif\r\n    #else\r\n        vec3 n = outNormal;\r\n    #endif\r\n\r\n    vec3 viewDir = normalize(viewPos - outPosition);\r\n    vec3 lightDir = normalize(lightPos - outPosition);\r\n    float NdotL = max(dot(n, lightDir), 0.0);\r\n    vec3 H = normalize(viewDir + lightDir);\r\n    float distance = length(lightPos - outPosition);\r\n    float attenuation = 1.0 / (distance * distance);\r\n    vec3 radiance = lightColor; //* attenuation;\r\n\r\n    float shadow = 1.0;\r\n    #ifdef SHADOWMAP\r\n        float shadowBias = max(0.05 * (1.0 - dot(n, lightDir)), 0.005);\r\n        shadow = 1.0 - ShadowCalculation(outPositionView, shadowBias);\r\n    #endif\r\n\r\n    #ifdef USE_PBR\r\n        vec3 specular = CookTorranceSpecular(specularMap, baseColor, metallic, n, H, roughness, viewDir, lightDir);\r\n        vec3 diffuse = ImprovedOrenNayarDiffuse(baseColor, metallic, n, H, roughness, viewDir, lightDir);\r\n        #ifdef SPECULARGLOSSINESSMAP\r\n            diffuse = baseColor * (1.0 - max(max(specularMap.r, specularMap.g), specularMap.b));\r\n        #endif\r\n\r\n        vec3 ambient = vec3(0.0);\r\n        #ifdef IBL\r\n            ambient = IBLAmbient(specularMap, baseColor, metallic, n, H, roughness, viewDir, lightDir, ao);\r\n        #else\r\n            ambient = vec3(0.03) * baseColor * ao;\r\n        #endif\r\n\r\n        vec3 emissive = emissiveFactor;\r\n        #ifdef EMISSIVEMAP\r\n            emissive = srgbToLinear(texture(emissiveTexture, getUV(EMISSIVEMAP)));\r\n        #endif\r\n\r\n        color = vec4(shadow * (emissive + ambient + (diffuse + specular) * radiance * NdotL), alpha);\r\n    #else\r\n        vec3 ambient = ambientStrength * lightColor;\r\n\r\n        float diff = max(dot(n, lightDir), 0.0);\r\n        vec3 diffuse = diff * lightColor;\r\n\r\n        vec3 reflectDir = reflect(-lightDir, n);\r\n        float spec = pow(max(dot(viewDir, reflectDir), 0.0), specularPower);\r\n        vec3 specular = specularStrength * spec * lightColor;\r\n\r\n        color = vec4(baseColor.rgb * (ambient + diffuse + specular) * shadow, alpha);\r\n    #endif\r\n\r\n    #ifdef TONE\r\n        color.rgb = color.rgb / (color.rgb + vec3(1.0));\r\n        color.rgb = pow(color.rgb, vec3(1.0 / gamma));\r\n    #endif\r\n\r\n    normalColor = n;\r\n}\r\n"},function(e,t){e.exports="#version 300 es\nprecision highp float;\n\nin vec2 uv;\nout float color;\n\nconst int kernelSize = 32;\nconst float radius = 1.0;\nconst float bias = 0.0;\nconst float power = 5.0;\n\nuniform sampler2D normBuff;\nuniform sampler2D depthBuff;\nuniform sampler2D noice;\nuniform vec2 noiseScale;\nuniform vec3 kernels[kernelSize];\nuniform mat4 proj;\nuniform mat4 projI;\nuniform mat4 view;\nuniform float zFar;\nuniform float zNear;\n\nvec3 getPositionFromDepth(float depth) {\n\tvec4 clipSpaceLocation = vec4(0.0);\n\tclipSpaceLocation.xy = uv * 2.0 - 1.0;\n\tclipSpaceLocation.z = depth * 2.0 - 1.0;;\n\tclipSpaceLocation.w = 1.0;\n\tvec4 homogenousLocation = projI * clipSpaceLocation;\n\thomogenousLocation.xyz = homogenousLocation.xyz / homogenousLocation.w;\n\treturn homogenousLocation.xyz;\n}\n\nvoid main() {\n\tfloat depth = texture(depthBuff, uv).x;\n\tif ((2.0 * zNear) / (zFar + zNear - depth * (zFar - zNear)) > 0.99) {\n\t\tdiscard;\n\t}\n\n\tvec3 pos = getPositionFromDepth(depth);\n\tvec3 normal = normalize(vec3(view * texture(normBuff, uv)));\n\tvec3 rvec = normalize(texture(noice, uv * noiseScale).xyz);\n\n\tvec3 tangent = normalize(rvec - normal * dot(rvec, normal));\n\tvec3 bitangent = cross(tangent, normal);\n\tmat3 rotate = mat3(tangent, bitangent, normal);\n\n\tfloat occlusion  = 0.0;\n\tfor (int i = 0; i < kernelSize; i++) {\n\t\tvec3 samplePos = rotate * kernels[i];\n\t\tsamplePos = pos + samplePos * radius;\n\n\t\tvec4 shift = proj * vec4(samplePos, 1.0);\n\t\tshift.xy /= shift.w;\n\t\tshift.xy = shift.xy * 0.5 + 0.5;\n\n\t\tfloat sampleDepth = getPositionFromDepth(texture(depthBuff, shift.xy).r).z;\n\n\t\tfloat distanceCheck = smoothstep(0.0, 1.0, radius / abs(pos.z - sampleDepth));\n\t\tocclusion  += (sampleDepth >= samplePos.z + bias ? 1.0 : 0.0) * distanceCheck;\n\t}\n\n\tocclusion = 1.0 - (occlusion / float(kernelSize));\n\tcolor = pow(occlusion, power);\n}\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nin vec2 uv;\r\nout vec4 color;\r\n\r\nuniform sampler2D diff;\r\n\r\nconst vec3 hdrColor = vec3(0.2126, 0.7152, 0.0722);\r\nconst float brightnessThreshold = 0.8;\r\n\r\nvoid main() {\r\n    vec3 c = texture(diff, uv).rgb;\r\n    float brightness = dot(c, hdrColor);\r\n    if (brightness > brightnessThreshold) {\r\n        color = vec4(c, 1.0);\r\n    } else {\r\n        color = vec4(0.0, 0.0, 0.0, 1.0);\r\n    }\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nin vec2 uv;\r\nout vec4 color;\r\n\r\nuniform sampler2D original;\r\nuniform sampler2D position;\r\nuniform sampler2D normal;\r\nuniform sampler2D ssao;\r\nuniform sampler2D bloom;\r\nuniform sampler2D depth;\r\nuniform sampler2D preDepth;\r\nuniform sampler2D light;\r\n\r\nconst float gamma = 2.2;\r\n\r\nvoid main() {\r\n    vec3 c = texture(original, uv).rgb;\r\n    #ifdef BLOOM\r\n        c += texture(bloom, uv).rgb;\r\n    #endif\r\n    #ifdef SSAO\r\n        c *= texture(ssao, uv).r;\r\n    #endif\r\n    #ifdef LIGHT\r\n        c += texture(light, uv).r;\r\n    #endif\r\n\r\n    c.rgb = c.rgb / (c.rgb + vec3(1.0));\r\n    c.rgb = pow(c.rgb, vec3(1.0 / gamma));\r\n\r\n    color = vec4(c, 1.0);\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\nprecision highp sampler3D;\r\n\r\nlayout (location = 0) in vec3 inPosition;\r\nout float depth;\r\n\r\nuniform sampler2D light;\r\nuniform mat4 MVPMatrix;\r\n\r\nvoid main() {\r\n    gl_PointSize = 1.0;\r\n    vec4 point = MVPMatrix * vec4(inPosition, 1.0);\r\n    vec2 uv = (point.xy / point.w) * 0.5 + 0.5;\r\n    depth = texture(light, uv).r;\r\n    gl_Position = point;\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nlayout (location = 0) out vec4 color;\r\nin float depth;\r\n\r\nvoid main() {\r\n    //color = vec4(0.0, 0.0, 0.8, 1.0) * texture( image, gl_PointCoord );\r\n    if (depth < 0.05) {\r\n        discard;\r\n    }\r\n    color = vec4(1.0, 1.0, 1.0, 1.0);\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\n\r\nlayout (location = 0) out vec4 color;\r\n\r\nvoid main() {\r\n    color = vec4(1.0, 1.0, 1.0, 1.0);\r\n}\r\n"},function(e,t){e.exports="#version 300 es\r\nprecision highp float;\r\nprecision highp sampler3D;\r\n\r\nlayout(location = 0) in vec3 a_position;\r\nlayout(location = 1) in vec3 a_velocity;\r\nlayout(location = 2) in float a_spawntime;\r\nlayout(location = 3) in float a_lifetime;\r\n\r\nout vec3 v_position;\r\nout vec3 v_velocity;\r\nout float v_spawntime;\r\nout float v_lifetime;\r\n\r\nuniform float u_time;\r\nuniform sampler3D noize;\r\nuniform float count;\r\n\r\nfloat rand(vec3 co) {\r\n    return texture(noize, co).r;\r\n}\r\n\r\nconst float lifetime = 15000.0;\r\nconst vec3 center = vec3(0.5, 0.5, 0.5);\r\nconst vec3 acceleration = vec3(0.0, 0.0, 0.0);\r\n\r\nvoid main() {\r\n    if (a_spawntime == 0.0 || (u_time - a_spawntime) > a_lifetime) {\r\n        float x = float(gl_InstanceID) / count;\r\n        float t = u_time/1000.0 * x;\r\n        v_position = vec3(\r\n            rand(vec3(x, x, t)),\r\n            rand(vec3(1.0 - x, 1.0 - x, t)),\r\n            rand(vec3(x, 0.5, t))\r\n        ) - center;\r\n        v_velocity = vec3(\r\n            rand(vec3(x, x, t)),\r\n            rand(vec3(1.0 - x, 1.0 - x, t)),\r\n            rand(vec3(x, 0.5, t))\r\n        ) - center;\r\n        v_spawntime = u_time;\r\n        v_lifetime = rand(vec3(x, 0.5, t)) * lifetime;\r\n    } else {\r\n        v_velocity = a_velocity + 0.01 * acceleration;\r\n        v_position = a_position + 0.01 * v_velocity;\r\n        v_spawntime = a_spawntime;\r\n        v_lifetime = a_lifetime;\r\n    }\r\n}\r\n"},function(e,t,r){"use strict";r.r(t);class n{constructor(){this._services=new Map,this._singletons=new Map,this.update=this.update.bind(this)}register(e,t,r=[],...n){this._services.set(e,{definition:t,dependencies:r,args:n}),this._isClass(t)?t.__update=this.update:this._updateDep(e,t)}get(e){const t=this._services.get(e);if(!t)return null;if(this._isClass(t.definition)){const r=this._singletons.get(e);if(r)return r;{const r=this._createInstance(t);return this._singletons.set(e,r),r}}return t.definition}update(e,...t){this._services.get(e).args=t,this._singletons.delete(e);const r=this.get(e);this._updateDep(e,r)}_updateDep(e,t){for(const[r,n]of this._singletons)this._services.get(r).dependencies.some(t=>t===e)&&n[`set${e.charAt(0).toUpperCase()+e.slice(1)}`].call(n,t);this._singletons.set(e,t)}_getResolvedDependencies(e){let t=[];return e.dependencies&&(t=e.dependencies.map(e=>[e,this.get(e)])),t}_createInstance(e){const t=new e.definition(...e.args);return this._getResolvedDependencies(e).forEach(([e,r])=>{t[`set${e.charAt(0).toUpperCase()+e.slice(1)}`].call(t,r)}),t}_isClass(e){return"function"==typeof e&&/^class\s/.test(Function.prototype.toString.call(e))}}class i{constructor(e){let t,r,n;if(e&&"object"==typeof e&&e.hasOwnProperty("elements")){for(r=e.elements,n=new Float32Array(9),t=0;t<9;++t)n[t]=r[t];this.elements=n}else this.elements=new Float32Array([1,0,0,0,1,0,0,0,1])}set(e){let t,r,n;if((r=e)!==(n=this.elements)){for(t=0;t<9;++t)n[t]=r[t];return this}}normalFromMat4(e){const t=this.elements,r=(e=e.elements)[0],n=e[1],i=e[2],s=e[3],o=e[4],a=e[5],l=e[6],c=e[7],h=e[8],u=e[9],f=e[10],m=e[11],d=e[12],p=e[13],T=e[14],E=e[15],g=r*a-n*o,v=r*l-i*o,R=r*c-s*o,b=n*l-i*a,x=n*c-s*a,A=i*c-s*l,F=h*p-u*d,_=h*T-f*d,U=h*E-m*d,M=u*T-f*p,P=u*E-m*p,w=f*E-m*T;let B=g*w-v*P+R*M+b*U-x*_+A*F;return B?(B=1/B,t[0]=(a*w-l*P+c*M)*B,t[1]=(l*U-o*w-c*_)*B,t[2]=(o*P-a*U+c*F)*B,t[3]=(i*P-n*w-s*M)*B,t[4]=(r*w-i*U+s*_)*B,t[5]=(n*U-r*P-s*F)*B,t[6]=(p*A-T*x+E*b)*B,t[7]=(T*R-d*A-E*v)*B,t[8]=(d*x-p*R+E*g)*B,this):null}multiply(e){const t=this.elements,r=e.elements,n=this.elements,i=t[0],s=t[3],o=t[6],a=t[1],l=t[4],c=t[7],h=t[2],u=t[5],f=t[8],m=r[0],d=r[3],p=r[6],T=r[1],E=r[4],g=r[7],v=r[2],R=r[5],b=r[8];return n[0]=i*m+s*T+o*v,n[3]=i*d+s*E+o*R,n[6]=i*p+s*g+o*b,n[1]=a*m+l*T+c*v,n[4]=a*d+l*E+c*R,n[7]=a*p+l*g+c*b,n[2]=h*m+u*T+f*v,n[5]=h*d+u*E+f*R,n[8]=h*p+u*g+f*b,this}}class s{constructor(e){let t,r,n;if(e&&"object"==typeof e&&e.hasOwnProperty("elements")){for(r=e.elements,n=new Float32Array(16),t=0;t<16;++t)n[t]=r[t];this.elements=n}else this.elements=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])}getScaleZ(){const e=this.elements,t=e[8],r=e[9],n=e[10];return Math.sqrt(t*t+r*r+n*n)}set(e){let t,r,n;if((r=e)!==(n=this.elements)){for(t=0;t<16;++t)n[t]=r[t];return this}}multiply(e){return this.concat(e),this}concat({elements:e}){let t,r,n,i,s,o,a,l;if(r=this.elements,n=this.elements,r===(i=e))for(i=new Float32Array(16),t=0;t<16;++t)i[t]=r[t];for(t=0;t<4;t++)s=n[t],o=n[t+4],a=n[t+8],l=n[t+12],r[t]=s*i[0]+o*i[1]+a*i[2]+l*i[3],r[t+4]=s*i[4]+o*i[5]+a*i[6]+l*i[7],r[t+8]=s*i[8]+o*i[9]+a*i[10]+l*i[11],r[t+12]=s*i[12]+o*i[13]+a*i[14]+l*i[15];return this}setInverseOf({elements:e}){let t,r,n,i,s;if(r=e,n=this.elements,(i=new Float32Array(16))[0]=r[5]*r[10]*r[15]-r[5]*r[11]*r[14]-r[9]*r[6]*r[15]+r[9]*r[7]*r[14]+r[13]*r[6]*r[11]-r[13]*r[7]*r[10],i[4]=-r[4]*r[10]*r[15]+r[4]*r[11]*r[14]+r[8]*r[6]*r[15]-r[8]*r[7]*r[14]-r[12]*r[6]*r[11]+r[12]*r[7]*r[10],i[8]=r[4]*r[9]*r[15]-r[4]*r[11]*r[13]-r[8]*r[5]*r[15]+r[8]*r[7]*r[13]+r[12]*r[5]*r[11]-r[12]*r[7]*r[9],i[12]=-r[4]*r[9]*r[14]+r[4]*r[10]*r[13]+r[8]*r[5]*r[14]-r[8]*r[6]*r[13]-r[12]*r[5]*r[10]+r[12]*r[6]*r[9],i[1]=-r[1]*r[10]*r[15]+r[1]*r[11]*r[14]+r[9]*r[2]*r[15]-r[9]*r[3]*r[14]-r[13]*r[2]*r[11]+r[13]*r[3]*r[10],i[5]=r[0]*r[10]*r[15]-r[0]*r[11]*r[14]-r[8]*r[2]*r[15]+r[8]*r[3]*r[14]+r[12]*r[2]*r[11]-r[12]*r[3]*r[10],i[9]=-r[0]*r[9]*r[15]+r[0]*r[11]*r[13]+r[8]*r[1]*r[15]-r[8]*r[3]*r[13]-r[12]*r[1]*r[11]+r[12]*r[3]*r[9],i[13]=r[0]*r[9]*r[14]-r[0]*r[10]*r[13]-r[8]*r[1]*r[14]+r[8]*r[2]*r[13]+r[12]*r[1]*r[10]-r[12]*r[2]*r[9],i[2]=r[1]*r[6]*r[15]-r[1]*r[7]*r[14]-r[5]*r[2]*r[15]+r[5]*r[3]*r[14]+r[13]*r[2]*r[7]-r[13]*r[3]*r[6],i[6]=-r[0]*r[6]*r[15]+r[0]*r[7]*r[14]+r[4]*r[2]*r[15]-r[4]*r[3]*r[14]-r[12]*r[2]*r[7]+r[12]*r[3]*r[6],i[10]=r[0]*r[5]*r[15]-r[0]*r[7]*r[13]-r[4]*r[1]*r[15]+r[4]*r[3]*r[13]+r[12]*r[1]*r[7]-r[12]*r[3]*r[5],i[14]=-r[0]*r[5]*r[14]+r[0]*r[6]*r[13]+r[4]*r[1]*r[14]-r[4]*r[2]*r[13]-r[12]*r[1]*r[6]+r[12]*r[2]*r[5],i[3]=-r[1]*r[6]*r[11]+r[1]*r[7]*r[10]+r[5]*r[2]*r[11]-r[5]*r[3]*r[10]-r[9]*r[2]*r[7]+r[9]*r[3]*r[6],i[7]=r[0]*r[6]*r[11]-r[0]*r[7]*r[10]-r[4]*r[2]*r[11]+r[4]*r[3]*r[10]+r[8]*r[2]*r[7]-r[8]*r[3]*r[6],i[11]=-r[0]*r[5]*r[11]+r[0]*r[7]*r[9]+r[4]*r[1]*r[11]-r[4]*r[3]*r[9]-r[8]*r[1]*r[7]+r[8]*r[3]*r[5],i[15]=r[0]*r[5]*r[10]-r[0]*r[6]*r[9]-r[4]*r[1]*r[10]+r[4]*r[2]*r[9]+r[8]*r[1]*r[6]-r[8]*r[2]*r[5],0===(s=r[0]*i[0]+r[1]*i[4]+r[2]*i[8]+r[3]*i[12]))return this;for(s=1/s,t=0;t<16;t++)n[t]=i[t]*s;return this}invert(){return this.setInverseOf(this)}makeOrthographic(e,t,r,n,i,s){var o=this.elements,a=1/(t-e),l=1/(r-n),c=1/(s-i),h=(t+e)*a,u=(r+n)*l,f=(s+i)*c;return o[0]=2*a,o[4]=0,o[8]=0,o[12]=-h,o[1]=0,o[5]=2*l,o[9]=0,o[13]=-u,o[2]=0,o[6]=0,o[10]=-2*c,o[14]=-f,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this}setOrtho(e,t,r,n){let i,s,o,a;return s=1/e,o=1/t,a=2/(r-n),(i=this.elements)[0]=s,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=o,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=a,i[11]=(n+r)/(r-n),i[12]=0,i[13]=0,i[14]=0,i[15]=1,this}setPerspective(e,t,r,n){let i,s,o,a;if(r===n||0===t)throw"null frustum";if(r<=0)throw"near <= 0";if(n<=0)throw"far <= 0";if(e/=2,0===(o=Math.sin(e)))throw"null frustum";return s=1/(n-r),a=Math.cos(e)/o,(i=this.elements)[0]=a/t,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=a,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=-(n+r)*s,i[11]=-1,i[12]=0,i[13]=0,i[14]=-2*r*n*s,i[15]=0,this}perspective(e,t,r,n){return this.concat((new s).setPerspective(e,t,r,n))}multiplyVector4({elements:e}){const t=this.elements,r=e,n=new l,i=n.elements;return i[0]=r[0]*t[0]+r[1]*t[4]+r[2]*t[8]+r[3]*t[12],i[1]=r[0]*t[1]+r[1]*t[5]+r[2]*t[9]+r[3]*t[13],i[2]=r[0]*t[2]+r[1]*t[6]+r[2]*t[10]+r[3]*t[14],i[3]=r[0]*t[3]+r[1]*t[7]+r[2]*t[11]+r[3]*t[15],n}scale(e){const t=e.elements[0],r=e.elements[1],n=e.elements[2],i=this.elements;return i[0]*=t,i[4]*=r,i[8]*=n,i[1]*=t,i[5]*=r,i[9]*=n,i[2]*=t,i[6]*=r,i[10]*=n,i[3]*=t,i[7]*=r,i[11]*=n,this}setTranslate(e){const t=this.elements,r=e.elements[0],n=e.elements[1],i=e.elements[2];return t[12]=r,t[13]=n,t[14]=i,t[15]=1,this}translate(e,t,r){const n=this.elements;return n[12]+=n[0]*e+n[4]*t+n[8]*r,n[13]+=n[1]*e+n[5]*t+n[9]*r,n[14]+=n[2]*e+n[6]*t+n[10]*r,n[15]+=n[3]*e+n[7]*t+n[11]*r,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],r=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],n=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,r,n))}makeRotationAxis(e,t){const r=this.elements,n=Math.cos(t),i=Math.sin(t),s=1-n,o=e.elements[0],a=e.elements[1],l=e.elements[2],c=s*o,h=s*a;return r[0]=c*o+n,r[1]=c*a-i*l,r[2]=c*l+i*a,r[3]=0,r[4]=c*a+i*l,r[5]=h*a+n,r[6]=h*l-i*o,r[7]=0,r[8]=c*l-i*a,r[9]=h*l+i*o,r[10]=s*l*l+n,r[11]=0,r[15]=1,this}makeRotationFromQuaternion(e){const t=this.elements,r=e[0],n=e[1],i=e[2],s=e[3],o=r+r,a=n+n,l=i+i,c=r*o,h=r*a,u=r*l,f=n*a,m=n*l,d=i*l,p=s*o,T=s*a,E=s*l;return t[0]=1-(f+d),t[4]=h-E,t[8]=u+T,t[1]=h+E,t[5]=1-(c+d),t[9]=m-p,t[2]=u-T,t[6]=m+p,t[10]=1-(c+f),this}transpose(){let e,t;return t=(e=this.elements)[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}}class o{constructor(e){this.elements=e.slice()}lerp(e,t,r){const n=this.elements;for(let i=0;i<n.length;i++)n[i]=e[i]+r*(t[i]-e[i]);return this}}class a{constructor(e){const t=new Float32Array(3);e&&"object"==typeof e&&(t[0]=e[0],t[1]=e[1],t[2]=e[2]),this.elements=t}applyQuaternion({elements:e}){const t=this.elements[0],r=this.elements[1],n=this.elements[2],i=e[0],s=e[1],o=e[2],a=e[3],l=a*t+s*n-o*r,c=a*r+o*t-i*n,h=a*n+i*r-s*t,u=-i*t-s*r-o*n;return this.elements[0]=l*a+u*-i+c*-o-h*-s,this.elements[1]=c*a+u*-s+h*-i-l*-o,this.elements[2]=h*a+u*-o+l*-s-c*-i,this}normalize(){const e=this.elements,t=e[0],r=e[1],n=e[2];let i=Math.sqrt(t*t+r*r+n*n);return i?1==i?this:(i=1/i,e[0]=t*i,e[1]=r*i,e[2]=n*i,this):(e[0]=0,e[1]=0,e[2]=0,this)}add(e){const t=this.elements;return e=e.elements,t[0]=t[0]+e[0],t[1]=t[1]+e[1],t[2]=t[2]+e[2],this}addS(e){const t=this.elements;return t[0]=t[0]+e,t[1]=t[1]+e,t[2]=t[2]+e,this}scale(e){const t=this.elements;return t[0]=t[0]*e,t[1]=t[1]*e,t[2]=t[2]*e,this}distanceToSquared(e,t,r){const n=this.elements[0]-e,i=this.elements[1]-t,s=this.elements[2]-r;return n*n+i*i+s*s}subtract(e){const t=this.elements;return e=e.elements,t[0]=t[0]-e[0],t[1]=t[1]-e[1],t[2]=t[2]-e[2],this}divideScalar(e){return this.scale(1/e)}applyMatrix4({elements:e}){const t=this.elements[0],r=this.elements[1],n=this.elements[2],i=e;this.elements[0]=i[0]*t+i[4]*r+i[8]*n+i[12],this.elements[1]=i[1]*t+i[5]*r+i[9]*n+i[13],this.elements[2]=i[2]*t+i[6]*r+i[10]*n+i[14];const s=i[3]*t+i[7]*r+i[11]*n+i[15];return this.divideScalar(s)}lerp(e,t,r){const n=this.elements,i=e[0],s=e[1],o=e[2];return n[0]=i+r*(t[0]-i),n[1]=s+r*(t[1]-s),n[2]=o+r*(t[2]-o),this}lengthSq(){return this.elements[0]*this.elements[0]+this.elements[1]*this.elements[1]+this.elements[2]*this.elements[2]}multiply({elements:e}){return this.elements[0]*=e[0],this.elements[1]*=e[1],this.elements[2]*=e[2],this}static angle(e,t){const r=new a(e.elements),n=new a(t.elements);r.normalize(),n.normalize();const i=a.dot(r,n);return i>1?0:Math.acos(i)}static cross(e,t){e=e.elements,t=t.elements;const r=e[0],n=e[1],i=e[2],s=t[0],o=t[1],l=t[2],c=new a;return c.elements[0]=n*l-i*o,c.elements[1]=i*s-r*l,c.elements[2]=r*o-n*s,c}static dot(e,t){return e=e.elements,t=t.elements,e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}}class l{constructor(e){const t=new Float32Array(4);e&&"object"==typeof e&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3]),this.elements=t}set(e){const t=this.elements;return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],this}add(e){const t=this.elements;return e=e.elements,t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=t[3]+e[3],this}normalize(){const e=this.elements[0],t=this.elements[1],r=this.elements[2],n=this.elements[3];let i=e*e+t*t+r*r+n*n;return i>0&&(i=1/Math.sqrt(i),this.elements[0]=e*i,this.elements[1]=t*i,this.elements[2]=r*i,this.elements[3]=n*i),this}setFromRotationMatrix({elements:e}){const t=e,r=t[0],n=t[4],i=t[8],s=t[1],o=t[5],a=t[9],l=t[2],c=t[6],h=t[10],u=r+o+h;let f;return u>0?(f=.5/Math.sqrt(u+1),this.elements[3]=.25/f,this.elements[0]=(c-a)*f,this.elements[1]=(i-l)*f,this.elements[2]=(s-n)*f):r>o&&r>h?(f=2*Math.sqrt(1+r-o-h),this.elements[3]=(c-a)/f,this.elements[0]=.25*f,this.elements[1]=(n+s)/f,this.elements[2]=(i+l)/f):o>h?(f=2*Math.sqrt(1+o-r-h),this.elements[3]=(i-l)/f,this.elements[0]=(n+s)/f,this.elements[1]=.25*f,this.elements[2]=(a+c)/f):(f=2*Math.sqrt(1+h-r-o),this.elements[3]=(s-n)/f,this.elements[0]=(i+l)/f,this.elements[1]=(a+c)/f,this.elements[2]=.25*f),this}lerp(e,t,r){const n=this.elements;if(0===r)return this;if(1===r)return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],this;const i=e[0],s=e[1],o=e[2],a=e[3];let l=a*t[3]+i*t[0]+s*t[1]+o*t[2];if(l<0?(n[3]=-t[3],n[0]=-t[0],n[1]=-t[1],n[2]=-t[2],l=-l):(n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3]),l>=1)return n[3]=a,n[0]=i,n[1]=s,n[2]=o,this;const c=1-l*l;if(c<=Number.EPSILON){var h=1-r;return n[3]=h*a+r*n[3],n[0]=h*i+r*n[0],n[1]=h*s+r*n[1],n[2]=h*o+r*n[2],this.normalize()}const u=Math.sqrt(c),f=Math.atan2(u,l),m=Math.sin((1-r)*f)/u,d=Math.sin(r*f)/u;return n[3]=a*m+n[3]*d,n[0]=i*m+n[0]*d,n[1]=s*m+n[1]*d,n[2]=o*m+n[2]*d,this}}class c{constructor(e){const t=new Float32Array(2);e&&"object"==typeof e&&(t[0]=e[0],t[1]=e[1]),this.elements=t}subtract(e){const t=this.elements;return e=e.elements,t[0]=t[0]-e[0],t[1]=t[1]-e[1],this}lerp(e,t,r){const n=this.elements,i=e[0],s=e[1];return n[0]=i+r*(t[0]-i),n[1]=s+r*(t[1]-s),this}}function h(e){const t=[new l,new l,new l,new l,new l,new l],r=e.elements;let n=r[0],i=r[1],s=r[2],o=r[3],a=r[4],c=r[5],h=r[6],u=r[7],f=r[8],m=r[9],d=r[10],p=r[11],T=r[12],E=r[13],g=r[14],v=r[15];return t[0].set([o-n,u-a,p-f,v-T]).normalize(),t[1].set([o+n,u+a,p+f,v+T]).normalize(),t[2].set([o+i,u+c,p+m,v+E]).normalize(),t[3].set([o-i,u-c,p-m,v-E]).normalize(),t[4].set([o-s,u-h,p-d,v-g]).normalize(),t[5].set([o+s,u+h,p+d,v+g]).normalize(),t}class u{constructor(){this.opaqueChildren=[],this.transparentChildren=[],this.meshes=[],this.children=[],this.bin=[],this.matrixWorld=new s}}class f{constructor(e,t){this.uuid=Math.floor(Date.now()*Math.random()),this.name=e,this.children=[],this.matrix=new s,this.matrixWorld=new s,this.parent=t}getPosition(){return new Float32Array([this.matrixWorld.elements[12],this.matrixWorld.elements[13],this.matrixWorld.elements[14]])}setPosition(e,t,r){t&&this.matrix.makeRotationFromQuaternion(t),r&&this.matrix.scale(new a(r)),e&&this.matrix.setTranslate(new a(e))}setMatrix(e){this.matrix.set(e)}setMatrixWorld(e){this.matrixWorld.set(e)}updateMatrix(){const e=new s;e.multiply(this.parent.matrixWorld),e.multiply(this.matrix),this.setMatrixWorld(e.elements)}}class m extends f{constructor(e,t){super(e,t),this.program=null,this.defines=null,this.mode=4}setDefines(e){this.defines=e}setBlend(e){this.material.blend=e}setMaterial(e){this.material=e}draw(e,{camera:t,light:r,preDepthTexture:n,fakeDepth:i,needUpdateView:o,needUpdateProjection:a,irradiancemap:l,prefilterMap:c,brdfLUT:h},u,f){if(e.useProgram(this.program),e.bindVertexArray(this.geometry.VAO),e.bindBufferBase(e.UNIFORM_BUFFER,0,this.geometry.UBO),this.reflow){const t=new s(this.matrixWorld);t.invert().transpose(),this.geometry.uniformBuffer.update(e,"model",this.matrixWorld.elements),this.geometry.uniformBuffer.update(e,"normalMatrix",t.elements)}if(o&&(this.geometry.uniformBuffer.update(e,"view",t.matrixWorldInvert.elements),this.geometry.uniformBuffer.update(e,"light",r.matrixWorldInvert.elements)),a&&this.geometry.uniformBuffer.update(e,"projection",t.projection.elements),this.geometry.uniformBuffer.update(e,"isShadow",f?1:0),this instanceof d&&(e.bindBufferBase(e.UNIFORM_BUFFER,2,this.geometry.SKIN),this.bones.some(e=>e.reflow))){const t=this.getJointMatrix(),r=new Float32Array(16*t.length);let n=0;for(const e of t)r.set(e.elements,0+16*n),n++;e.bufferSubData(e.UNIFORM_BUFFER,0,r)}this.material.UBO&&(e.bindBufferBase(e.UNIFORM_BUFFER,1,this.material.UBO),o&&(this.material.uniformBuffer.update(e,"lightPos",r.getPosition()),this.material.uniformBuffer.update(e,"viewPos",t.getPosition()))),e.uniform1i(e.getUniformLocation(this.program,"prefilterMap"),c.index),e.uniform1i(e.getUniformLocation(this.program,"brdfLUT"),h.index),e.uniform1i(e.getUniformLocation(this.program,"irradianceMap"),l.index),e.uniform1i(e.getUniformLocation(this.program,"depthTexture"),u?i.index:n.index);let m=31;this.material.pbrMetallicRoughness.baseColorTexture&&(e.activeTexture(e[`TEXTURE${m}`]),e.bindTexture(e.TEXTURE_2D,this.material.pbrMetallicRoughness.baseColorTexture),e.bindSampler(m,this.material.pbrMetallicRoughness.baseColorTexture.sampler),e.uniform1i(this.material.uniforms.baseColorTexture,m),m--),this.material.pbrMetallicRoughness.metallicRoughnessTexture&&(e.activeTexture(e[`TEXTURE${m}`]),e.bindTexture(e.TEXTURE_2D,this.material.pbrMetallicRoughness.metallicRoughnessTexture),e.bindSampler(m,this.material.pbrMetallicRoughness.metallicRoughnessTexture.sampler),e.uniform1i(this.material.uniforms.metallicRoughnessTexture,m),m--),this.material.normalTexture&&(e.activeTexture(e[`TEXTURE${m}`]),e.bindTexture(e.TEXTURE_2D,this.material.normalTexture),e.bindSampler(m,this.material.normalTexture.sampler),e.uniform1i(this.material.uniforms.normalTexture,m),m--),this.material.occlusionTexture&&(e.activeTexture(e[`TEXTURE${m}`]),e.bindTexture(e.TEXTURE_2D,this.material.occlusionTexture),e.bindSampler(m,this.material.occlusionTexture.sampler),e.uniform1i(this.material.uniforms.occlusionTexture,m),m--),this.material.emissiveTexture&&(e.activeTexture(e[`TEXTURE${m}`]),e.bindTexture(e.TEXTURE_2D,this.material.emissiveTexture),e.bindSampler(m,this.material.emissiveTexture.sampler),e.uniform1i(this.material.uniforms.emissiveTexture,m),m--),this.material.doubleSided&&e.disable(e.CULL_FACE),this.geometry.indicesBuffer?e.drawElements(this.mode,this.geometry.indicesBuffer.length,e[this.geometry.indicesBuffer.type],0):e.drawArrays(this.mode,0,this.geometry.attributes.POSITION.length/3),this.material.doubleSided&&e.enable(e.CULL_FACE)}setGeometry(e){this.geometry=e}setProgram(e){this.program=e}setMode(e=4){this.mode=e}isVisible(e){const t=new a(this.geometry.boundingSphere.center.elements).applyMatrix4(this.matrixWorld),r=this.geometry.boundingSphere.radius*this.matrixWorld.getMaxScaleOnAxis();let n,i=!0;for(const s of e)if((n=s.elements[0]*t.elements[0]+s.elements[1]*t.elements[1]+s.elements[2]*t.elements[2]+s.elements[3])<-r){i=!1;break}return this.distance=n+r,i}}class d extends m{constructor(e,t){super(e,t)}setSkin(e,t){this.bones=t.bones,this.boneInverses=t.boneInverses;const r=this.getJointMatrix(),n=new Float32Array(16*r.length);let i=0;for(const e of r)n.set(e.elements,0+16*i),i++;const s=e.getUniformBlockIndex(this.program,"Skin");e.uniformBlockBinding(this.program,s,2);const o=e.createBuffer();return e.bindBuffer(e.UNIFORM_BUFFER,o),e.bufferData(e.UNIFORM_BUFFER,n,e.DYNAMIC_DRAW),this.geometry.SKIN=o,e.bindBuffer(e.UNIFORM_BUFFER,null),this}getJointMatrix(){const e=new s(this.matrixWorld).invert(),t=[];for(let r=0;r<this.boneInverses.length;r++){const n=(new s).multiply(e).multiply(this.bones[r].matrixWorld).multiply(this.boneInverses[r]);t.push(n)}return t}}class p extends f{}const T={};let E,g=-1;const v=[0,0,0,1];function R(e,t){return Math.random()*(t-e)+e}function b(e){let t;switch(e){case"MAT2":t=4;break;case"MAT3":t=9;break;case"MAT4":t=16;break;case"VEC4":t=4;break;case"VEC3":t=3;break;case"VEC2":t=2;break;case"SCALAR":t=1}return t}function x(e){return"rotation"===e?4:"translation"===e||"scale"===e?3:void 0}function A(e,t){if(0===t.length)return[-1,-1,0];let r=-1;for(let n=t.length-1;n>=0;n--)if(e>=t[n].time){r=n;break}if(-1===r||r===t.length-1)return r<0&&(r=0),[r,r,0];{const s=t[r],o=t[r+1];return e=Math.max(s.time,Math.min(e,o.time)),[r,r+1,(n=s.time,i=o.time,(e-n)/(i-n))]}var n,i}function F(e){let t;switch(T[e]){case"BYTE":case"UNSIGNED_BYTE":t=1;break;case"SHORT":case"UNSIGNED_SHORT":t=2;break;case"UNSIGNED_INT":case"FLOAT":t=4}return t}function _(e,t,r,n,i,s){const o=n,a=n/s;let l;switch(i&&i!==F(t)*a&&(n=i*s/F(t)-r/F(t)),T[t]){case"BYTE":(l=new Int8Array(e,r,n)).type="BYTE";break;case"UNSIGNED_BYTE":(l=new Uint8Array(e,r,n)).type="UNSIGNED_BYTE";break;case"SHORT":(l=new Int16Array(e,r,n)).type="SHORT";break;case"UNSIGNED_SHORT":(l=new Uint16Array(e,r,n)).type="UNSIGNED_SHORT";break;case"UNSIGNED_INT":(l=new Uint32Array(e,r,n)).type="UNSIGNED_INT";break;case"FLOAT":(l=new Float32Array(e,r,n)).type="FLOAT"}if(i&&i!==F(t)*a){const e=new Float32Array(o);let r=0;for(let n=0;n<e.length;n+=a)e[n]=l[r],e[n+1]=l[r+1],e[n+2]=l[r+2],r+=a*(i/F(t)/a);return e.type=l.type,e}return l}function U(e,t,r){const n=E.createShader(e);E.shaderSource(n,t),E.compileShader(n),E.attachShader(r,n);const i=E.getShaderInfoLog(n);if(i)throw new Error(i)}function M(e,t){const r=E.createProgram();if(U(E.VERTEX_SHADER,e,r),U(E.FRAGMENT_SHADER,t,r),E.linkProgram(r),E.validateProgram(r),!E.getProgramParameter(r,E.LINK_STATUS)){const e=E.getProgramInfoLog(r);throw new Error(`Could not compile WebGL program. ${e}`)}return r}function P(e=E.TEXTURE_2D){const t=++g,r=E.createTexture();return E.activeTexture(E[`TEXTURE${t}`]),E.bindTexture(e,r),r.index=t,r}function w(e,t){!function e(r){t(r),r.children&&r.children.forEach(e)}(e)}function B(e){let t=e[0]*e[0]+e[1]*e[1];const r=.0016-t;return r>0?[e[0],e[1],Math.sqrt(r)]:(t=Math.sqrt(t),[.04*e[0]/t,.04*e[1]/t,0])}function y(e,t,r,n){const[i,o]=e,c=new s;c.setTranslate(new a([0,0,.05]));const h=new s(t);h.multiply(c);const u=h.multiplyVector4(new l([0,0,0,1]));u.elements[0]=(2*i/r-1)*u.elements[3],u.elements[1]=(-2*o/n+1)*u.elements[3];const f=h.invert().multiplyVector4(u);return[f.elements[0],f.elements[1]]}function N(e){const{aspect:t,zoom:r}=e;let n;if("perspective"===e.type&&e.perspective){const{yfov:i}=e.perspective,o=i*t;n=(new s).setPerspective(o*r,t,e.perspective.znear||1,e.perspective.zfar||2e6)}else"orthographic"===e.type&&e.orthographic&&(n=(new s).setOrtho(e.orthographic.xmag*r,e.orthographic.ymag*r,e.orthographic.znear,e.orthographic.zfar));return n}function L(e=0,t=0){return e+t}function S(e){let t;switch(e){case"POSITION":t=[0,3,E.FLOAT];break;case"NORMAL":t=[1,3,E.FLOAT];break;case"TEXCOORD_0":t=[2,2,E.FLOAT];break;case"JOINTS_0":t=[3,4,E.UNSIGNED_SHORT];break;case"WEIGHTS_0":t=[4,4,E.FLOAT];break;case"TANGENT":t=[5,4,E.FLOAT];break;case"COLOR_0":t=[6,4,E.FLOAT];break;case"TEXCOORD_1":t=[7,2,E.FLOAT]}return t}class D extends f{constructor(e,t,r){super(t,r),this.matrixWorldInvert=new s,this.projection=new s,this.props=e}setProjection(e){this.projection.set(e.elements)}setMatrixWorld(e){super.setMatrixWorld(e),this.matrixWorldInvert.setInverseOf(this.matrixWorld)}setZ(e){this.matrix.elements[14]=e,this.setMatrixWorld(this.matrix.elements)}getViewProjMatrix(){const e=new s;return e.multiply(this.projection),e.multiply(this.matrixWorldInvert),e}pan(e,t,r,n){const i=y(e,this.projection,r,n),s=y(t,this.projection,r,n),o=new a([...i,0]),l=new a([...s,0]),c=100*this.modelSize,h=l.subtract(o).scale(c);this.matrixWorld.translate(h.elements[0],h.elements[1],0),this.setMatrixWorld(this.matrixWorld.elements)}rotate(e,t,r,n){const i=y(e,this.projection,r,n),o=y(t,this.projection,r,n),l=new a(B(i)),c=new a(B(o)),h=30*a.angle(c,l)/this.props.aspect;if(h<1e-6||isNaN(h))return;const u=new a(l.elements).applyMatrix4(this.matrixWorld),f=new a(c.elements).applyMatrix4(this.matrixWorld),m=a.cross(f,u).normalize(),d=new s;d.makeRotationAxis(m,h),d.multiply(this.matrixWorld),this.setMatrixWorld(d.elements)}zoom(e){this.props.zoom=e,this.updateNF(),this.setProjection(N(this.props))}updateNF(){const e=Math.abs(this.matrixWorldInvert.elements[14]),t=this.props.perspective||this.props.orthographic;e>this.modelSize?(t.znear=e-this.modelSize,t.zfar=e+this.modelSize):(t.znear=1,t.zfar=1e4),this.setProjection(N(this.props))}}class C extends f{constructor(e,t){super(e,t),this.matrixWorldInvert=new s}setMatrixWorld(e){super.setMatrixWorld(e),this.matrixWorldInvert.setInverseOf(this.matrixWorld)}setZ(e){this.matrix.elements[14]=e,this.setMatrixWorld(this.matrix.elements)}update(e){const t=new s;t.makeRotationAxis(new a([0,1,0]),e),t.multiply(this.matrix),this.setMatrixWorld(t.elements)}}class O{constructor(){this.map=new Map,this.tempStore={},this.offset=0}getBuffer(e){const{length:t}=e;return t<=4?e:9===t?new Float32Array([e[0],e[1],e[2],0,e[3],e[4],e[5],0,e[6],e[7],e[8],0]):e}add(e,t){void 0===t.length&&(t=[t]),this.map.set(e,this.offset);const r=this.getBuffer(t);this.tempStore[e]=r,this.offset+=Math.max(r.length,4)}update(e,t,r){void 0===r.length&&(r=new Float32Array([r]));const n=this.map.get(t);this.store.set(r,n),e.bufferSubData(e.UNIFORM_BUFFER,n*Float32Array.BYTES_PER_ELEMENT,r)}done(){this.store=new Float32Array(this.offset);for(const[e,t]of this.map)this.store.set(this.tempStore[e],t);this.tempStore=null}}class I{}const V={pbrMetallicRoughness:{baseColorFactor:[1,0,0,1]}};class X extends I{constructor(e=V,t,r){super();const n=Object.assign({},e);if(this.defines=r,!n.pbrMetallicRoughness&&n.extensions&&n.extensions.KHR_materials_pbrSpecularGlossiness){n.pbrMetallicRoughness={};const e=n.extensions.KHR_materials_pbrSpecularGlossiness;n.pbrMetallicRoughness.baseColorTexture=e.diffuseTexture,n.pbrMetallicRoughness.metallicRoughnessTexture=e.specularGlossinessTexture,n.pbrMetallicRoughness.baseColorFactor=e.diffuseFactor,n.pbrMetallicRoughness.specularFactor=e.specularFactor,n.pbrMetallicRoughness.glossinessFactor=e.glossinessFactor,r.push({name:"SPECULARGLOSSINESSMAP"})}if(this.uniforms={baseColorTexture:null,metallicRoughnessTexture:null,normalTexture:null,occlusionTexture:null,emissiveTexture:null},this.pbrMetallicRoughness={baseColorFactor:n.pbrMetallicRoughness.baseColorFactor,roughnessFactor:n.pbrMetallicRoughness.roughnessFactor,metallicFactor:n.pbrMetallicRoughness.metallicFactor,emissiveFactor:n.pbrMetallicRoughness.emissiveFactor,specularFactor:n.pbrMetallicRoughness.specularFactor,glossinessFactor:n.pbrMetallicRoughness.glossinessFactor},n.pbrMetallicRoughness.metallicRoughnessTexture&&(this.pbrMetallicRoughness.metallicRoughnessTexture=t[n.pbrMetallicRoughness.metallicRoughnessTexture.index],r.push({name:"METALROUGHNESSMAP"})),n.normalTexture&&(this.normalTexture=t[n.normalTexture.index],r.push({name:"NORMALMAP"})),n.occlusionTexture&&(this.occlusionTexture=t[n.occlusionTexture.index],r.push({name:"OCCLUSIONMAP"})),n.pbrMetallicRoughness.baseColorTexture){const{extensions:e}=n.pbrMetallicRoughness.baseColorTexture;if(this.pbrMetallicRoughness.baseColorTexture=t[n.pbrMetallicRoughness.baseColorTexture.index],r.push({name:"BASECOLORTEXTURE"}),e){const t=e.KHR_texture_transform;if(t){const e=t.offset&&(new i).set([1,0,0,0,1,0,t.offset[0],t.offset[1],1]),n=t.rotation&&(new i).set([-Math.sin(t.rotation),Math.cos(t.rotation),0,Math.cos(t.rotation),Math.sin(t.rotation),0,0,0,1]),s=t.scale&&(new i).set([t.scale[0],0,0,0,t.scale[1],0,0,0,1]),o=new i;s&&o.multiply(s),n&&o.multiply(n),e&&o.multiply(e),this.matrix=o,r.push({name:"TEXTURE_TRANSFORM"})}}}if(n.emissiveTexture){const{texCoord:e}=n.emissiveTexture;this.emissiveTexture=t[n.emissiveTexture.index],r.push({name:"EMISSIVEMAP",value:e?2:1})}"MASK"===n.alphaMode?r.push({name:"ALPHATEST",value:n.alphaCutoff||.5}):"BLEND"===n.alphaMode&&r.push({name:"ALPHATEST",value:.01})}createUniforms(e,t){this.pbrMetallicRoughness.baseColorTexture&&(this.uniforms.baseColorTexture=e.getUniformLocation(t,"baseColorTexture")),this.pbrMetallicRoughness.metallicRoughnessTexture&&(this.uniforms.metallicRoughnessTexture=e.getUniformLocation(t,"metallicRoughnessTexture")),this.normalTexture&&(this.uniforms.normalTexture=e.getUniformLocation(t,"normalTexture")),this.occlusionTexture&&(this.uniforms.occlusionTexture=e.getUniformLocation(t,"occlusionTexture")),this.emissiveTexture&&(this.uniforms.emissiveTexture=e.getUniformLocation(t,"emissiveTexture"))}updateUniforms(e,t,r,n){const s=new O;s.add("baseColorFactor",this.pbrMetallicRoughness.baseColorFactor||[.8,.8,.8,1]),s.add("lightPos",n.getPosition()),s.add("viewPos",r.getPosition()),s.add("textureMatrix",this.matrix&&this.matrix.elements||(new i).elements),s.add("specularFactor",this.pbrMetallicRoughness.specularFactor||[0,0,0]),s.add("emissiveFactor",this.emissiveFactor||[0,0,0]),s.add("glossinessFactor",this.pbrMetallicRoughness.glossinessFactor||0),s.add("metallicFactor",this.pbrMetallicRoughness.metallicFactor||0),s.add("roughnessFactor",this.pbrMetallicRoughness.roughnessFactor||0),s.done();const o=e.getUniformBlockIndex(t,"Material");e.uniformBlockBinding(t,o,1);const a=e.createBuffer();e.bindBuffer(e.UNIFORM_BUFFER,a),e.bufferData(e.UNIFORM_BUFFER,s.store,e.STATIC_DRAW),this.UBO=a,this.uniformBuffer=s}hasNormal(){return Boolean(this.normalTexture)}}class G{constructor(){this.counterEl=document.createElement("div"),this.counterEl.setAttribute("style","position: absolute; top: 0; right: 0; color: #fff; font-size: 30px; background: #000;"),document.body.appendChild(this.counterEl),this.fps=0,this.elapsedTime=0,this.lastTime=0}tick(e){this.fps++,this.elapsedTime+=e-this.lastTime,this.lastTime=e,this.elapsedTime>=1e3&&(this.counterEl.innerHTML=String(this.fps),this.fps=0,this.elapsedTime-=1e3)}}class H{setCanvas(e){this.canvas=e}setCamera(e){this.camera=e}setLight(e){this.light=e}get width(){return this.canvas.offsetWidth*devicePixelRatio}get height(){return this.canvas.offsetHeight*devicePixelRatio}}var k=r(3),z=r.n(k),j=r(4),W=r.n(j);let Y,q,$;class K extends H{constructor(){super(),this.scale=2}setGL(e){Y=e}preProcessing(e){Y.clear(Y.COLOR_BUFFER_BIT|Y.DEPTH_BUFFER_BIT),e.renderScene(!0,!0),Y.bindFramebuffer(Y.FRAMEBUFFER,this.framebuffer),Y.framebufferTexture2D(Y.FRAMEBUFFER,Y.COLOR_ATTACHMENT0,Y.TEXTURE_2D,this.texture,0),Y.useProgram(this.program),Y.viewport(0,0,this.width/this.scale,this.height/this.scale),Y.bindVertexArray(this.quadVAO);const t=N(Object.assign({},this.camera.props,{zoom:1}));Y.uniformMatrix4fv(Y.getUniformLocation(this.program,"Iproj"),!1,(new s).setInverseOf(t).elements),Y.uniformMatrix4fv(Y.getUniformLocation(this.program,"proj"),!1,t.elements),Y.uniformMatrix4fv(Y.getUniformLocation(this.program,"Iview"),!1,this.camera.matrixWorld.elements),Y.uniformMatrix4fv(Y.getUniformLocation(this.program,"light"),!1,this.light.matrixWorldInvert.elements),Y.uniform1i(Y.getUniformLocation(this.program,"lightTexture"),e.preDepthTexture.index),Y.uniform1i(Y.getUniformLocation(this.program,"cameraTexture"),e.depthTexture.index),Y.drawArrays(Y.TRIANGLES,0,6),Y.bindFramebuffer(Y.FRAMEBUFFER,null),Y.viewport(0,0,this.width,this.height)}buildScreenBuffer(e){this.framebuffer=Y.createFramebuffer(),Y.bindFramebuffer(Y.FRAMEBUFFER,this.framebuffer),this.texture=e.createOneChannelTexture(this.scale),Y.framebufferTexture2D(Y.FRAMEBUFFER,Y.COLOR_ATTACHMENT0,Y.TEXTURE_2D,this.texture,0),this.program=M(W.a,z.a);this.quadVAO=Y.createVertexArray(),Y.bindVertexArray(this.quadVAO);const t=Y.createBuffer();return Y.bindBuffer(Y.ARRAY_BUFFER,t),Y.bufferData(Y.ARRAY_BUFFER,new Float32Array([1,1,-1,1,-1,-1,-1,-1,1,-1,1,1]),Y.STATIC_DRAW),Y.enableVertexAttribArray(0),Y.vertexAttribPointer(0,2,Y.FLOAT,!1,0,0),Y.bindVertexArray(null),Y.bindFramebuffer(Y.FRAMEBUFFER,null),{name:"LIGHT"}}attachUniform(e){Y.uniform1i(Y.getUniformLocation(e,"light"),this.texture.index)}postProcessing(){}}class J extends H{setGL(e){q=e}preProcessing(e){q.clear(q.COLOR_BUFFER_BIT|q.DEPTH_BUFFER_BIT),e.renderScene(!0,!0)}buildScreenBuffer(){return{name:"SHADOW"}}attachUniform(){}postProcessing(){}}class Z{constructor(e){this.reflow=!0,this.fps=new G,this.getState=e}setEnv(e){this.env=e}setCamera(e){this.camera=e}setParticles(e){this.Particles=e}setScene(e){this.scene=e}setPp(e){this.PP=e}setGl(e){$=e}setParser(e){this.parse=e}animate(e){e-=Math.floor(e/this.parse.duration)*this.parse.duration;for(const t of this.parse.tracks){const r=A(e,t.keys);if(-1===r[0]||-1===r[1]||t.stoped)continue;const n=t.keys[r[0]],i=t.keys[r[1]],s=r[2],c=x(t.type);let h;const u=new(h=3===c?a:4===c?l:o)(n.value),f=new h(i.value);if("rotation"===t.type){const e=new l;e.lerp(u.elements,f.elements,s);for(const r of t.meshes)r.matrix.makeRotationFromQuaternion(e.elements)}else if("scale"===t.type){const e=new a;e.lerp(u.elements,f.elements,s);for(const r of t.meshes)r.matrix.scale(e)}else if("weights"===t.type){const e=new o(u.elements);e.lerp(u.elements,f.elements,s);for(const r of t.meshes){const t={};for(const n in r.geometry.targets[0])if("POSITION"===n){t[n]=r.geometry.attributes[n].slice();for(let i=0;i<e.elements.length;i++){if(0===e.elements[i])continue;const s=0;for(let o=0;o<t[n].length;o++)t[n][o]+=e.elements[i]*r.geometry.targets[i][n][o-s]}}$.bindVertexArray(r.geometry.VAO);for(const e in t){const r=$.createBuffer();$.bindBuffer($.ARRAY_BUFFER,r),$.bufferData($.ARRAY_BUFFER,t[e],$.STATIC_DRAW);const n=S(e);$.enableVertexAttribArray(n[0]),$.vertexAttribPointer(n[0],n[1],n[2],!1,0,0)}$.bindVertexArray(null)}}else if("translation"===t.type){const e=new a;e.lerp(u.elements,f.elements,s);for(const r of t.meshes)r.matrix.setTranslate(e)}else console.error("ERROR");for(const e of t.meshes)w(e,e=>{e.updateMatrix(),e instanceof p&&(e.reflow=!0),e instanceof m&&(e.reflow=!0),e instanceof D&&e===this.camera&&(this.needUpdateView=!0)});this.reflow=!0}}render(e=0){const t=e/1e3;this.animate(t),this.reflow&&(this.PP.postprocessors.length>0&&(this.PP.bindPrePass(),this.PP.preProcessing(),this.PP.bindPostPass()),$.clear($.COLOR_BUFFER_BIT|$.DEPTH_BUFFER_BIT),this.renderScene(!this.PP.postprocessors.some(e=>e instanceof J),!1),this.clean(),this.PP.postprocessors.some(e=>e instanceof K)&&(this.Particles.draw(e),this.reflow=!0),this.PP.postprocessors.length>0&&this.PP.postProcessing()),this.fps.tick(e),requestAnimationFrame(this.render.bind(this))}renderScene(e,t){if($.enable($.DEPTH_TEST),$.enable($.CULL_FACE),this.needUpdateView){const e=h(this.camera.getViewProjMatrix());this.scene.meshes.forEach(t=>{t.visible=t.isVisible(e)})}this.scene.opaqueChildren.forEach(r=>{r.visible&&r.draw($,this.getState(),e,t)}),this.scene.transparentChildren.length&&($.enable($.BLEND),$.blendFunc($.SRC_ALPHA,$.ONE_MINUS_SRC_ALPHA),this.scene.transparentChildren.forEach(r=>{r.visible&&r.draw($,this.getState(),e,t)}),$.disable($.BLEND),$.blendFunc($.ONE,$.ZERO))}clean(){w(this.scene,e=>{e.reflow=!1}),this.needUpdateView=!1,this.needUpdateProjection=!1,this.reflow=!1}}class Q{constructor(e){const t=document.querySelector("#canvas");this.redraw=e,this.zoomValue=0,document.addEventListener("wheel",this),t.addEventListener("mousedown",this),t.addEventListener("mousemove",this),t.addEventListener("mouseup",this),document.addEventListener("keyup",this),document.addEventListener("keydown",this),addEventListener("resize",this)}handleEvent(e){switch(e.type){case"wheel":this.zoom(e);break;case"mousedown":this.onStart(e);break;case"mousemove":this.onMove(e);break;case"mouseup":this.onEnd();break;case"keyup":this.onKeyUp();break;case"keydown":this.onKeyDown(e);break;case"resize":this.onResize()}}onResize(){this.redraw("resize")}onKeyDown(e){(e.shiftKey||e.ctrlKey)&&(this.isPan=!0)}onKeyUp(){this.isPan=!1}onStart(e){this.x=e.clientX,this.y=e.clientY,this.isDrag=!0}onMove(e){this.isDrag&&(this.isPan?this.redraw("pan",[this.x,this.y],[e.clientX,e.clientY]):this.redraw("rotate",[this.x,this.y],[e.clientX,e.clientY]),this.x=e.clientX,this.y=e.clientY)}onEnd(){this.isDrag=!1}zoom(e){e.preventDefault(),this.zoomValue=Math.min(this.zoomValue+e.deltaY,1250),this.redraw("zoom",Math.pow(1.001,this.zoomValue))}}var ee=r(5),te=r.n(ee),re=r(2),ne=r.n(re),ie=r(6),se=r.n(ie),oe=r(7),ae=r.n(oe),le=r(8),ce=r.n(le),he=r(9),ue=r.n(he),fe=r(0),me=r.n(fe);let de;class pe{constructor(e){this.url=e,this.envMatrix=new s}setCamera(e){this.camera=e}setGl(e){de=e}setCanvas(e){this.canvas=e}get width(){return this.canvas.offsetWidth*devicePixelRatio}get height(){return this.canvas.offsetHeight*devicePixelRatio}draw(){const e=new s,t=Object.assign({},this.camera.props,{perspective:{yfov:.3,znear:.01,zfar:1e4}});e.multiply(N(t)),de.enable(de.CULL_FACE);const r=de.createProgram();U(de.VERTEX_SHADER,"#version 300 es\n        precision highp float;\n        \n        layout (location = 0) in vec3 inPosition;\n        \n        out vec3 outUV;\n\n        uniform mat4 projection;\n        uniform mat4 view;\n        \n        void main() {\n            outUV = inPosition;\n            gl_Position = projection * view * vec4(inPosition, 1.0);\n        }\n        ",r),U(de.FRAGMENT_SHADER,"#version 300 es\n        precision highp float;\n        \n        in vec3 outUV;\n        layout (location = 0) out vec4 color;\n\n        uniform samplerCube environmentMap;\n        \n        void main() {\n            vec3 c = textureLod(environmentMap, outUV, 0.0).rgb;\n            \n            color = vec4(c, 1.0);\n        }\n        ",r),de.linkProgram(r),de.useProgram(r),de.bindVertexArray(this.VAO),de.uniformMatrix4fv(de.getUniformLocation(r,"projection"),!1,e.elements),de.uniform1i(de.getUniformLocation(r,"environmentMap"),this.map.index),de.uniformMatrix4fv(de.getUniformLocation(r,"view"),!1,this.camera.matrixWorldInvert.elements),de.drawArrays(de.TRIANGLES,0,36)}createEnvironment(){de.enable(de.CULL_FACE);const e=new s,t=Object.assign({},this.camera.props,{aspect:1,perspective:{yfov:Math.PI/2,znear:.01,zfar:1e4}});e.multiply(N(t));{de.bindFramebuffer(de.FRAMEBUFFER,this.framebuffer),de.useProgram(this.cubeprogram),de.bindVertexArray(this.VAO),de.viewport(0,0,this.framebuffer.size,this.framebuffer.size),de.uniformMatrix4fv(de.getUniformLocation(this.cubeprogram,"projection"),!1,e.elements),de.uniform1i(de.getUniformLocation(this.cubeprogram,"diffuse"),this.texture.index);const t=5;for(let e=0;e<t;++e){const t=this.framebuffer.size*Math.pow(.5,e),r=this.framebuffer.size*Math.pow(.5,e);de.viewport(0,0,t,r);for(let t=0;t<6;t++)de.framebufferTexture2D(de.FRAMEBUFFER,de.COLOR_ATTACHMENT0,de.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.map,e),de.uniformMatrix4fv(de.getUniformLocation(this.cubeprogram,"view"),!1,this.views[t].elements),de.clear(de.COLOR_BUFFER_BIT|de.DEPTH_BUFFER_BIT),de.drawArrays(de.TRIANGLES,0,36)}de.bindVertexArray(null),de.bindFramebuffer(de.FRAMEBUFFER,null)}de.bindFramebuffer(de.FRAMEBUFFER,this.irradiancebuffer),de.useProgram(this.irradianceprogram),de.bindVertexArray(this.VAO),de.viewport(0,0,this.irradiancebuffer.size,this.irradiancebuffer.size),de.uniformMatrix4fv(de.getUniformLocation(this.irradianceprogram,"projection"),!1,e.elements),de.uniform1i(de.getUniformLocation(this.irradianceprogram,"environmentMap"),this.map.index);for(let e=0;e<6;e++)de.framebufferTexture2D(de.FRAMEBUFFER,de.COLOR_ATTACHMENT0,de.TEXTURE_CUBE_MAP_POSITIVE_X+e,this.irradiancemap,0),de.uniformMatrix4fv(de.getUniformLocation(this.irradianceprogram,"view"),!1,this.views[e].elements),de.clear(de.COLOR_BUFFER_BIT|de.DEPTH_BUFFER_BIT),de.drawArrays(de.TRIANGLES,0,36);de.bindVertexArray(null),de.bindFramebuffer(de.FRAMEBUFFER,null);{de.bindFramebuffer(de.FRAMEBUFFER,this.prefilterbuffer),de.useProgram(this.mipmapcubeprogram),de.bindVertexArray(this.VAO),de.uniformMatrix4fv(de.getUniformLocation(this.mipmapcubeprogram,"projection"),!1,e.elements),de.uniform1i(de.getUniformLocation(this.mipmapcubeprogram,"environmentMap"),this.map.index);const t=5;for(let e=0;e<t;++e){const r=this.prefilterbuffer.size*Math.pow(.5,e),n=this.prefilterbuffer.size*Math.pow(.5,e);de.viewport(0,0,r,n);const i=e/(t-1);de.uniform1f(de.getUniformLocation(this.mipmapcubeprogram,"roughness"),i);for(let t=0;t<6;t++)de.framebufferTexture2D(de.FRAMEBUFFER,de.COLOR_ATTACHMENT0,de.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.prefilterMap,e),de.uniformMatrix4fv(de.getUniformLocation(this.mipmapcubeprogram,"view"),!1,this.views[t].elements),de.clear(de.COLOR_BUFFER_BIT|de.DEPTH_BUFFER_BIT),de.drawArrays(de.TRIANGLES,0,36)}de.bindVertexArray(null),de.bindFramebuffer(de.FRAMEBUFFER,null)}de.bindFramebuffer(de.FRAMEBUFFER,this.brdfbuffer),de.useProgram(this.bdrfprogram),de.bindVertexArray(this.quadVAO),de.viewport(0,0,this.brdfbuffer.size,this.brdfbuffer.size),de.framebufferTexture2D(de.FRAMEBUFFER,de.COLOR_ATTACHMENT0,de.TEXTURE_2D,this.brdfLUTTexture,0),de.clear(de.COLOR_BUFFER_BIT|de.DEPTH_BUFFER_BIT),de.drawArrays(de.TRIANGLE_STRIP,0,4),de.bindVertexArray(null),de.bindFramebuffer(de.FRAMEBUFFER,null),de.disable(de.CULL_FACE),de.viewport(0,0,this.width,this.height)}createEnvironmentBuffer(){{const e=32,t=de.createFramebuffer();this.irradiancebuffer=t,this.irradiancebuffer.size=e,de.bindFramebuffer(de.FRAMEBUFFER,t);const r=P(de.TEXTURE_CUBE_MAP);for(let t=0;t<6;t++)de.texImage2D(de.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,de.RGBA16F,e,e,0,de.RGBA,de.FLOAT,null),de.framebufferTexture2D(de.FRAMEBUFFER,de.COLOR_ATTACHMENT0,de.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,0);de.texParameteri(de.TEXTURE_CUBE_MAP,de.TEXTURE_WRAP_S,de.CLAMP_TO_EDGE),de.texParameteri(de.TEXTURE_CUBE_MAP,de.TEXTURE_WRAP_T,de.CLAMP_TO_EDGE),de.texParameteri(de.TEXTURE_CUBE_MAP,de.TEXTURE_WRAP_R,de.CLAMP_TO_EDGE),de.texParameteri(de.TEXTURE_CUBE_MAP,de.TEXTURE_MIN_FILTER,de.LINEAR),de.texParameteri(de.TEXTURE_CUBE_MAP,de.TEXTURE_MAG_FILTER,de.LINEAR),this.irradiancemap=r}{const e=512,t=de.createFramebuffer();this.framebuffer=t,this.framebuffer.size=e,de.bindFramebuffer(de.FRAMEBUFFER,t);const r=P(de.TEXTURE_CUBE_MAP);for(let t=0;t<6;t++)de.texImage2D(de.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,de.RGBA16F,e,e,0,de.RGBA,de.FLOAT,null),de.framebufferTexture2D(de.FRAMEBUFFER,de.COLOR_ATTACHMENT0,de.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,0);de.texParameteri(de.TEXTURE_CUBE_MAP,de.TEXTURE_WRAP_S,de.CLAMP_TO_EDGE),de.texParameteri(de.TEXTURE_CUBE_MAP,de.TEXTURE_WRAP_T,de.CLAMP_TO_EDGE),de.texParameteri(de.TEXTURE_CUBE_MAP,de.TEXTURE_WRAP_R,de.CLAMP_TO_EDGE),de.texParameteri(de.TEXTURE_CUBE_MAP,de.TEXTURE_MIN_FILTER,de.LINEAR_MIPMAP_LINEAR),de.texParameteri(de.TEXTURE_CUBE_MAP,de.TEXTURE_MAG_FILTER,de.LINEAR),de.generateMipmap(de.TEXTURE_CUBE_MAP),this.map=r}{const e=128,t=de.createFramebuffer();this.prefilterbuffer=t,this.prefilterbuffer.size=e,de.bindFramebuffer(de.FRAMEBUFFER,t);const r=P(de.TEXTURE_CUBE_MAP);for(let t=0;t<6;t++)de.texImage2D(de.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,de.RGBA16F,e,e,0,de.RGBA,de.FLOAT,null),de.framebufferTexture2D(de.FRAMEBUFFER,de.COLOR_ATTACHMENT0,de.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,t);de.texParameteri(de.TEXTURE_CUBE_MAP,de.TEXTURE_WRAP_S,de.CLAMP_TO_EDGE),de.texParameteri(de.TEXTURE_CUBE_MAP,de.TEXTURE_WRAP_T,de.CLAMP_TO_EDGE),de.texParameteri(de.TEXTURE_CUBE_MAP,de.TEXTURE_WRAP_R,de.CLAMP_TO_EDGE),de.texParameteri(de.TEXTURE_CUBE_MAP,de.TEXTURE_MIN_FILTER,de.LINEAR_MIPMAP_LINEAR),de.texParameteri(de.TEXTURE_CUBE_MAP,de.TEXTURE_MAG_FILTER,de.LINEAR),de.generateMipmap(de.TEXTURE_CUBE_MAP),this.prefilterMap=r}{const e=512,t=de.createFramebuffer();this.brdfbuffer=t,this.brdfbuffer.size=e,de.bindFramebuffer(de.FRAMEBUFFER,t);const r=P();de.texImage2D(de.TEXTURE_2D,0,de.RG16F,e,e,0,de.RG,de.FLOAT,null),de.texParameteri(de.TEXTURE_2D,de.TEXTURE_WRAP_S,de.CLAMP_TO_EDGE),de.texParameteri(de.TEXTURE_2D,de.TEXTURE_WRAP_T,de.CLAMP_TO_EDGE),de.texParameteri(de.TEXTURE_2D,de.TEXTURE_MIN_FILTER,de.LINEAR),de.texParameteri(de.TEXTURE_2D,de.TEXTURE_MAG_FILTER,de.LINEAR),this.brdfLUTTexture=r;const n=[-1,1,-1,-1,1,1,1,-1];this.quadVAO=de.createVertexArray(),de.bindVertexArray(this.quadVAO);const i=de.createBuffer();de.bindBuffer(de.ARRAY_BUFFER,i),de.bufferData(de.ARRAY_BUFFER,new Float32Array(n),de.STATIC_DRAW),de.enableVertexAttribArray(0),de.vertexAttribPointer(0,2,de.FLOAT,!1,0,0),de.bindVertexArray(null)}const e=[[new a([0,1,0]),Math.PI/2],[new a([0,1,0]),-Math.PI/2],[new a([1,0,0]),-Math.PI/2],[new a([1,0,0]),Math.PI/2],[new a([0,1,0]),Math.PI],[new a([0,1,0]),0]];this.views=e.map((e,t)=>{const r=new s;if(r.makeRotationAxis(e[0],e[1]),2!==t&&3!==t){const e=new s;e.makeRotationAxis(new a([0,0,1]),Math.PI),r.multiply(e)}return r.multiply(this.camera.matrix),(new s).setInverseOf(r)});const t=[-1,1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,1,1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,-1,1,1,1,1,1,1,1,1,1,-1,1,-1,-1,-1,-1,1,-1,1,1,1,1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,-1,1,1,-1,1,1,1,1,1,1,-1,1,1,-1,1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,1,-1,-1,-1,-1,1,1,-1,1];this.VAO=de.createVertexArray(),de.bindVertexArray(this.VAO);{const e=de.createBuffer();de.bindBuffer(de.ARRAY_BUFFER,e),de.bufferData(de.ARRAY_BUFFER,new Float32Array(t),de.STATIC_DRAW),de.enableVertexAttribArray(0),de.vertexAttribPointer(0,3,de.FLOAT,!1,0,0)}return de.bindVertexArray(null),this.cubeprogram=M(ne.a,se.a),this.irradianceprogram=M(ne.a,ae.a),this.mipmapcubeprogram=M(ne.a,ce.a),this.bdrfprogram=M(me.a,ue.a),fetch(`src/images/${this.url}.hdr`).then(e=>e.arrayBuffer()).then(e=>{const{data:t}=te()(e);return this.texture=P(),de.pixelStorei(de.UNPACK_FLIP_Y_WEBGL,!0),de.texParameteri(de.TEXTURE_2D,de.TEXTURE_MAG_FILTER,de.LINEAR),de.texParameteri(de.TEXTURE_2D,de.TEXTURE_MIN_FILTER,de.LINEAR),de.texParameteri(de.TEXTURE_2D,de.TEXTURE_WRAP_S,de.CLAMP_TO_EDGE),de.texParameteri(de.TEXTURE_2D,de.TEXTURE_WRAP_T,de.CLAMP_TO_EDGE),de.texImage2D(de.TEXTURE_2D,0,de.RGBA16F,1024,512,0,de.RGBA,de.FLOAT,t),this.createEnvironment(),!0})}}var Te=r(10),Ee=r.n(Te),ge=r(11),ve=r.n(ge);class Re{constructor(e,t,r,n,i,s){this.boundingSphere={center:new a,radius:null,min:null,max:null},this.uniformBuffer=null,this.UBO=null,this.VAO=null,this.indicesBuffer=null,this.attributes=null,this.targets=null,this.blend=null,this.uniforms=null,this.SKIN=null,this.targets=[];const o=t.accessors[i.indices],l=new Map;for(const e in i.attributes)l.set(e,t.accessors[i.attributes[e]]);if(i.targets)for(const e of i.targets){const n={};for(const i in e){n[i]=t.accessors[e[i]];const s=n[i],o=t.bufferViews[s.bufferView];n[i]=_(r[o.buffer],s.componentType,L(o.byteOffset,s.byteOffset),b(s.type)*s.count)}this.targets.push(n)}let h;if(o){const e=t.bufferViews[o.bufferView];h=_(r[e.buffer],o.componentType,L(e.byteOffset,o.byteOffset),b(o.type)*o.count)}const u={min:l.get("POSITION").min,max:l.get("POSITION").max},f={};for(const e of l.keys()){const s=l.get(e),o=t.bufferViews[s.bufferView];if(f[e]=_(r[o.buffer],s.componentType,L(o.byteOffset,s.byteOffset),b(s.type)*s.count,o.byteStride,s.count),i.targets&&e in i.targets[0]){let t=0;const r=f[e];f[e]=new Float32Array(r.length);for(let i=0;i<f[e].length;i++)"TANGENT"!==e||(i+1)%4!=0?f[e][i]=r[i]+n.reduce((r,s,o)=>r+n[o]*this.targets[o][e][i-t],0):t++}}s&&void 0===i.attributes.TANGENT&&(f.TANGENT=function(e,t,r,n){const i=new Float32Array(r.length/3*4);for(let r=0;r<e.length;r+=3){const l=[e[r],e[r+1],e[r+2]],c=l.map(e=>s(t,e)),h=l.map(e=>s(n,e,2)),u=c[1].subtract(c[0]),f=c[2].subtract(c[0]),m=h[1].subtract(h[0]),d=h[2].subtract(h[0]);let p=m.elements[0]*d.elements[1]-m.elements[1]*d.elements[0];p=0!==p?1/p:1;const T=new a([(d.elements[1]*u.elements[0]-m.elements[1]*f.elements[0])*p,(d.elements[1]*u.elements[1]-m.elements[1]*f.elements[1])*p,(d.elements[1]*u.elements[2]-m.elements[1]*f.elements[2])*p]);T.normalize(),l.forEach(e=>{o(i,e,T)})}return i;function s(e,t,r=3){return t*=r,3===r?new a([e[t],e[t+1],e[t+2]]):2===r?new c([e[t],e[t+1]]):void 0}function o(e,t,r,n=4,i=((e,t)=>e+t)){t*=n;for(let s=0;s<n;++s)e[t+s]=3===s?-1:i(e[t+s],r.elements[s])}}(h,f.POSITION,f.NORMAL,f.TEXCOORD_0));const m=e.createVertexArray();e.bindVertexArray(m);for(const t in f){const r=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,r),e.bufferData(e.ARRAY_BUFFER,f[t],e.STATIC_DRAW);const n=S(t);e.enableVertexAttribArray(n[0]),e.vertexAttribPointer(n[0],n[1],n[2],!1,0,0)}if(h){const t=e.createBuffer();e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,t),e.bufferData(e.ELEMENT_ARRAY_BUFFER,h,e.STATIC_DRAW)}this.VAO=m,this.attributes=f,this.indicesBuffer=h;const{min:d,max:p}=u;this.boundingSphere.min=new a(d),this.boundingSphere.max=new a(p),this.calculateBounding(),e.bindVertexArray(null)}calculateBounding(){const e=this.attributes.POSITION;let t=0;this.boundingSphere.center.add(this.boundingSphere.min).add(this.boundingSphere.max).scale(.5);for(let r=0;r<e.length;r+=3)t=Math.max(t,this.boundingSphere.center.distanceToSquared(e[r],e[r+1],e[r+2]));this.boundingSphere.radius=Math.sqrt(t)}updateUniforms(e,t,r,n,i){const o=new s(r);o.invert().transpose();const a=new O;a.add("model",r.elements),a.add("normalMatrix",o.elements),a.add("view",n.matrixWorldInvert.elements),a.add("projection",n.projection.elements),a.add("light",i.matrixWorldInvert.elements),a.add("isShadow",0),a.done();const l=e.getUniformBlockIndex(t,"Matrices");e.uniformBlockBinding(t,l,0);const c=e.createBuffer();e.bindBuffer(e.UNIFORM_BUFFER,c),e.bufferData(e.UNIFORM_BUFFER,a.store,e.DYNAMIC_DRAW),this.UBO=c,this.uniformBuffer=a,e.bindBuffer(e.UNIFORM_BUFFER,null)}}let be;class xe{constructor(e,t,r){this.url=e,this.host=e.substr(0,e.lastIndexOf("/")+1),this.tracks=[],this.duration=0,this.skins=[],this.textures=null,this.samplers=null,this.arrayBuffer=null,this.cameras=[],this.programs={},this.defines=t,this.resize=r}setScene(e){this.scene=e}setGl(e){be=e}setCamera(e){this.camera=e}setLight(e){this.light=e}setCanvas(e){this.canvas=e}getBuffer(){return Promise.all(this.scene.bin.map(e=>fetch(`${this.host}${e}`).then(e=>e.arrayBuffer()))).then(e=>{this.arrayBuffer=e})}createProgram(e){let t;const r=e.map(e=>`${e.name}${e.value||1}`).join("");if(this.programs[r])t=this.programs[r];else{const n=e.map(e=>`#define ${e.name} ${e.value||1}`+"\n").join("");t=M(Ee.a.replace(/\n/,`\n${n}`),ve.a.replace(/\n/,`\n${n}`)),this.programs[r]=t}return t}buildPrim(e,t,r,n,i){const s=this.json.materials&&this.json.materials[i.material],o=[...this.defines],a=new X(s,this.textures,o);void 0!==r&&o.push({name:"JOINTNUMBER",value:this.skins[r].jointNames.length}),(i.attributes.TANGENT||a.hasNormal())&&o.push({name:"TANGENT"});const l=this.createProgram(o);a.createUniforms(be,l),a.updateUniforms(be,l,this.camera,this.light);const c=void 0!==r?new d(t,e):new m(t,e),h=new Re(be,this.json,this.arrayBuffer,n,i,a.hasNormal());return c.setProgram(l),c.setMode(i.mode),c.setMaterial(a),c.setGeometry(h),c.setDefines(a.defines),c instanceof d&&c.setSkin(be,this.skins[r]),c.updateMatrix(),c}buildNode(e,t){const r=this.json.nodes[t];let n;if(void 0!==r.camera){xe.__update("camera",Object.assign({zoom:1,aspect:this.canvas.offsetWidth/this.canvas.offsetHeight},this.json.cameras[r.camera]),t,e);const i=N((n=this.camera).props);n.setProjection(i),this.cameras.push(n)}else n=void 0!==r.isBone?new p(t,e):new f(t,e);if(r.translation||r.rotation||r.scale?n.setPosition(r.translation,r.rotation,r.scale):r.matrix&&n.setMatrix(r.matrix),n.updateMatrix(),e.children.push(n),e=n,void 0!==r.mesh){if(void 0!==r.skin)for(const e of this.skins[r.skin].jointNames)w(this.scene,this.buildBones.bind(this,e,this.skins[r.skin]));e.children.push(...this.json.meshes[r.mesh].primitives.map(this.buildPrim.bind(this,e,this.json.meshes[r.mesh].name,r.skin,this.json.meshes[r.mesh].weights)))}r.children&&r.children.length&&r.children.forEach(this.buildNode.bind(this,e))}calculateFov(){let e;w(this.scene,t=>{t instanceof m&&(e||(e=t),t.geometry.boundingSphere.radius>e.geometry.boundingSphere.radius&&(e=t))});const t=Math.max(e.matrixWorld.getScaleZ(),1),r=Math.hypot(...e.getPosition());this.camera.modelSize=e.geometry.boundingSphere.radius*t+r+Math.hypot(...e.geometry.boundingSphere.center.elements),this.resize()}buildMesh(){this.json.scenes[void 0!==this.json.scene?this.json.scene:0].nodes.forEach(e=>{this.json.nodes[e].children&&this.json.nodes[e].children.length&&this.buildNode(this.scene,e),void 0!==this.json.nodes[e].mesh&&this.buildNode(this.scene,e),void 0!==this.json.nodes[e].camera&&this.buildNode(this.scene,e)}),this.calculateFov();const e=h(this.camera.getViewProjMatrix());w(this.scene,t=>{t instanceof m&&(t.geometry.updateUniforms(be,t.program,t.matrixWorld,this.camera,this.light),t.material.alphaMode?this.scene.transparentChildren.push(t):this.scene.opaqueChildren.push(t),this.scene.meshes.push(t),t.visible=t.isVisible(e))}),this.scene.opaqueChildren.sort((e,t)=>e.distance-t.distance),this.scene.transparentChildren.sort((e,t)=>e.distance-t.distance)}buildAnimation(){if(!this.json.animations)return!0;for(const e of this.json.animations)for(const t of e.channels){const r=e.samplers[t.sampler];if(r){const{target:n}=t,i=n.node,s=void 0!==e.parameters?e.parameters[r.input]:r.input,o=void 0!==e.parameters?e.parameters[r.output]:r.output,a=this.json.accessors[s],l=this.json.accessors[o],c=this.json.bufferViews[a.bufferView],h=this.json.bufferViews[l.bufferView],u=_(this.arrayBuffer[c.buffer],a.componentType,L(c.byteOffset,a.byteOffset),b(a.type)*a.count),m=_(this.arrayBuffer[h.buffer],l.componentType,L(h.byteOffset,l.byteOffset),b(l.type)*l.count),d=[];w(this.scene,e=>{e.name===i&&("weights"===n.path&&e instanceof f&&(e=e.children[0]),d.push(e))});const p=x(n.path)||d[0].geometry.targets.length,T=[];for(let e=0;e<u.length;e++){const t=u[e],r=m.slice(e*p,(e+1)*p);T.push({time:t,value:r})}this.duration=Math.max(T[T.length-1].time,this.duration),d.length&&this.tracks.push({stoped:!1,meshes:d,type:n.path,name:`${d[0].name}.${n.path}`,keys:T,interpolation:r.interpolation})}}}buildSkin(){if(!this.json.skins)return!0;for(const e of this.json.skins){const t=this.json.accessors[e.inverseBindMatrices],r=this.json.bufferViews[t.bufferView],n=_(this.arrayBuffer[r.buffer],t.componentType,L(r.byteOffset,t.byteOffset),b(t.type)*t.count),i={jointNames:e.joints,inverseBindMatrices:n,bones:[],boneInverses:[]};let o=0;for(const e of i.jointNames){this.json.nodes[e].isBone=!0;const t=i.inverseBindMatrices,r=(new s).set(t.slice(16*o,16*(o+1)));i.boneInverses.push(r),o++}this.skins.push(i)}}buildBones(e,t,r){r.name===e&&t.bones.push(r)}getJson(){return fetch(this.url).then(e=>e.json()).then(e=>{for(const t in e.buffers)this.scene.bin.push(e.buffers[t].uri);return this.json=e,!0})}initTextures(){if(!this.json.textures)return!0;const e=this.json.samplers||[{}];this.samplers=e.map(e=>{const t=be.createSampler();return be.samplerParameteri(t,be.TEXTURE_MIN_FILTER,e.minFilter||9986),be.samplerParameteri(t,be.TEXTURE_MAG_FILTER,e.magFilter||9729),be.samplerParameteri(t,be.TEXTURE_WRAP_S,e.wrapS||10497),be.samplerParameteri(t,be.TEXTURE_WRAP_T,e.wrapT||10497),t});const t={};this.json.textures.forEach(e=>{const r=String(e.sampler)+String(e.source);t[r]=e,t[r].name=r,e.name=r});const r=Object.values(t).map(e=>new Promise((t,r)=>{const n=this.samplers[void 0!==e.sampler?e.sampler:0],i=this.json.images[e.source],s=new Image;s.onload=(()=>{t(this.handleTextureLoaded(n,s,e.name))}),s.onerror=(e=>{r(e)}),s.crossOrigin="anonymous",s.src=`${this.host}${i.uri}`}));return Promise.all(r).then(e=>(this.textures=this.json.textures.map(t=>e.find(e=>e.name===t.name)),!0))}handleTextureLoaded(e,t,r){const n=be.createTexture();return n.name=r,n.image=t.src.substr(t.src.lastIndexOf("/")),n.sampler=e,be.activeTexture(be.TEXTURE31),be.bindTexture(be.TEXTURE_2D,n),be.texImage2D(be.TEXTURE_2D,0,be.RGBA,be.RGBA,be.UNSIGNED_BYTE,t),be.generateMipmap(be.TEXTURE_2D),n}}var Ae=r(12),Fe=r.n(Ae),_e=r(1),Ue=r.n(_e);let Me;const Pe=4,we=32;var Be=r(13),ye=r.n(Be);let Ne;var Le=r(14),Se=r.n(Le);let De;const Ce={bloom:class extends H{setGL(e){Ne=e}attachUniform(e){Ne.uniform1i(Ne.getUniformLocation(e,"bloom"),this.blurTexture.index)}postProcessing(e){Ne.bindFramebuffer(Ne.FRAMEBUFFER,this.framebuffer),Ne.useProgram(this.bloorProgram),Ne.framebufferTexture2D(Ne.FRAMEBUFFER,Ne.COLOR_ATTACHMENT0,Ne.TEXTURE_2D,this.hdrTexture,0),Ne.uniform1i(Ne.getUniformLocation(this.bloorProgram,"diff"),e.screenTexture.index),Ne.drawArrays(Ne.TRIANGLES,0,6),Ne.useProgram(this.program),Ne.viewport(0,0,this.width/2,this.height/2),this.renderBlur(this.hdrTexture,this.program),this.renderBlur(this.blurTexture,this.program),this.renderBlur(this.blurTexture,this.program),this.renderBlur(this.blurTexture,this.program),this.renderBlur(this.blurTexture,this.program),Ne.bindFramebuffer(Ne.FRAMEBUFFER,null),Ne.viewport(0,0,this.width,this.height)}buildScreenBuffer(e){return this.framebuffer=Ne.createFramebuffer(),Ne.bindFramebuffer(Ne.FRAMEBUFFER,this.framebuffer),this.tempBlurTexture=e.createDefaultTexture(2),this.blurTexture=e.createDefaultTexture(2),this.hdrTexture=e.createByteTexture(),Ne.bindFramebuffer(Ne.FRAMEBUFFER,null),this.program=M(me.a,Ue.a),this.bloorProgram=M(me.a,ye.a),{name:"BLOOM"}}renderBlur(e,t){Ne.framebufferTexture2D(Ne.FRAMEBUFFER,Ne.COLOR_ATTACHMENT0,Ne.TEXTURE_2D,this.tempBlurTexture,0),Ne.clearColor(...v),Ne.clear(Ne.COLOR_BUFFER_BIT|Ne.DEPTH_BUFFER_BIT|Ne.STENSIL_BUFFER_BIT),Ne.uniform1i(Ne.getUniformLocation(t,"uTexture"),e.index),Ne.uniform2f(Ne.getUniformLocation(t,"denom"),1,0),Ne.drawArrays(Ne.TRIANGLES,0,6),Ne.framebufferTexture2D(Ne.FRAMEBUFFER,Ne.COLOR_ATTACHMENT0,Ne.TEXTURE_2D,this.blurTexture,0),Ne.uniform1i(Ne.getUniformLocation(t,"uTexture"),this.tempBlurTexture.index),Ne.uniform2f(Ne.getUniformLocation(t,"denom"),0,1),Ne.drawArrays(Ne.TRIANGLES,0,6)}preProcessing(){}},ssao:class extends H{constructor(){super(),this.scale=2}setGL(e){Me=e}attachUniform(e){Me.uniform1i(Me.getUniformLocation(e,"ssao"),this.ssaoTexture.index)}postProcessing(e){Me.bindFramebuffer(Me.FRAMEBUFFER,this.framebuffer),Me.framebufferTexture2D(Me.FRAMEBUFFER,Me.COLOR_ATTACHMENT0,Me.TEXTURE_2D,this.ssaoTexture,0),Me.clearColor(...v),Me.clear(Me.COLOR_BUFFER_BIT|Me.DEPTH_BUFFER_BIT),Me.useProgram(this.ssaoProgram);const t=this.camera.props.perspective||this.camera.props.orthographic;Me.uniform1i(Me.getUniformLocation(this.ssaoProgram,"normBuff"),e.normalTexture.index),Me.uniform1i(Me.getUniformLocation(this.ssaoProgram,"depthBuff"),e.depthTexture.index),Me.uniform1i(Me.getUniformLocation(this.ssaoProgram,"noice"),this.noice.index),Me.uniform2f(Me.getUniformLocation(this.ssaoProgram,"noiseScale"),this.width/this.scale/Pe,this.height/this.scale/Pe),Me.uniform1f(Me.getUniformLocation(this.ssaoProgram,"zFar"),t.zfar),Me.uniform1f(Me.getUniformLocation(this.ssaoProgram,"zNear"),t.znear),Me.uniformMatrix4fv(Me.getUniformLocation(this.ssaoProgram,"proj"),!1,this.camera.projection.elements),Me.uniformMatrix4fv(Me.getUniformLocation(this.ssaoProgram,"view"),!1,this.camera.matrixWorldInvert.elements),Me.uniformMatrix4fv(Me.getUniformLocation(this.ssaoProgram,"projI"),!1,(new s).setInverseOf(this.camera.projection).elements),Me.uniform3fv(Me.getUniformLocation(this.ssaoProgram,"kernels"),this.kernels),Me.viewport(0,0,this.width/this.scale,this.height/this.scale),Me.drawArrays(Me.TRIANGLES,0,6),Me.framebufferTexture2D(Me.FRAMEBUFFER,Me.COLOR_ATTACHMENT0,Me.TEXTURE_2D,this.ssaoBlurTexture,0),Me.clear(Me.COLOR_BUFFER_BIT|Me.DEPTH_BUFFER_BIT),Me.useProgram(this.ssaoBlurProgram),Me.uniform1i(Me.getUniformLocation(this.ssaoBlurProgram,"uTexture"),this.ssaoTexture.index),Me.uniform2f(Me.getUniformLocation(this.ssaoBlurProgram,"denom"),1,0),Me.drawArrays(Me.TRIANGLES,0,6),Me.framebufferTexture2D(Me.FRAMEBUFFER,Me.COLOR_ATTACHMENT0,Me.TEXTURE_2D,this.ssaoTexture,0),Me.uniform1i(Me.getUniformLocation(this.ssaoBlurProgram,"uTexture"),this.ssaoBlurTexture.index),Me.uniform2f(Me.getUniformLocation(this.ssaoBlurProgram,"denom"),0,1),Me.drawArrays(Me.TRIANGLES,0,6),Me.bindFramebuffer(Me.FRAMEBUFFER,null),Me.viewport(0,0,this.width,this.height)}buildScreenBuffer(e){return this.framebuffer=Me.createFramebuffer(),Me.bindFramebuffer(Me.FRAMEBUFFER,this.framebuffer),this.ssaoTexture=e.createOneChannelTexture(this.scale),this.ssaoBlurTexture=e.createOneChannelTexture(this.scale),Me.framebufferTexture2D(Me.FRAMEBUFFER,Me.COLOR_ATTACHMENT0,Me.TEXTURE_2D,this.ssaoTexture,0),this.ssaoProgram=M(me.a,Fe.a),this.ssaoBlurProgram=M(me.a,Ue.a),this.buildNoice(e),this.buildKernels(),Me.bindFramebuffer(Me.FRAMEBUFFER,null),{name:"SSAO"}}buildNoice(e){const t=new Float32Array(Pe*Pe*3);for(let e=0;e<Pe*Pe;e++){const r=new a([2*R(0,1)-1,2*R(0,1)-1,.1]);t[3*e]=r.elements[0],t[3*e+1]=r.elements[1],t[3*e+2]=r.elements[2]}this.noice=e.createNoiceTexture(Pe,t)}buildKernels(){const e=new Array(we);for(let r=0;r<e.length;r++){e[r]=new a([2*R(0,1)-1,2*R(0,1)-1,R(0,1)]),e[r].normalize(),e[r].scale(R(0,1));let n=r/e.length;n=(t=.1)+n*n*(1-t),e[r].scale(n)}var t;this.kernels=new Float32Array(3*e.length);let r=0;for(const t of e)this.kernels.set(t.elements,3*r),r++}preProcessing(){}},shadow:J,light:K};class Oe{constructor(e,t){this.renderScene=t,this.postprocessors=e.map(e=>new Ce[e]),this.MSAA=4}setRenderer(e){this.renderer=e}setCamera(e){this.camera=e,this.postprocessors.forEach(t=>{t.setCamera(e)})}setLight(e){this.postprocessors.forEach(t=>{t.light=e})}setGl(e){e&&(De=e,this.postprocessors.forEach(e=>{e.setGL(De)}),this.fakeDepth=this.createNoiceTexture(1,new Float32Array([1,1,0])))}setCanvas(e){this.canvas=e,this.postprocessors.forEach(t=>{t.setCanvas(e)})}get width(){return this.canvas.offsetWidth*devicePixelRatio}get height(){return this.canvas.offsetHeight*devicePixelRatio}bindPrePass(){De.bindFramebuffer(De.FRAMEBUFFER,this.preframebuffer)}bindPostPass(){De.bindFramebuffer(De.FRAMEBUFFER,this.renderframebuffer)}preProcessing(){this.postprocessors.forEach(e=>e.preProcessing(this))}postProcessing(){De.bindFramebuffer(De.READ_FRAMEBUFFER,this.renderframebuffer),De.bindFramebuffer(De.DRAW_FRAMEBUFFER,this.framebuffer),De.readBuffer(De.COLOR_ATTACHMENT0),De.drawBuffers([De.COLOR_ATTACHMENT0]),De.blitFramebuffer(0,0,this.width,this.height,0,0,this.width,this.height,De.COLOR_BUFFER_BIT,De.NEAREST),De.readBuffer(De.COLOR_ATTACHMENT1),De.drawBuffers([De.NONE,De.COLOR_ATTACHMENT1]),De.blitFramebuffer(0,0,this.width,this.height,0,0,this.width,this.height,De.COLOR_BUFFER_BIT,De.NEAREST),De.blitFramebuffer(0,0,this.width,this.height,0,0,this.width,this.height,De.DEPTH_BUFFER_BIT,De.NEAREST),De.bindVertexArray(this.VAO),this.postprocessors.forEach(e=>e.postProcessing(this)),De.bindFramebuffer(De.FRAMEBUFFER,null),De.useProgram(this.program),this.postprocessors.forEach(e=>{e.attachUniform(this.program)}),De.uniform1i(De.getUniformLocation(this.program,"original"),this.screenTexture.index),De.uniform1i(De.getUniformLocation(this.program,"normal"),this.normalTexture.index),De.uniform1i(De.getUniformLocation(this.program,"depth"),this.depthTexture.index),De.uniform1i(De.getUniformLocation(this.program,"preDepth"),this.preDepthTexture.index),De.drawArrays(De.TRIANGLES,0,6)}createByteTexture(){const e=P();return De.texParameteri(De.TEXTURE_2D,De.TEXTURE_MAG_FILTER,De.NEAREST),De.texParameteri(De.TEXTURE_2D,De.TEXTURE_MIN_FILTER,De.NEAREST),De.texImage2D(De.TEXTURE_2D,0,De.RGBA,this.width,this.height,0,De.RGBA,De.UNSIGNED_BYTE,null),e}createDefaultTexture(e=1){const t=P();return De.texParameteri(De.TEXTURE_2D,De.TEXTURE_MAG_FILTER,De.NEAREST),De.texParameteri(De.TEXTURE_2D,De.TEXTURE_MIN_FILTER,De.NEAREST),De.texImage2D(De.TEXTURE_2D,0,De.RGBA16F,this.width/e,this.height/e,0,De.RGBA,De.FLOAT,null),t}createOneChannelTexture(e=1){const t=P();return De.texParameteri(De.TEXTURE_2D,De.TEXTURE_MAG_FILTER,De.LINEAR),De.texParameteri(De.TEXTURE_2D,De.TEXTURE_MIN_FILTER,De.LINEAR),De.texImage2D(De.TEXTURE_2D,0,De.R8,this.width/e,this.height/e,0,De.RED,De.UNSIGNED_BYTE,null),t}createDepthTexture(){const e=P();return De.texParameteri(De.TEXTURE_2D,De.TEXTURE_MAG_FILTER,De.NEAREST),De.texParameteri(De.TEXTURE_2D,De.TEXTURE_MIN_FILTER,De.NEAREST),De.texImage2D(De.TEXTURE_2D,0,De.DEPTH_COMPONENT24,this.width,this.height,0,De.DEPTH_COMPONENT,De.UNSIGNED_INT,null),e}createNoiceTexture(e,t){const r=P();return De.texParameteri(De.TEXTURE_2D,De.TEXTURE_MAG_FILTER,De.NEAREST),De.texParameteri(De.TEXTURE_2D,De.TEXTURE_MIN_FILTER,De.NEAREST),De.texParameteri(De.TEXTURE_2D,De.TEXTURE_WRAP_S,De.REPEAT),De.texParameteri(De.TEXTURE_2D,De.TEXTURE_WRAP_T,De.REPEAT),De.texImage2D(De.TEXTURE_2D,0,De.RGB16F,e,e,0,De.RGB,De.FLOAT,t),r}buildScreenBuffer(){if(De.getExtension("EXT_color_buffer_float"),De.getExtension("OES_texture_float_linear"),0===this.postprocessors.length)return!0;const e=this.postprocessors.map(e=>e.buildScreenBuffer(this)).map(e=>`#define ${e.name} ${e.value||1}`+"\n").join("");this.VAO=De.createVertexArray(),De.bindVertexArray(this.VAO);const t=De.createBuffer();De.bindBuffer(De.ARRAY_BUFFER,t),De.bufferData(De.ARRAY_BUFFER,new Float32Array([1,1,-1,1,-1,-1,-1,-1,1,-1,1,1]),De.STATIC_DRAW),De.enableVertexAttribArray(0),De.vertexAttribPointer(0,2,De.FLOAT,!1,0,0),De.bindVertexArray(null);const r=De.createRenderbuffer();De.bindRenderbuffer(De.RENDERBUFFER,r),De.renderbufferStorageMultisample(De.RENDERBUFFER,this.MSAA,De.RGBA16F,this.width,this.height);const n=De.createRenderbuffer();De.bindRenderbuffer(De.RENDERBUFFER,n),De.renderbufferStorageMultisample(De.RENDERBUFFER,this.MSAA,De.RGBA16F,this.width,this.height);const i=De.createRenderbuffer();De.bindRenderbuffer(De.RENDERBUFFER,i),De.renderbufferStorageMultisample(De.RENDERBUFFER,this.MSAA,De.DEPTH_COMPONENT24,this.width,this.height),this.renderframebuffer=De.createFramebuffer(),De.bindFramebuffer(De.FRAMEBUFFER,this.renderframebuffer),De.framebufferRenderbuffer(De.FRAMEBUFFER,De.COLOR_ATTACHMENT0,De.RENDERBUFFER,r),De.framebufferRenderbuffer(De.FRAMEBUFFER,De.COLOR_ATTACHMENT1,De.RENDERBUFFER,n),De.framebufferRenderbuffer(De.FRAMEBUFFER,De.DEPTH_ATTACHMENT,De.RENDERBUFFER,i),De.drawBuffers([De.COLOR_ATTACHMENT0,De.COLOR_ATTACHMENT1]),this.framebuffer=De.createFramebuffer(),De.bindFramebuffer(De.FRAMEBUFFER,this.framebuffer),this.screenTexture=this.createDefaultTexture(),this.normalTexture=this.createDefaultTexture(),this.depthTexture=this.createDepthTexture(),De.framebufferTexture2D(De.FRAMEBUFFER,De.COLOR_ATTACHMENT0,De.TEXTURE_2D,this.screenTexture,0),De.framebufferTexture2D(De.FRAMEBUFFER,De.COLOR_ATTACHMENT1,De.TEXTURE_2D,this.normalTexture,0),De.framebufferTexture2D(De.FRAMEBUFFER,De.DEPTH_ATTACHMENT,De.TEXTURE_2D,this.depthTexture,0),De.drawBuffers([De.COLOR_ATTACHMENT0,De.COLOR_ATTACHMENT1]),De.bindFramebuffer(De.FRAMEBUFFER,null),this.preframebuffer=De.createFramebuffer(),De.bindFramebuffer(De.FRAMEBUFFER,this.preframebuffer),this.preDepthTexture=this.createDepthTexture(),De.framebufferTexture2D(De.FRAMEBUFFER,De.DEPTH_ATTACHMENT,De.TEXTURE_2D,this.preDepthTexture,0),De.bindFramebuffer(De.FRAMEBUFFER,null),this.program=M(me.a.replace(/\n/,`\n${e}`),Se.a.replace(/\n/,`\n${e}`))}clear(){console.error("implement")}}function Ie(e,t,r){this.x=e,this.y=t,this.z=r}Ie.prototype.dot2=function(e,t){return this.x*e+this.y*t},Ie.prototype.dot3=function(e,t,r){return this.x*e+this.y*t+this.z*r};var Ve=[new Ie(1,1,0),new Ie(-1,1,0),new Ie(1,-1,0),new Ie(-1,-1,0),new Ie(1,0,1),new Ie(-1,0,1),new Ie(1,0,-1),new Ie(-1,0,-1),new Ie(0,1,1),new Ie(0,-1,1),new Ie(0,1,-1),new Ie(0,-1,-1)],Xe=[151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180],Ge=new Array(512),He=new Array(512);!function(e){e>0&&e<1&&(e*=65536),(e=Math.floor(e))<256&&(e|=e<<8);for(var t=0;t<256;t++){var r;r=1&t?Xe[t]^255&e:Xe[t]^e>>8&255,Ge[t]=Ge[t+256]=r,He[t]=He[t+256]=Ve[r%12]}}(0);Math.sqrt(3),Math.sqrt(3);function ke(e){return e*e*e*(e*(6*e-15)+10)}function ze(e,t,r){return(1-r)*e+r*t}function je(e,t,r){var n=Math.floor(e),i=Math.floor(t),s=Math.floor(r);e-=n,t-=i,r-=s;var o=He[(n&=255)+Ge[(i&=255)+Ge[s&=255]]].dot3(e,t,r),a=He[n+Ge[i+Ge[s+1]]].dot3(e,t,r-1),l=He[n+Ge[i+1+Ge[s]]].dot3(e,t-1,r),c=He[n+Ge[i+1+Ge[s+1]]].dot3(e,t-1,r-1),h=He[n+1+Ge[i+Ge[s]]].dot3(e-1,t,r),u=He[n+1+Ge[i+Ge[s+1]]].dot3(e-1,t,r-1),f=He[n+1+Ge[i+1+Ge[s]]].dot3(e-1,t-1,r),m=He[n+1+Ge[i+1+Ge[s+1]]].dot3(e-1,t-1,r-1),d=ke(e),p=ke(t),T=ke(r);return ze(ze(ze(o,h,d),ze(a,u,d),T),ze(ze(l,f,d),ze(c,m,d),T),p)}var We=r(15),Ye=r.n(We),qe=r(16),$e=r.n(qe),Ke=r(17),Je=r.n(Ke),Ze=r(18),Qe=r.n(Ze);let et;const tt=1e3;class rt{constructor(e){this.getLight=e}setGl(e){et=e}setCamera(e){this.camera=e}build(){this.currentSourceIdx=0;const e=et.createProgram();U(et.VERTEX_SHADER,Qe.a,e),U(et.FRAGMENT_SHADER,Je.a,e);et.transformFeedbackVaryings(e,["v_position","v_velocity","v_spawntime","v_lifetime"],et.SEPARATE_ATTRIBS),et.linkProgram(e),this.program=e;const t=M(Ye.a,$e.a);this.program2=t;const r=[et.createVertexArray(),et.createVertexArray()],n=[et.createTransformFeedback(),et.createTransformFeedback()];this.VAO=r,this.TFO=n;for(const e of[0,1]){et.bindVertexArray(r[e]);const t=[];{const e=new Float32Array(3*tt);for(let t=0;t<tt;t++)e[3*t]=0,e[3*t+1]=0,e[3*t+2]=0;const r=et.createBuffer();et.bindBuffer(et.ARRAY_BUFFER,r),et.bufferData(et.ARRAY_BUFFER,e,et.STREAM_COPY),et.enableVertexAttribArray(0),et.vertexAttribPointer(0,3,et.FLOAT,!1,0,0),et.vertexAttribDivisor(0,1),t.push(r)}{const e=new Float32Array(3*tt);for(let t=0;t<tt;t++)e[3*t]=0,e[3*t+1]=0,e[3*t+2]=0;const r=et.createBuffer();et.bindBuffer(et.ARRAY_BUFFER,r),et.bufferData(et.ARRAY_BUFFER,e,et.STREAM_COPY),et.enableVertexAttribArray(1),et.vertexAttribPointer(1,3,et.FLOAT,!1,0,0),et.vertexAttribDivisor(1,1),t.push(r)}{const e=new Float32Array(1*tt);for(let t=0;t<tt;t++)e[2*t]=0;const r=et.createBuffer();et.bindBuffer(et.ARRAY_BUFFER,r),et.bufferData(et.ARRAY_BUFFER,e,et.STREAM_COPY),et.enableVertexAttribArray(2),et.vertexAttribPointer(2,1,et.FLOAT,!1,0,0),et.vertexAttribDivisor(2,1),t.push(r)}{const e=new Float32Array(1*tt);for(let t=0;t<tt;t++)e[2*t]=0;const r=et.createBuffer();et.bindBuffer(et.ARRAY_BUFFER,r),et.bufferData(et.ARRAY_BUFFER,e,et.STREAM_COPY),et.enableVertexAttribArray(3),et.vertexAttribPointer(3,1,et.FLOAT,!1,0,0),et.vertexAttribDivisor(3,1),t.push(r)}et.bindBuffer(et.ARRAY_BUFFER,null),et.bindTransformFeedback(et.TRANSFORM_FEEDBACK,n[e]);let i=0;for(const e of t)et.bindBufferBase(et.TRANSFORM_FEEDBACK_BUFFER,i,e),i++}const i=new Uint8Array(2097152);for(let e=0;e<128;++e)for(let t=0;t<128;++t)for(let r=0;r<128;++r){let n=je(r/8,t/8,e/8);n=128*(1+n),i[r+128*t+128*e*128]=n}this.texture3d=P(et.TEXTURE_3D),et.texParameteri(et.TEXTURE_3D,et.TEXTURE_BASE_LEVEL,0),et.texParameteri(et.TEXTURE_3D,et.TEXTURE_MAX_LEVEL,Math.log2(128)),et.texParameteri(et.TEXTURE_3D,et.TEXTURE_MIN_FILTER,et.LINEAR_MIPMAP_LINEAR),et.texParameteri(et.TEXTURE_3D,et.TEXTURE_MAG_FILTER,et.LINEAR),et.texImage3D(et.TEXTURE_3D,0,et.R8,128,128,128,0,et.RED,et.UNSIGNED_BYTE,i),et.generateMipmap(et.TEXTURE_3D)}draw(e){const t=(this.currentSourceIdx+1)%2;et.useProgram(this.program),et.bindVertexArray(this.VAO[this.currentSourceIdx]),et.bindTransformFeedback(et.TRANSFORM_FEEDBACK,this.TFO[t]);const r=new s;r.multiply(this.camera.projection),r.multiply(this.camera.matrixWorldInvert),et.uniform1f(et.getUniformLocation(this.program,"u_time"),e+5e3),et.uniform1f(et.getUniformLocation(this.program,"count"),tt),et.uniform1i(et.getUniformLocation(this.program,"noize"),this.texture3d.index),et.enable(et.RASTERIZER_DISCARD),et.beginTransformFeedback(et.POINTS),et.drawArraysInstanced(et.POINTS,0,1,tt),et.endTransformFeedback(),et.disable(et.RASTERIZER_DISCARD),et.bindTransformFeedback(et.TRANSFORM_FEEDBACK,null),et.bindBuffer(et.TRANSFORM_FEEDBACK_BUFFER,null);const n=et.fenceSync(et.SYNC_GPU_COMMANDS_COMPLETE,0);et.waitSync(n,0,et.TIMEOUT_IGNORED),et.deleteSync(n),et.useProgram(this.program2),et.bindVertexArray(this.VAO[t]),et.uniformMatrix4fv(et.getUniformLocation(this.program2,"MVPMatrix"),!1,r.elements),et.uniform1i(et.getUniformLocation(this.program2,"light"),this.getLight()),et.drawArraysInstanced(et.POINTS,0,1,tt),this.currentSourceIdx=(this.currentSourceIdx+1)%2}}let nt;r.d(t,"RedCube",function(){return st});const it=15;class st{constructor(e,t,r,i,s){this.canvas=t,this.processors=r;const o=[];0===r.length&&o.push({name:"TONE"}),r.some(e=>"shadow"===e)&&o.push({name:"SHADOWMAP"}),"pbr"===s&&o.push({name:"USE_PBR"}),this.ioc=new n,this.ioc.register("env",pe,["camera","canvas","gl"],i),this.ioc.register("camera",D,[],{type:"perspective",isInitial:!0,zoom:1,aspect:this.canvas.offsetWidth/this.canvas.offsetHeight,perspective:{yfov:it*Math.PI/180}}),this.ioc.register("canvas",t),this.ioc.register("scene",u),this.ioc.register("light",C),this.ioc.register("pp",Oe,["light","camera","canvas","gl"],r,this.renderScene.bind(this)),this.ioc.register("parser",xe,["scene","light","camera","canvas","gl"],e,o,this.resize.bind(this)),this.ioc.register("particles",rt,["camera","gl"],()=>{return this.PP.postprocessors.find(e=>e instanceof K).texture.index}),this.ioc.register("renderer",Z,["gl","parser","pp","scene","camera","particles","env"],this.getState.bind(this)),this.events=new Q(this.redraw.bind(this))}get renderer(){return this.ioc.get("renderer")}get scene(){return this.ioc.get("scene")}get camera(){return this.ioc.get("camera")}get light(){return this.ioc.get("light")}get env(){return this.ioc.get("env")}get PP(){return this.ioc.get("pp")}get Particles(){return this.ioc.get("particles")}get parse(){return this.ioc.get("parser")}async init(e){await this.parse.getJson(),this.glInit(),this.Particles.build(),await this.parse.initTextures(),this.PP.buildScreenBuffer(),await this.parse.getBuffer(),this.parse.buildSkin(),this.parse.buildMesh(),this.resize(null),this.parse.buildAnimation(),await this.env.createEnvironmentBuffer(),this.draw(),e()}renderScene(...e){this.renderer.renderScene(...e)}redraw(e,t,r){"zoom"===e&&(this.camera.zoom(t),this.renderer.needUpdateProjection=!0),"rotate"===e&&(this.camera.rotate(t,r,this.canvas.offsetWidth,this.canvas.offsetHeight),this.renderer.needUpdateView=!0),"pan"===e&&(this.camera.pan(t,r,this.canvas.offsetWidth,this.canvas.offsetHeight),this.renderer.needUpdateView=!0),"resize"===e&&(this.resize(e),this.renderer.needUpdateProjection=!0),this.renderer.reflow=!0}resize(e){if(this.camera.props.aspect=this.canvas.offsetWidth/this.canvas.offsetHeight,this.canvas.width=this.canvas.offsetWidth*devicePixelRatio,this.canvas.height=this.canvas.offsetHeight*devicePixelRatio,nt.viewport(0,0,this.canvas.offsetWidth*devicePixelRatio,this.canvas.offsetHeight*devicePixelRatio),this.camera.props.isInitial){const e=1e4/this.canvas.width*this.camera.modelSize*devicePixelRatio;this.camera.setZ(e),this.light.setZ(e),this.light.update(Math.PI/2),this.renderer.needUpdateView=!0}else this.light.setZ(this.camera.matrixWorld.elements[14]),this.light.update(Math.PI/2),this.renderer.needUpdateView=!0;this.camera.updateNF(),e&&(this.PP.clear(),this.PP.buildScreenBuffer())}glInit(){if(nt=this.canvas.getContext("webgl2",{antialias:0===this.processors.length}),this.gl=nt,!nt)throw new Error("Webgl 2 doesnt support");!function(e){E=e;for(const e in E){const t=E[e];"number"==typeof t&&(T[t]=e)}}(nt),this.ioc.register("gl",nt)}draw(){nt.clearColor(...v),this.renderer.render()}getState(){return{camera:this.camera,light:this.light,preDepthTexture:this.PP.preDepthTexture,fakeDepth:this.PP.fakeDepth,needUpdateView:this.renderer.needUpdateView,needUpdateProjection:this.renderer.needUpdateProjection,irradiancemap:this.env.irradiancemap,prefilterMap:this.env.prefilterMap,brdfLUT:this.env.brdfLUTTexture}}}}])});
//# sourceMappingURL=redcube.js.map